/* parser generated by jison 0.4.15-107 */
/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    trace: function(errorMessage, errorHash),
 *    JisonParserError: function(msg, hash),
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    productions_: [...],
 *    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$, ...),
 *                (where `...` denotes the (optional) additional arguments the user passed to `parser.parse(str, ...)`)
 *    table: [...],
 *    defaultActions: {...},
 *    parseError: function(str, hash),
 *    parse: function(input),
 *
 *    lexer: {
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash),
 *        setInput: function(input),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(),
 *        upcomingInput: function(),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index),
 *        next: function(),
 *        lex: function(),
 *        begin: function(condition),
 *        popState: function(),
 *        _currentRules: function(),
 *        topState: function(),
 *        pushState: function(condition),
 *        stateStackSize: function(),
 *
 *        options: { ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
 *  }
 *
 * ---
 *
 * The parseError function receives a 'hash' object with these members for lexer and parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens; may be empty when we cannot easily produce such a set)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used, for instance, for advanced error analysis and reporting)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 *  When `parseError` is invoked by the lexer, `this` will still reference the related *parser* instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                              optional: you can specify a pre_parse() function in the chunk following the grammar, 
 *                              i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval) { return retval; }
 *                              optional: you can specify a post_parse() function in the chunk following the grammar, 
 *                              i.e. after the last `%%`. When it does not return any value, the parser will return 
 *                              the original `retval`.
 *
 * ### options which can be set up per parser instance
 *  
 *  yy: {
 *      pre_parse:  function(yy)
 *                              optional: is invoked before the parse cycle starts (and before the first invocation 
 *                              of `lex()`) but immediately after the invocation of parser.pre_parse()).
 *      post_parse: function(yy, retval) { return retval; }
 *                              optional: is invoked when the parse terminates due to success ('accept') or failure 
 *                              (even when exceptions are thrown).  `retval` contains the return value to be produced
 *                              by `Parser.parse()`; this function can override the return value by returning another. 
 *                              When it does not return any value, the parser will return the original `retval`. 
 *                              This function is invoked immediately before `Parser.post_parse()`.
 *      parseError: function(str, hash)
 *                              optional: overrides the default `parseError` function.
 *  }
 *
 *  parser.lexer.options: {
 *      ranges: boolean         optional: true ==> token location info will include a .range[] member.
 *      flex: boolean           optional: true ==> flex-like lexing behaviour where the rules are tested
 *                                                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                              optional: true ==> lexer regexes are tested in order and for each matching
 *                                                 regex the action code is invoked; the lexer terminates
 *                                                 the scan when a token is returned by the action code.
 *      pre_lex:  function()
 *                              optional: is invoked before the lexer is invoked to produce another token.
 *                              `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                              optional: is invoked when the lexer has produced a token `token`;
 *                              this function can override the returned token value by returning another.
 *                              When it does not return any (truthy) value, the lexer will return the original `token`.
 *                              `this` refers to the Lexer object.
 *  }
 */
var formulaVisyondV2 = (function () {
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript
function JisonParserError(msg, hash) {
    this.message = msg;
    this.hash = hash;
    var stacktrace = (new Error(msg)).stack;
    if (stacktrace) {
      this.stack = stacktrace;
    }
}
JisonParserError.prototype = Object.create(Error.prototype);
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';

function __expand__(k, v, o) {
  o = o || {};
  for (var l = k.length; l--; ) {
    o[k[l]] = v;
  }
  return o;
}

var $V0=[2,5],
    $V1=[2,5,85,86,87],
    $V2=[2,5,6,24,25,27,28,31,33,34,35,36,37,38],
    $V3=[2,5,6,24,25,27,28,31,37],
    $V4=[2,5,6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44],
    $V5=[2,5,6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,49,50],
    $V6=[2,5,6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50],
    $V7=[2,5,6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51],
    $V8=[2,5,6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,85,86,87],
    $V9=[62,81],
    $Va=[24,25],
    $Vb=[6,24,25,27,28,31,33,34,35,36,37,38],
    $Vc=[6,24,25,27,28,31,37],
    $Vd=[6,24,25,27,28,30,31,33,34,35,36,37,38,39,40],
    $Ve=[6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44],
    $Vf=[6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,49,50,51],
    $Vg=[6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51],
    $Vh=[6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,62],
    $Vi=[6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,62,85,86,87],
    $Vj=[6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,55],
    $Vk=[6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,57],
    $Vl=[75,80],
    $Vm=[2,5,24],
    $Vn=[2,5,6,24,25,27,28,31],
    $Vo=[2,5,6,24,25,27,28,31,37,39,40,42,43,44],
    $Vp=[2,5,6,24,25,27,28,31,37,39,40,42,43,44,49,50],
    $Vq=[2,5,6,24,25,27,28,31,37,39,40,42,43,44,47,49,50],
    $Vr=[2,5,6,24,25,27,28,31,37,39,40,42,43,44,47,49,50,51],
    $Vs=[2,5,6,24,25,27,28,31,37,39,40,42,43,44,47,49,50,51,85,86,87],
    $Vt=[2,5,6,24,25,27,28,30,31,33,34,35,36,37,38,39],
    $Vu=[2,5,6,24,25,27,28,31,37,38,39,40,42,43,44],
    $Vv=[2,5,6,24,25,27,28,31,37,38,39,40,42,43,44,49,50],
    $Vw=[2,5,6,24,25,27,28,31,37,38,39,40,42,43,44,47,49,50],
    $Vx=[2,5,6,24,25,27,28,31,37,38,39,40,42,43,44,47,49,50,51],
    $Vy=[2,5,6,24,25,27,28,31,37,38,39,40,42,43,44,47,49,50,51,85,86,87],
    $Vz=[2,5,6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44],
    $VA=[2,5,6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,49,50],
    $VB=[2,5,6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50],
    $VC=[2,5,6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51],
    $VD=[2,5,6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,85,86,87],
    $VE=[2,5,6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43],
    $VF=[2,5,6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,57],
    $VG=[62,75],
    $VH=[24,25,62],
    $VI=[6,24,25,27,28,31,33,34,35,36,37,38,62],
    $VJ=[6,24,25,27,28,31,37,62],
    $VK=[6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,62],
    $VL=[6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,49,50,51,62],
    $VM=[6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,62,81,85,86,87],
    $VN=[6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,57,62],
    $VO=[6,24,25,27,28,31,37,39,40],
    $VP=[6,24,25,27,28,31,37,39,40,42,43,44],
    $VQ=[6,24,25,27,28,31,37,39,40,42,43,44,49,50,51],
    $VR=[6,24,25,27,28,31,37,39,40,42,43,44,47,49,50,51],
    $VS=[6,24,25,27,28,31,37,39,40,42,43,44,47,49,50,51,62],
    $VT=[6,24,25,27,28,31,37,39,40,42,43,44,47,49,50,51,62,85,86,87],
    $VU=[6,24,25,27,28,31,37,39,40,42,43,44,47,49,50,51,55],
    $VV=[6,24,25,27,28,31,37,39,40,42,43,44,47,49,50,51,57],
    $VW=[6,24,25,27,28,31,37,38],
    $VX=[6,24,25,27,28,31,37,38,39,40],
    $VY=[6,24,25,27,28,31,37,38,39,40,42,43,44],
    $VZ=[6,24,25,27,28,31,37,38,39,40,42,43,44,49,50,51],
    $V_=[6,24,25,27,28,31,37,38,39,40,42,43,44,47,49,50,51],
    $V$=[6,24,25,27,28,31,37,38,39,40,42,43,44,47,49,50,51,62],
    $V01=[6,24,25,27,28,31,37,38,39,40,42,43,44,47,49,50,51,62,85,86,87],
    $V11=[6,24,25,27,28,31,37,38,39,40,42,43,44,47,49,50,51,55],
    $V21=[6,24,25,27,28,31,37,38,39,40,42,43,44,47,49,50,51,57],
    $V31=[6,24,25,27,28,31,33,34,35,36,37,38,39,40],
    $V41=[6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44],
    $V51=[6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,49,50,51],
    $V61=[6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51],
    $V71=[6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,62],
    $V81=[6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,62,85,86,87],
    $V91=[6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,55],
    $Va1=[6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,57],
    $Vb1=[6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43],
    $Vc1=[6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,51],
    $Vd1=[2,5,6,24,25,27,28,31,37,39],
    $Ve1=[2,5,6,24,25,27,28,31,37,39,40,42,43],
    $Vf1=[2,5,6,24,25,27,28,31,37,39,40,42,43,44,47,49,50,51,57],
    $Vg1=[2,5,6,24,25,27,28,31,37,38,39],
    $Vh1=[2,5,6,24,25,27,28,31,37,38,39,40,42,43],
    $Vi1=[2,5,6,24,25,27,28,31,37,38,39,40,42,43,44,47,49,50,51,57],
    $Vj1=[2,5,6,24,25,27,28,31,33,34,35,36,37,38,39],
    $Vk1=[2,5,6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43],
    $Vl1=[2,5,6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,57],
    $Vm1=[6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,67],
    $Vn1=[6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,67,85,86,87],
    $Vo1=[6,24,25,27,28,31,37,39,40,62],
    $Vp1=[6,24,25,27,28,31,37,39,40,42,43,44,49,50,51,62],
    $Vq1=[6,24,25,27,28,31,37,39,40,42,43,44,47,49,50,51,62,81,85,86,87],
    $Vr1=[6,24,25,27,28,31,37,39,40,42,43,44,47,49,50,51,57,62],
    $Vs1=[6,24,25,27,28,31,37,38,62],
    $Vt1=[6,24,25,27,28,31,37,38,39,40,62],
    $Vu1=[6,24,25,27,28,31,37,38,39,40,42,43,44,49,50,51,62],
    $Vv1=[6,24,25,27,28,31,37,38,39,40,42,43,44,47,49,50,51,62,81,85,86,87],
    $Vw1=[6,24,25,27,28,31,37,38,39,40,42,43,44,47,49,50,51,57,62],
    $Vx1=[6,24,25,27,28,31,33,34,35,36,37,38,39,40,62],
    $Vy1=[6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,49,50,51,62],
    $Vz1=[6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,62,81,85,86,87],
    $VA1=[6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,57,62],
    $VB1=[6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,62],
    $VC1=[6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,57,62,66],
    $VD1=[6,24,25,27,28,31,37,39,40,42,43],
    $VE1=[6,24,25,27,28,31,37,39,40,42,43,44,51],
    $VF1=[6,24,25,27,28,31,37,38,39,40,42,43],
    $VG1=[6,24,25,27,28,31,37,38,39,40,42,43,44,51],
    $VH1=[6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43],
    $VI1=[6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,51],
    $VJ1=[6,24,25,27,28,31,37,39,40,42,43,44,47,49,50,51,67],
    $VK1=[6,24,25,27,28,31,37,39,40,42,43,44,47,49,50,51,67,85,86,87],
    $VL1=[6,24,25,27,28,31,37,38,39,40,42,43,44,47,49,50,51,67],
    $VM1=[6,24,25,27,28,31,37,38,39,40,42,43,44,47,49,50,51,67,85,86,87],
    $VN1=[6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,67],
    $VO1=[6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,67,85,86,87],
    $VP1=[6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,57,66],
    $VQ1=[6,24,25,27,28,31,37,39,40,42,43,62],
    $VR1=[6,24,25,27,28,31,37,39,40,42,43,44,47,49,50,51,57,62,66],
    $VS1=[6,24,25,27,28,31,37,38,39,40,42,43,62],
    $VT1=[6,24,25,27,28,31,37,38,39,40,42,43,44,47,49,50,51,57,62,66],
    $VU1=[6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,62],
    $VV1=[6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,57,62,66],
    $VW1=[6,24,25,27,28,31,37,39,40,42,43,44,47,49,50,51,57,66],
    $VX1=[6,24,25,27,28,31,37,38,39,40,42,43,44,47,49,50,51,57,66],
    $VY1=[6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,57,66];

var parser = {
trace: function trace() { },
JisonParserError: JisonParserError,
yy: {},
symbols_: {
  "!": 55,
  "$accept": 0,
  "$end": 1,
  "(": 60,
  ")": 62,
  "*": 42,
  "+": 39,
  ",": 81,
  "-": 40,
  ".": 57,
  "/": 43,
  "<": 36,
  "=": 6,
  ">": 35,
  "?": 51,
  "ALMOST_EQUAL": 30,
  "ARRAY_CONCATENATION_OPERATOR": 75,
  "BOOLEAN_AND_OPERATOR": 24,
  "BOOLEAN_OR_OPERATOR": 25,
  "CELLREF": 74,
  "CELLREF_PARSE_MODE": 9,
  "CONSTANT": 92,
  "CUBE_OPERATOR": 50,
  "CURRENCY": 88,
  "DEGREES_OPERATOR": 87,
  "EOF": 5,
  "EXCEL_FORCED_STRING": 22,
  "FALSE": 94,
  "FUNCTION": 59,
  "GREATER_OR_EQUAL": 33,
  "INTEGER_NUMBER": 91,
  "IS_EQUAL": 37,
  "IS_IDENTICAL": 31,
  "JSON_FIELD_NAME": 64,
  "JSON_FILTER_FUNCTION": 65,
  "LESS_OR_EQUAL": 34,
  "MODULO_OPERATOR": 44,
  "NOT_EQUAL": 27,
  "NOT_IDENTICAL": 28,
  "NUMBER": 90,
  "PATH": 73,
  "PERCENTAGE_OPERATOR": 86,
  "PROMILAGE_OPERATOR": 85,
  "RANGEREF": 83,
  "RANGEREF_PARSE_MODE": 11,
  "SQRT_OPERATOR": 48,
  "SQUARE_OPERATOR": 49,
  "STRING": 95,
  "STRING_CONCATENATION_OPERATOR": 38,
  "TRUE": 93,
  "URI": 71,
  "VALUE_PARSE_MODE": 13,
  "[": 66,
  "]": 67,
  "^": 47,
  "accept_direct_value": 8,
  "ambiguous_any_range_reference": 79,
  "any_range_reference": 12,
  "arglist": 61,
  "atomic_expression": 46,
  "boolean": 19,
  "boolean_expression": 23,
  "cell_reference": 10,
  "compare_expression": 26,
  "constant": 15,
  "curlybraced_range_reference": 77,
  "data_source": 53,
  "do_the_work": 4,
  "error": 2,
  "exponential_expression": 45,
  "fundamental_cell_reference": 68,
  "json_filter_expression": 58,
  "math_expression": 7,
  "multiply_expression": 41,
  "multivalued_data_source": 56,
  "number": 89,
  "numeric_expression": 29,
  "one_argument": 84,
  "one_json_filter_level": 63,
  "optional_remote_address_marker": 72,
  "percentage": 16,
  "percentage_alternative_for_data_entry": 21,
  "price": 17,
  "radians": 18,
  "range_reference": 82,
  "remote_address": 69,
  "remote_address_marker": 70,
  "single_range_reference_fragment": 76,
  "start_parsing": 3,
  "string": 20,
  "string_concatenation_expression": 32,
  "unary_expression": 52,
  "unary_expression_rvalue": 54,
  "value": 14,
  "{": 78,
  "}": 80
},
terminals_: {
  2: "error",
  5: "EOF",
  6: "=",
  9: "CELLREF_PARSE_MODE",
  11: "RANGEREF_PARSE_MODE",
  13: "VALUE_PARSE_MODE",
  22: "EXCEL_FORCED_STRING",
  24: "BOOLEAN_AND_OPERATOR",
  25: "BOOLEAN_OR_OPERATOR",
  27: "NOT_EQUAL",
  28: "NOT_IDENTICAL",
  30: "ALMOST_EQUAL",
  31: "IS_IDENTICAL",
  33: "GREATER_OR_EQUAL",
  34: "LESS_OR_EQUAL",
  35: ">",
  36: "<",
  37: "IS_EQUAL",
  38: "STRING_CONCATENATION_OPERATOR",
  39: "+",
  40: "-",
  42: "*",
  43: "/",
  44: "MODULO_OPERATOR",
  47: "^",
  48: "SQRT_OPERATOR",
  49: "SQUARE_OPERATOR",
  50: "CUBE_OPERATOR",
  51: "?",
  55: "!",
  57: ".",
  59: "FUNCTION",
  60: "(",
  62: ")",
  64: "JSON_FIELD_NAME",
  65: "JSON_FILTER_FUNCTION",
  66: "[",
  67: "]",
  71: "URI",
  73: "PATH",
  74: "CELLREF",
  75: "ARRAY_CONCATENATION_OPERATOR",
  78: "{",
  80: "}",
  81: ",",
  83: "RANGEREF",
  85: "PROMILAGE_OPERATOR",
  86: "PERCENTAGE_OPERATOR",
  87: "DEGREES_OPERATOR",
  88: "CURRENCY",
  90: "NUMBER",
  91: "INTEGER_NUMBER",
  92: "CONSTANT",
  93: "TRUE",
  94: "FALSE",
  95: "STRING"
},
nonterminals_: {
  "start_parsing": {
    1: "do_the_work EOF",
    2: "do_the_work error"
  },
  "do_the_work": {
    3: "= math_expression",
    4: "accept_direct_value",
    5: "CELLREF_PARSE_MODE cell_reference",
    6: "CELLREF_PARSE_MODE error",
    7: "RANGEREF_PARSE_MODE any_range_reference",
    8: "RANGEREF_PARSE_MODE error",
    9: "VALUE_PARSE_MODE accept_direct_value"
  },
  "accept_direct_value": {
    10: "value",
    11: "constant",
    12: "percentage",
    13: "price",
    14: "radians",
    15: "boolean",
    16: "string",
    17: "percentage_alternative_for_data_entry",
    18: "EXCEL_FORCED_STRING",
    19: "error"
  },
  "math_expression": {
    20: "boolean_expression"
  },
  "boolean_expression": {
    21: "boolean_expression BOOLEAN_AND_OPERATOR boolean_expression",
    22: "boolean_expression BOOLEAN_OR_OPERATOR boolean_expression",
    23: "compare_expression"
  },
  "compare_expression": {
    24: "compare_expression NOT_EQUAL compare_expression",
    25: "compare_expression NOT_IDENTICAL compare_expression",
    26: "numeric_expression ALMOST_EQUAL numeric_expression",
    27: "compare_expression IS_IDENTICAL compare_expression",
    28: "string_concatenation_expression GREATER_OR_EQUAL string_concatenation_expression",
    29: "string_concatenation_expression LESS_OR_EQUAL string_concatenation_expression",
    30: "string_concatenation_expression > string_concatenation_expression",
    31: "string_concatenation_expression < string_concatenation_expression",
    32: "compare_expression = compare_expression",
    33: "compare_expression IS_EQUAL compare_expression",
    34: "string_concatenation_expression"
  },
  "string_concatenation_expression": {
    35: "string_concatenation_expression STRING_CONCATENATION_OPERATOR string_concatenation_expression",
    36: "numeric_expression"
  },
  "numeric_expression": {
    37: "numeric_expression + numeric_expression",
    38: "numeric_expression - numeric_expression",
    39: "multiply_expression"
  },
  "multiply_expression": {
    40: "multiply_expression * multiply_expression",
    41: "multiply_expression / multiply_expression",
    42: "multiply_expression MODULO_OPERATOR multiply_expression",
    43: "exponential_expression"
  },
  "exponential_expression": {
    44: "atomic_expression ^ exponential_expression",
    45: "SQRT_OPERATOR exponential_expression",
    46: "exponential_expression SQUARE_OPERATOR",
    47: "exponential_expression CUBE_OPERATOR",
    48: "exponential_expression ?",
    49: "atomic_expression"
  },
  "atomic_expression": {
    50: "unary_expression",
    51: "data_source",
    52: "value",
    53: "constant",
    54: "percentage",
    55: "price",
    56: "radians",
    57: "boolean",
    58: "string",
    59: "error"
  },
  "unary_expression": {
    60: "- unary_expression_rvalue",
    61: "+ unary_expression_rvalue",
    62: "! unary_expression_rvalue"
  },
  "unary_expression_rvalue": {
    63: "data_source",
    64: "error"
  },
  "data_source": {
    65: "multivalued_data_source",
    66: "multivalued_data_source . json_filter_expression"
  },
  "multivalued_data_source": {
    67: "FUNCTION ( arglist )",
    68: "( math_expression )",
    69: "cell_reference"
  },
  "json_filter_expression": {
    70: "one_json_filter_level",
    71: "one_json_filter_level . json_filter_expression"
  },
  "one_json_filter_level": {
    72: "JSON_FIELD_NAME",
    73: "JSON_FILTER_FUNCTION ( arglist )",
    74: "one_json_filter_level [ math_expression ]",
    75: "error"
  },
  "cell_reference": {
    76: "fundamental_cell_reference",
    77: "remote_address fundamental_cell_reference"
  },
  "remote_address": {
    78: "string remote_address_marker",
    79: "( URI ) optional_remote_address_marker",
    80: "( PATH ) optional_remote_address_marker",
    81: "URI optional_remote_address_marker",
    82: "PATH optional_remote_address_marker"
  },
  "optional_remote_address_marker": {
    83: "<epsilon>",
    84: "remote_address_marker"
  },
  "remote_address_marker": {
    85: "!"
  },
  "fundamental_cell_reference": {
    86: "CELLREF"
  },
  "any_range_reference": {
    87: "any_range_reference ARRAY_CONCATENATION_OPERATOR any_range_reference",
    88: "any_range_reference ARRAY_CONCATENATION_OPERATOR error",
    89: "single_range_reference_fragment"
  },
  "curlybraced_range_reference": {
    90: "{ ambiguous_any_range_reference }"
  },
  "ambiguous_any_range_reference": {
    91: "ambiguous_any_range_reference , ambiguous_any_range_reference",
    92: "any_range_reference",
    93: "cell_reference",
    94: "error"
  },
  "single_range_reference_fragment": {
    95: "range_reference",
    96: "curlybraced_range_reference"
  },
  "range_reference": {
    97: "RANGEREF"
  },
  "one_argument": {
    98: "math_expression",
    99: "any_range_reference",
    100: "<epsilon>"
  },
  "arglist": {
    101: "one_argument",
    102: "arglist , one_argument"
  },
  "percentage_alternative_for_data_entry": {
    103: "MODULO_OPERATOR value",
    104: "PROMILAGE_OPERATOR value"
  },
  "percentage": {
    105: "value PERCENTAGE_OPERATOR",
    106: "value PROMILAGE_OPERATOR"
  },
  "radians": {
    107: "value DEGREES_OPERATOR"
  },
  "price": {
    108: "CURRENCY value",
    109: "value CURRENCY"
  },
  "value": {
    110: "- number",
    111: "+ number",
    112: "number"
  },
  "number": {
    113: "NUMBER",
    114: "INTEGER_NUMBER"
  },
  "constant": {
    115: "CONSTANT",
    116: "- CONSTANT",
    117: "+ CONSTANT"
  },
  "boolean": {
    118: "TRUE",
    119: "FALSE"
  },
  "string": {
    120: "STRING"
  },
  "$accept": {
    0: "start_parsing $end"
  }
},
productions_: [
  0,
  [
    3,
    2
  ],
  [
    3,
    2
  ],
  [
    4,
    2
  ],
  [
    4,
    1
  ],
  [
    4,
    2
  ],
  [
    4,
    2
  ],
  [
    4,
    2
  ],
  [
    4,
    2
  ],
  [
    4,
    2
  ],
  [
    8,
    1
  ],
  [
    8,
    1
  ],
  [
    8,
    1
  ],
  [
    8,
    1
  ],
  [
    8,
    1
  ],
  [
    8,
    1
  ],
  [
    8,
    1
  ],
  [
    8,
    1
  ],
  [
    8,
    1
  ],
  [
    8,
    1
  ],
  [
    7,
    1
  ],
  [
    23,
    3
  ],
  [
    23,
    3
  ],
  [
    23,
    1
  ],
  [
    26,
    3
  ],
  [
    26,
    3
  ],
  [
    26,
    3
  ],
  [
    26,
    3
  ],
  [
    26,
    3
  ],
  [
    26,
    3
  ],
  [
    26,
    3
  ],
  [
    26,
    3
  ],
  [
    26,
    3
  ],
  [
    26,
    3
  ],
  [
    26,
    1
  ],
  [
    32,
    3
  ],
  [
    32,
    1
  ],
  [
    29,
    3
  ],
  [
    29,
    3
  ],
  [
    29,
    1
  ],
  [
    41,
    3
  ],
  [
    41,
    3
  ],
  [
    41,
    3
  ],
  [
    41,
    1
  ],
  [
    45,
    3
  ],
  [
    45,
    2
  ],
  [
    45,
    2
  ],
  [
    45,
    2
  ],
  [
    45,
    2
  ],
  [
    45,
    1
  ],
  [
    46,
    1
  ],
  [
    46,
    1
  ],
  [
    46,
    1
  ],
  [
    46,
    1
  ],
  [
    46,
    1
  ],
  [
    46,
    1
  ],
  [
    46,
    1
  ],
  [
    46,
    1
  ],
  [
    46,
    1
  ],
  [
    46,
    1
  ],
  [
    52,
    2
  ],
  [
    52,
    2
  ],
  [
    52,
    2
  ],
  [
    54,
    1
  ],
  [
    54,
    1
  ],
  [
    53,
    1
  ],
  [
    53,
    3
  ],
  [
    56,
    4
  ],
  [
    56,
    3
  ],
  [
    56,
    1
  ],
  [
    58,
    1
  ],
  [
    58,
    3
  ],
  [
    63,
    1
  ],
  [
    63,
    4
  ],
  [
    63,
    4
  ],
  [
    63,
    1
  ],
  [
    10,
    1
  ],
  [
    10,
    2
  ],
  [
    69,
    2
  ],
  [
    69,
    4
  ],
  [
    69,
    4
  ],
  [
    69,
    2
  ],
  [
    69,
    2
  ],
  [
    72,
    0
  ],
  [
    72,
    1
  ],
  [
    70,
    1
  ],
  [
    68,
    1
  ],
  [
    12,
    3
  ],
  [
    12,
    3
  ],
  [
    12,
    1
  ],
  [
    77,
    3
  ],
  [
    79,
    3
  ],
  [
    79,
    1
  ],
  [
    79,
    1
  ],
  [
    79,
    1
  ],
  [
    76,
    1
  ],
  [
    76,
    1
  ],
  [
    82,
    1
  ],
  [
    84,
    1
  ],
  [
    84,
    1
  ],
  [
    84,
    0
  ],
  [
    61,
    1
  ],
  [
    61,
    3
  ],
  [
    21,
    2
  ],
  [
    21,
    2
  ],
  [
    16,
    2
  ],
  [
    16,
    2
  ],
  [
    18,
    2
  ],
  [
    17,
    2
  ],
  [
    17,
    2
  ],
  [
    14,
    2
  ],
  [
    14,
    2
  ],
  [
    14,
    1
  ],
  [
    89,
    1
  ],
  [
    89,
    1
  ],
  [
    15,
    1
  ],
  [
    15,
    2
  ],
  [
    15,
    2
  ],
  [
    19,
    1
  ],
  [
    19,
    1
  ],
  [
    20,
    1
  ]
],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */, yystack, cfg, one, two) {
/* this == yyval */

    /*
     * This chunk is included at the top of the actionHandler itself.
     */
    var rv, range;

    //console.log("parser exec rule: ", yystate, this, yy.lexer.options, arguments);

    var patch_tokenstream = yy.lexer.options.patch_tokenstream;
    assert(patch_tokenstream);
    var patch_resulttype = yy.lexer.options.patch_resulttype;
    assert(patch_resulttype);

var $0 = $$.length - 1;
switch (yystate) {
case 1 : 
/*! Production::     start_parsing : do_the_work EOF */
 
            // Note: we MAY return values such as 'undefined' or 'null', which would otherwise be picked up
            // by the JISON parser rig itself and be converted to a *boolean* `TRUE` value (action code 3 inside
            // the jison LALR parser stack engine).
            //
            // To thwart this 'default return value' behaviour of JISON we always wrap the actual calculated
            // value in an object, where our wrapper code will then extract it once we get outside the jison
            // engine/driver.
            return {
                value: $$[$0-1]
            };
         
break;
case 2 : 
/*! Production::     start_parsing : do_the_work error */
 
            rv = yy.parser.parseError("We do not expect anything following the valid expression.", {
                text: $$[$0],
                token: $$[$0],
                line: _$[$0],
                loc: _$[$0],
                outer_loc: this._$,
                expected: [],
                recoverable: false
            });
            assert(rv === null);
            return {
                value: NaN
            };
         
break;
case 3 : 
/*! Production::     do_the_work : '=' math_expression */
 
            patch_resulttype(FT_FORMULA);

            this.$ = $$[$0];
         
break;
case 4 : 
/*! Production::     do_the_work : accept_direct_value */
 
            rv = $$[$0];
            // A bit of a hack: when you enter a 'direct value EXPRESSION', e.g. `E1`, where the
            // referenced cell doesn't exist and therefor has no value (`undefined`), we *still*
            // want the resulting value right here to be one of string/boolean/number/date/whatever,
            // but we certainly DO NOT want it to produce the value `undefined`.
            //
            // Hence we coerce the result (as little as possible) before feeding it back to the caller.
            this.$ = coerceValueToStringIfUndefined(rv);
         
break;
case 5 : 
/*! Production::     do_the_work : CELLREF_PARSE_MODE cell_reference */
 case 65 : 
/*! Production::     data_source : multivalued_data_source */
 case 70 : 
/*! Production::     json_filter_expression : one_json_filter_level */
 case 72 : 
/*! Production::     one_json_filter_level : JSON_FIELD_NAME */
 case 86 : 
/*! Production::     fundamental_cell_reference : CELLREF */
 case 101 : 
/*! Production::     arglist : one_argument */
 
            this.$ = $$[$0];
         
break;
case 6 : 
/*! Production::     do_the_work : CELLREF_PARSE_MODE error */
 
            rv = yy.parser.parseError("Expected a single cell reference.", {
                text: $$[$0],
                token: $$[$0],
                line: _$[$0],
                loc: _$[$0],
                outer_loc: this._$,
                expected: [],
                recoverable: false
            });
            assert(rv === null);
            this.$ = NaN;
         
break;
case 7 : 
/*! Production::     do_the_work : RANGEREF_PARSE_MODE any_range_reference */
 
            /*
             * Check whether the AST is really a RANGEREF and not a CELLREF as the `any_range_reference` rule
             * can deliver a single CELLREF node due to LALR(1) grammar restrictions keeping us from
             * completely sepearating CELLREF and RANGEREF parsing.
             *
             * Anything apart from a RANGEREF should trigger an error report.
             */
            if (Array.isArray($$[$0])) {
                this.$ = $$[$0];
            } else {
                rv = yy.parser.parseError("Expected a cell range reference.", {
                    text: $$[$0],
                    token: $$[$0],
                    line: _$[$0],
                    loc: _$[$0],
                    outer_loc: this._$,
                    expected: [],
                    recoverable: false
                });
                assert(rv === null);
                this.$ = NaN;
            }
         
break;
case 8 : 
/*! Production::     do_the_work : RANGEREF_PARSE_MODE error */
 
            rv = yy.parser.parseError("Expected a cell range reference.", {
                text: $$[$0],
                token: $$[$0],
                line: _$[$0],
                loc: _$[$0],
                outer_loc: this._$,
                expected: [],
                recoverable: false
            });
            assert(rv === null);
            this.$ = NaN;
         
break;
case 9 : 
/*! Production::     do_the_work : VALUE_PARSE_MODE accept_direct_value */
 
            /*
             * TODO:
             *
             * Check whether the AST so far is 'basic' and suitable for 'folding' to a single value.
             *
             * Anything else should trigger an error report.
             */
            this.$ = $$[$0];
         
break;
case 17 : 
/*! Production::     accept_direct_value : percentage_alternative_for_data_entry */
 
            /* see the rule comment: this is to support Excel-compatible value data entry */
            this.$ = $$[$0];
         
break;
case 18 : 
/*! Production::     accept_direct_value : EXCEL_FORCED_STRING */
 
            patch_resulttype(FT_STRING);

            /* see the rule comment: this is to support Excel-compatible value data entry */
            assert(typeof $$[$0] === "string");
            this.$ = $$[$0];
         
break;
case 19 : 
/*! Production::     accept_direct_value : error */
 case 59 : 
/*! Production::     atomic_expression : error */
 
            rv = yy.parser.parseError("Expected a value or formula expression.", {
                text: $$[$0],
                token: $$[$0],
                line: _$[$0],
                loc: _$[$0],
                outer_loc: this._$,
                expected: [],
                recoverable: false
            });
            assert(rv === null);
            this.$ = NaN;
         
break;
case 21 : 
/*! Production::     boolean_expression : boolean_expression[first] BOOLEAN_AND_OPERATOR boolean_expression[last] */
 
            // Excel: `=AND("T",1)` gives `#VALUE!`; we do not emulate that behaviour here!
            this.$ = !!($$[$0-2] && $$[$0]);
         
break;
case 22 : 
/*! Production::     boolean_expression : boolean_expression[first] BOOLEAN_OR_OPERATOR boolean_expression[last] */
 
            // Excel: `=AND("T",1)` gives `#VALUE!`; we do not emulate that behaviour here!
            this.$ = !!($$[$0-2] || $$[$0]);
         
break;
case 24 : 
/*! Production::     compare_expression : compare_expression[first] NOT_EQUAL compare_expression[last] */
 case 25 : 
/*! Production::     compare_expression : compare_expression[first] NOT_IDENTICAL compare_expression[last] */
 
            // WARNING: see the Excel note below at IS_EQUAL: we don't really have a type-agnostic compare available!
            $$[$0-2] = coerceValueToStringIfUndefined($$[$0-2]);
            $$[$0] = coerceValueToStringIfUndefined($$[$0]);
            this.$ = ($$[$0-2] !== $$[$0]);
         
break;
case 26 : 
/*! Production::     compare_expression : numeric_expression[first] ALMOST_EQUAL numeric_expression[last] */
 
            var f = coerceValueToNumeric($$[$0-2]);
            var l = coerceValueToNumeric($$[$0]);
            if (!isNaN(f) && !isNaN(l)) {
                this.$ = (Math.abs(f - l) <= 1.0E-9); /* EPSILON */
            } else {
                // arguments may be a non-numeric type: here we perform a type-agnostic comparison then.
                // Also make sure that NaN compares to NaN as TRUE (JavaScript gives FALSE for that particular comparison)
                this.$ = ($$[$0-2] == $$[$0]) || (isNaN($$[$0-2]) && isNaN($$[$0]));
            }
         
break;
case 27 : 
/*! Production::     compare_expression : compare_expression[first] IS_IDENTICAL compare_expression[last] */
 
            // WARNING: see the Excel note below at IS_EQUAL: we don't really have a type-agnostic compare available!
            $$[$0-2] = coerceValueToStringIfUndefined($$[$0-2]);
            $$[$0] = coerceValueToStringIfUndefined($$[$0]);
            this.$ = ($$[$0-2] === $$[$0]);
         
break;
case 28 : 
/*! Production::     compare_expression : string_concatenation_expression[first] GREATER_OR_EQUAL string_concatenation_expression[last] */
 
            $$[$0-2] = coerceValueToNumeric($$[$0-2]);
            $$[$0] = coerceValueToNumeric($$[$0]);
            // Excel: `=FALSE>1.0e300` gives TRUE: we do not emulate that behaviour here.
            // 
            // Excel treats TRUE and FALSE as being *outside* the numeric range.
            // Other Excel peculiarities, such as `=TRUE+1` --> `` (empty!) are also unsupported!
            this.$ = ($$[$0-2] >= $$[$0]);
         
break;
case 29 : 
/*! Production::     compare_expression : string_concatenation_expression[first] LESS_OR_EQUAL string_concatenation_expression[last] */
 
            $$[$0-2] = coerceValueToNumeric($$[$0-2]);
            $$[$0] = coerceValueToNumeric($$[$0]);
            // Excel: `=FALSE>1.0e300` gives TRUE: we do not emulate that behaviour here.
            // 
            // Excel treats TRUE and FALSE as being *outside* the numeric range.
            // Other Excel peculiarities, such as `=TRUE+1` --> `` (empty!) are also unsupported!
            this.$ = ($$[$0-2] <= $$[$0]);
         
break;
case 30 : 
/*! Production::     compare_expression : string_concatenation_expression[first] '>'[greater_than] string_concatenation_expression[last] */
 
            $$[$0-2] = coerceValueToNumeric($$[$0-2]);
            $$[$0] = coerceValueToNumeric($$[$0]);
            // Excel: `=FALSE>1.0e300` gives TRUE: we do not emulate that behaviour here.
            // 
            // Excel treats TRUE and FALSE as being *outside* the numeric range.
            // Other Excel peculiarities, such as `=TRUE+1` --> `` (empty!) are also unsupported!
            this.$ = ($$[$0-2] > $$[$0]);
         
break;
case 31 : 
/*! Production::     compare_expression : string_concatenation_expression[first] '<'[less_than] string_concatenation_expression[last] */
 
            $$[$0-2] = coerceValueToNumeric($$[$0-2]);
            $$[$0] = coerceValueToNumeric($$[$0]);
            // Excel: `=FALSE>1.0e300` gives TRUE: we do not emulate that behaviour here.
            // 
            // Excel treats TRUE and FALSE as being *outside* the numeric range.
            // Other Excel peculiarities, such as `=TRUE+1` --> `` (empty!) are also unsupported!
            this.$ = ($$[$0-2] < $$[$0]);
         
break;
case 32 : 
/*! Production::     compare_expression : compare_expression[first] '='[equals] compare_expression[last] */
 
            // Excel says `="1"=1` is FALSE so doesn't perform auto-type-coercion while JavaScript does.
            // Hence we have to use `===` instead of `==` here:
            $$[$0-2] = coerceValueToStringIfUndefined($$[$0-2]);
            $$[$0] = coerceValueToStringIfUndefined($$[$0]);
            this.$ = ($$[$0-2] === $$[$0]);
         
break;
case 33 : 
/*! Production::     compare_expression : compare_expression[first] IS_EQUAL compare_expression[last] */
 
            /*
             * This is just another notation for `=`, but we don't allow `==`, etc. as start markers
             * of a formula, so we end up having to 'is equal' opcode tokens, alas.
             */
            $$[$0-2] = coerceValueToStringIfUndefined($$[$0-2]);
            $$[$0] = coerceValueToStringIfUndefined($$[$0]);
            this.$ = ($$[$0-2] === $$[$0]);
         
break;
case 35 : 
/*! Production::     string_concatenation_expression : string_concatenation_expression[first] STRING_CONCATENATION_OPERATOR string_concatenation_expression[last] */
 
            $$[$0-2] = coerceValueToStringIfUndefined($$[$0-2]);
            $$[$0] = coerceValueToStringIfUndefined($$[$0]);
            this.$ = ('' + $$[$0-2] + $$[$0]);
         
break;
case 37 : 
/*! Production::     numeric_expression : numeric_expression[first] '+'[add] numeric_expression[last] */
 
            $$[$0-2] = coerceValueToNumeric($$[$0-2]);
            $$[$0] = coerceValueToNumeric($$[$0]);
            // Excel: `=FALSE>1.0e300` gives TRUE: we do not emulate that behaviour here.
            // 
            // Excel treats TRUE and FALSE as being *outside* the numeric range.
            // Other Excel peculiarities, such as `=TRUE+1` --> `` (empty!) are also unsupported!
            this.$ = ($$[$0-2] + $$[$0]);
         
break;
case 38 : 
/*! Production::     numeric_expression : numeric_expression[first] '-'[subtract] numeric_expression[last] */
 
            $$[$0-2] = coerceValueToNumeric($$[$0-2]);
            $$[$0] = coerceValueToNumeric($$[$0]);
            // Excel: `=FALSE>1.0e300` gives TRUE: we do not emulate that behaviour here.
            // 
            // Excel treats TRUE and FALSE as being *outside* the numeric range.
            // Other Excel peculiarities, such as `=TRUE+1` --> `` (empty!) are also unsupported!
            this.$ = ($$[$0-2] - $$[$0]);
         
break;
case 40 : 
/*! Production::     multiply_expression : multiply_expression[first] '*'[multiply] multiply_expression[last] */
 
            $$[$0-2] = coerceValueToNumeric($$[$0-2]);
            $$[$0] = coerceValueToNumeric($$[$0]);
            // Excel: `=TRUE*1` --> `1`: for multiplication, TRUE and FALSE are treated as numeric 1 and 0, respectively.
            // Of course, we *do* support that behaviour!
            this.$ = ($$[$0-2] * $$[$0]);
         
break;
case 41 : 
/*! Production::     multiply_expression : multiply_expression[first] '/'[divide] multiply_expression[last] */
 
            $$[$0-2] = coerceValueToNumeric($$[$0-2]);
            $$[$0] = coerceValueToNumeric($$[$0]);
            this.$ = ($$[$0-2] / $$[$0]);
         
break;
case 42 : 
/*! Production::     multiply_expression : multiply_expression[first] MODULO_OPERATOR multiply_expression[last] */
 
            $$[$0-2] = coerceValueToNumeric($$[$0-2]);
            $$[$0] = coerceValueToNumeric($$[$0]);
            this.$ = ($$[$0-2] % $$[$0]);
         
break;
case 44 : 
/*! Production::     exponential_expression : atomic_expression[first] '^'[power] exponential_expression[last] */
 
            $$[$0-2] = coerceValueToNumeric($$[$0-2]);
            $$[$0] = coerceValueToNumeric($$[$0]);
            this.$ = Math.pow($$[$0-2], $$[$0]);
         
break;
case 45 : 
/*! Production::     exponential_expression : SQRT_OPERATOR exponential_expression */
 
            $$[$0] = coerceValueToNumeric($$[$0]);
            this.$ = Math.sqrt($$[$0]);
         
break;
case 46 : 
/*! Production::     exponential_expression : exponential_expression SQUARE_OPERATOR */
 
            $$[$0-1] = coerceValueToNumeric($$[$0-1]);
            this.$ = Math.pow($$[$0-1], 2);
         
break;
case 47 : 
/*! Production::     exponential_expression : exponential_expression CUBE_OPERATOR */
 
            $$[$0-1] = coerceValueToNumeric($$[$0-1]);
            this.$ = Math.pow($$[$0-1], 3);
         
break;
case 48 : 
/*! Production::     exponential_expression : exponential_expression '?'[TOPS20_help_request] */
 
            rv = yy.parser.parseError("TODO: provide inline/online help for this expression.", {
                text: $$[$0],
                token: $$[$0],
                line: _$[$0],
                loc: _$[$0],
                outer_loc: this._$,
                expected: [],
                recoverable: false
            });
            assert(rv === null);
            this.$ = NaN;
         
break;
case 60 : 
/*! Production::     unary_expression : '-'[minus] unary_expression_rvalue */
 
            this.$ = -coerceValueToNumeric($$[$0]);
         
break;
case 61 : 
/*! Production::     unary_expression : '+'[plus] unary_expression_rvalue */
 
            this.$ = +coerceValueToNumeric($$[$0]);
         
break;
case 62 : 
/*! Production::     unary_expression : '!'[negate] unary_expression_rvalue */
 
        if (!isNaN($$[$0])) {
                this.$ = !($$[$0]);   // No need to coerce the operand to numeric value before we apply boolean NOT
        } else {
            // propagate errors (NaN)
        this.$ = $$[$0];
        }
         
break;
case 64 : 
/*! Production::     unary_expression_rvalue : error */
 
            rv = yy.parser.parseError("Expected a numeric value or bracketed formula expression.", {
                text: $$[$0],
                token: $$[$0],
                line: _$[$0],
                loc: _$[$0],
                outer_loc: this._$,
                expected: [],
                recoverable: false
            });
            assert(rv === null);
            this.$ = NaN;
         
break;
case 66 : 
/*! Production::     data_source : multivalued_data_source '.'[dot] json_filter_expression */
 case 71 : 
/*! Production::     json_filter_expression : one_json_filter_level '.'[dot] json_filter_expression */
 
            rv = yy.parser.parseError("Dotted references into cell values are currently not support yet.", {
                text: $$[$0],
                token: $$[$0],
                line: _$[$0],
                loc: _$[$0],
                outer_loc: this._$,
                expected: [],
                recoverable: false
            });
            assert(rv === null);
            this.$ = NaN;
         
break;
case 67 : 
/*! Production::     multivalued_data_source : FUNCTION '('[open] arglist ')'[close] */
 
            /*
             * get the function name and attributes from the token argument:
             */
            var f_tok_locinfo = _$[$0-3];
            var f_tok_spec = $$[$0-3];
            var a = $$[$0-1];
            var chk;
            //console.log("exec function: ", f_tok_locinfo, f_tok_spec, a);
            assert(vUserPreferences.quality >= VQ_PRODUCTION_READY ? f_tok_spec.opcode ? (f_tok_spec.opcode.implementation || f_tok_spec.opcode.value !== undefined) : false /* only entries with good implementation are allowed */ : true);
            if (f_tok_spec.opcode && f_tok_spec.opcode.implementation) {
                // TODO: call generic validation function which picks up .opcode.parameters_set_definition[]
                // WARNING: that def array is not the bees' knees as it is flaky concerning functions
                // which accept arbitrary number and/or type of arguments: e.g. SUM, MAX, MIN: it TRIES to
                // encode that knowledge in the array, but you WILL hit snags as the idea has been coded but
                // never tested as is: THIS is testing time... :-(

                chk = yy.parser.passingArgumentSetValidation(f_tok_spec.opcode, a);
                if (chk) {
                    //console.log("Function " + f_tok_spec.text + ": ", chk);

                    // Implementation Notes
                    // --------------------
                    //
                    // You MUST invoke the custom parseError() coming from parserinput.js_$[$0130] by using the 'yy'
                    // variable as that one is the only one pointing at your 'live' Parser instance.
                    // ('this' points to the current yyval without the parser actions, which contrasts with the lexer actions...)
                    if (chk.is_user_failure) {
                        // When the error is a user formula entry mistake, it will abort and flag the formula as an error.
                        rv = yy.parser.parseError("Function " + f_tok_spec.text + ": " + chk.message, {
                            text: $$[$0-3],
                            token: $$[$0-3],
                            line: _$[$0-3],
                            loc: _$[$0-3],
                            expected: [],
                            recoverable: false,
                            failure_info: chk
                        });
                        assert(rv === null);
                        this.$ = NaN;
                    } else {
                        // Otherwise, the validation code discover a data input ('sourcing') error, which doesn't invalidate
                        // the function used, it merely will make it *fail* at run-time, producing an error (NaN) value.
                        //
                        // This type of error has no further impact: it only should be reported to help the user while she is
                        // entering the formula, thus serving as a notification that "you shouldn't expect anything sane from this
                        // formula given these inputs you're feeding it!"
                        //
                        // Ergo we DO report this issue, but DO NOT push an ERROR token into the tokenstream or otherwise abort
                        // the formula parsing process right now.
                        vGraph._dispatchEvent(vGraph.EVENT.onParseError, {
                            message: "Function " + f_tok_spec.text + ": " + chk.message,
                            dataErrorInfo: chk
                        });
                        // continue as if nothing untoward happened:
                        chk = false;
                    }
                }

                if (!chk) {
                    //console.log("a: ", a); // this is an array of values: one value per function argument.
                    if (f_tok_spec.opcode.subject_category_references === FCT_CATEGORY_QA) {
                        // provide our QA UDFs with location info for better reporting:
                        a.push({
                            command_token: f_tok_spec,
                            command_locinfo: _$[$0-3],
                            args_start_locinfo: _$[$0-2],
                            args_locinfo: _$[$0-1],
                            args_end_locinfo: _$[$0]
                        });
                    }
                    //WAS: this.$ = f_tok_spec.opcode.implementation.apply(this, a);
                    this.$ = Visyond.Functions.__exec_wrapper(f_tok_spec, a);        // 'flatten' and 'coerce' the argument list where needed.
                }
            } else if (f_tok_spec.opcode && f_tok_spec.opcode.value != null) {
                // We are invoking an Excel-like 'function constant'.
                // Make sure didn't pass any parameters, as passing any would be illegal.
                //
                // Note that the 'epsilon' argument (o which we expect exactly ONE), itself is
                // encoded as NULL!
                assert(a.length >= 1);
                if (a.length !== 1 && a[0] !== null) {
                    //console.log("Functional CONSTANT " + f_tok_spec.text + ": ", a);
                    // Implementation Notes
                    // --------------------
                    //
                    // You MUST invoke the custom parseError() coming from parserinput.js_$[$0130] by using the 'yy'
                    // variable as that one is the only one pointing at your 'live' Parser instance.
                    // ('this' points to the current yyval without the parser actions, which contrasts with the lexer actions...)
                    rv = yy.parser.parseError("Functional CONSTANT " + f_tok_spec.text + ": does not accept any arguments", {
                        text: $$[$0-3],
                        token: $$[$0-3],
                        line: _$[$0-3],
                        loc: _$[$0-3],
                        expected: [],
                        recoverable: false
                    });
                    assert(rv === null);
                    this.$ = NaN;
                } else {
                    this.$ = f_tok_spec.opcode.value;
                }
            } else {
                // we are trying to invoke a function which does NOT have any implementation!
                // This is an error - of the kind of 'not implemented yet?'
                rv = yy.parser.parseError("Function " + f_tok_spec.text + " has not been implemented yet.", {
                    text: $$[$0-3],
                    token: $$[$0-3],
                    line: _$[$0-3],
                    loc: _$[$0-3],
                    expected: [],
                    recoverable: false
                });
                assert(rv === null);
                this.$ = NaN;
            }
         
break;
case 68 : 
/*! Production::     multivalued_data_source : '(' math_expression ')' */
 case 109 : 
/*! Production::     price : value CURRENCY */
 
            this.$ = $$[$0-1];
         
break;
case 69 : 
/*! Production::     multivalued_data_source : cell_reference */
 
            this.$ = getCellValueFromGraph($$[$0]);
         
break;
case 73 : 
/*! Production::     one_json_filter_level : JSON_FILTER_FUNCTION '(' arglist ')' */
 case 74 : 
/*! Production::     one_json_filter_level : one_json_filter_level '[' math_expression ']'[last] */
 
            this.$ = $$[$0-3];
         
break;
case 75 : 
/*! Production::     one_json_filter_level : error */
 
            rv = yy.parser.parseError("Sub-level filters into cell values are currently not support yet.", {
                text: $$[$0],
                token: $$[$0],
                line: _$[$0],
                loc: _$[$0],
                outer_loc: this._$,
                expected: [],
                recoverable: false
            });
            assert(rv === null);
            this.$ = NaN;
         
break;
case 77 : 
/*! Production::     cell_reference : remote_address fundamental_cell_reference */
 
            rv = yy.parser.parseError("Remote / Cross-project cell references are currently not support yet.", {
                text: $$[$0-1],
                token: $$[$0-1],
                line: _$[$0-1],
                loc: _$[$0-1],
                outer_loc: this._$,
                expected: [],
                recoverable: false
            });
            assert(rv === null);
            this.$ = NaN;
         
break;
case 78 : 
/*! Production::     remote_address : string remote_address_marker */
 
            // classic Excel mode: the 'remote' bit is stored in a string
            this.$ = $$[$0-1];
         
break;
case 79 : 
/*! Production::     remote_address : '(' URI ')' optional_remote_address_marker */
 case 80 : 
/*! Production::     remote_address : '(' PATH ')' optional_remote_address_marker */
 
            this.$ = $$[$0-2];
         
break;
case 81 : 
/*! Production::     remote_address : URI optional_remote_address_marker */
 
            // we accept an OPTIONAL 'remote address marker' as '/' (which is part of the uri path) at the end is good enough as a separator too
            this.$ = $$[$0-1];
         
break;
case 82 : 
/*! Production::     remote_address : PATH optional_remote_address_marker */
 
            // we accept an OPTIONAL 'remote address marker' as '/' (which is part of the path) at the end is good enough as a separator too
            this.$ = $$[$0-1];
         
break;
case 87 : 
/*! Production::     any_range_reference : any_range_reference[first] ARRAY_CONCATENATION_OPERATOR any_range_reference[last] */
 
            /* a fragmented range, using alternative notation, i.e. this is equivalent to `{ any_range_reference , any_range_reference }` */
            //console.log("any_range_reference rule 1 :", this._$);
            range = parser.mergeRanges($$[$0-2], $$[$0]);
            parser.updateRangeLocationInfo(range, this._$, +1);
            this.$ = range;
         
break;
case 88 : 
/*! Production::     any_range_reference : any_range_reference[left] ARRAY_CONCATENATION_OPERATOR error */
 
            rv = yy.parser.parseError("Expected a cell or range reference to complete the range.", {
                text: $$[$0],
                token: $$[$0],
                line: _$[$0],
                loc: _$[$0],
                outer_loc: this._$,
                expected: [],
                recoverable: false
            });
            assert(rv === null);
            //console.log("any_range_reference rule 2 : error: ", this._$);
            this.$ = $$[$0-2];
         
break;
case 90 : 
/*! Production::     curlybraced_range_reference : '{'[open] ambiguous_any_range_reference '}'[close] */
 
            /*
             * A single range reference hiding in fragmented range notation or a fragmented range references with multiple curly braces surrounding it.
             *
             * We call the inner rule `**ambiguous_**any_range_reference` as it allows a cell range to be constructed
             * using ',' comma separated cell references, which as a notation is *ambiguous* when used in a function parameter list:
             * neither man nor machine will be able to identify which bits constitute a bundled range of cells and which items
             * are separate function arguments then if we do not use a bit of 'assistive' notation: the '{' '}' curly braces
             * which 'wrap' such an *ambiguous* range notation, e.g. `SUMPRODUCT({A1,A2,B1,B2},{C1,C2})`
             */
            range = $$[$0-1];
            parser.updateRangeLocationInfo(range, this._$, +2);
            this.$ = range;
         
break;
case 91 : 
/*! Production::     ambiguous_any_range_reference : ambiguous_any_range_reference[first] ',' ambiguous_any_range_reference[last] */
 
            /* a fragmented range: */
            //console.log("ambiguous_any_range_reference rule 1 :", this._$);
            range = parser.mergeRanges($$[$0-2], $$[$0]);
            parser.updateRangeLocationInfo(range, this._$, +1);
            this.$ = range;
         
break;
case 92 : 
/*! Production::     ambiguous_any_range_reference : any_range_reference */
 
            /* a fragmented range, a cell reference or a regular range reference */
            this.$ = $$[$0];
         
break;
case 93 : 
/*! Production::     ambiguous_any_range_reference : cell_reference */
 
            /* a single cell reference, possibly acting as a range-of-one, depending on where this is used: */
            //console.log("ambiguous_any_range_reference rule 3 : cell: ", this._$);
            range = parser.createRangeFromCell($$[$0]);
            parser.updateRangeLocationInfo(range, this._$, +1);
            this.$ = range;
         
break;
case 94 : 
/*! Production::     ambiguous_any_range_reference : error */
 
            rv = yy.parser.parseError("Expected a (possibly fragmented) range reference.", {
                text: $$[$0],
                token: $$[$0],
                line: _$[$0],
                loc: _$[$0],
                outer_loc: this._$,
                expected: [],
                recoverable: false
            });
            assert(rv === null);
            //console.log("ambiguous_any_range_reference rule 4 : error: ", this._$);
            range = {
                rangeRef: null,
                locInfo: null,
                consumeCount: 0
            };
            parser.updateRangeLocationInfo(range, this._$, 0);
            this.$ = range;
         
break;
case 95 : 
/*! Production::     single_range_reference_fragment : range_reference */
 
            /* a regular range reference: */
            //console.log("range_reference rule 1 : range: ", this._$);
            range = parser.createRangeFromRange($$[$0]);
            parser.updateRangeLocationInfo(range, this._$, +1);
            this.$ = range;
         
break;
case 96 : 
/*! Production::     single_range_reference_fragment : curlybraced_range_reference */
 
            /* a nested range reference which will be merged/flattened with any other cells / ranges in the outer range reference: */
            this.$ = $$[$0];
         
break;
case 97 : 
/*! Production::     range_reference : RANGEREF */
 
            /*
             * > ### Note on cell reference order in a range
             * >
             * > we don't mind if 'first' is below or to the right of 'last'.
             * > The area is calculated in the action function where the range is used
             * > and there the row / col min and max values will be determined, so
             * > that we can use a simple and effective storage method here.
             * >
             * > Besides, the user might have a good reason to specify the range
             * > that way, so we better keep the first->last order as specified by
             * > the user to insure we can deliver expected behaviour (and not loose
             * > context information in the parse).
             */
            this.$ = $$[$0];
         
break;
case 98 : 
/*! Production::     one_argument : math_expression */
 
            this.$ = [$$[$0]];
         
break;
case 99 : 
/*! Production::     one_argument : any_range_reference */
 
            // this still is a single function argument and should be identifiable as such:
            // hence the range specified as argument is stored into a single outer array entry here.
            //
            // Example to see the 'trouble': =MATCH(7,A1:A6,0): to properly feed MATCH() it should
            // receive 3 arguments: [1, [...], 0], where [...] is an ARRAY value listing the values
            // obtained from the range A1:A6, e.g. [3,4,5,6,7,8]
            //
            // WARNING: the current parser (the non-AST one!) always converts cell (and range) references
            // to values extremely quickly; this implies that functions such as ADDRESS() or INDEX() are
            // not supported as those require access to the actual cell references themselves.
            //
            // (Aside: of course we can be nasty and hack a cellref on top of a value as a JavaScript object attribute
            // but I'd rather not go there and do it properly with AST objects instead using the new parser...)
            //
            // Now for the slightly less positive news: =SUM(A1:A6) vs. =SUM(A1,A2,A3,A4,A5,A6) vs. =SUM(A1:A4,A5,A6):
            // all MUST deliver the same value due to the way SUM is meant to work, but these three will 'invoke'
            // the SUM() operator very differently: here are their arglist arrays: (assume A1=1, A2=2, ...)
            //
            //   =SUM(A1:A6)             : A1:A6             -> one_array_entry                           -> arglist = [[1,2,3,4,5,6]]
            //   =SUM(A1,A2,A3,A4,A5,A6) : A1,A2,A3,A4,A5,A6 -> one_element, one_element, ... (6x)        -> arglist = [1,2,3,4,5,6]
            //   =SUM(A1:A4,A5,A6)       : A1:A4,A5,A6       -> one_array_entry, one_element, one_element -> arglist = [[1,2,3,4],5,6]
            //
            // Now for the REAL trouble:
            //   =MATCH(7,A1:A6,0) (or any other Excel function that expects at least one other function parameter next to an array)
            //   -> do some projection or row insert/delete op in the grid: Visyond will 'service' you by rewriting the array TOKEN
            //      into an ARRAY of tokens. Great idea but you just lost everything as now the parameter list is ambiguous and cannot
            //      be resolved any more for such functions:
            //   -> drag/drop / insert row / other action that rewrites arrays in tokenarray
            //   -> =MATCH(7,A1,A2,A3,A4,A5,A6,0)
            //   -> OUCH! Nobody can tell us later on whether this is a user mistake feeding the function too many arguments or
            //      this being an expanded array in there. (Yes, there do exist Excel functions (Matrix ops!) which expect 2(!) or more
            //      array references as function arguments: when both are expanded (and they will), there is no telling where one
            //      ends and the next starts.)
            //   => Support for these functions (including SUMA(), SUMIF(), ...) is only possible when 'token stream rewriting' is heavily
            //      augmented and the parser is taught some additional notation as well (this is partly available in the AST grammar as
            //      it supports a superset of the Excel formula notation), e.g.
            //   =MATCH(7,A1:A6,0) -> tokenstream rewrite -> =MATCH(7,{A1,A2,A3,A4,A5,A6},0)
            //      or when expansion is done partially:
            //   =MATCH(7,A1:A6,0) -> tokenstream rewrite -> =MATCH(7,{A1,A2:A5,A6},0)
            //      With this 'extended' notation re-using the '{}' curly braces (also used by Excel for array formulas but we do not support those (yet))
            //      anything inside the curly braces is treated as part of a single array element:
            //   {A1,A2,A3,A4,A5,A6} is equivalent to {A1,A2:A5,A6} is equivalent to {A1:A6} is equivalent to A1:A6
            //
            // Anyhow, the above is NOT supported by this parser; only the AST parser provides for these constructs. The above explanation
            // is included here so y'all know what goes wrong and why...
            range = $$[$0];

            //patch_tokenstream("RANGEREF", range, 1 /* range.consumeCount */, _$[$0]);

            /* This rule 'outputs' an array of values, each representing one cell value in the specified array */
            this.$ = [parser.getArrayValueOfCellRangeSpec(range.rangeRef)];
         
break;
case 100 : 
/*! Production::     one_argument :  */
 
            /*
             * No argument specified at all: some functions accept this kind of behaviour.
             * It also serves as a way to specify a function with zero arguments, e.g.
             * `RANDOM()`
             */

            // empty argument must take up a slot in the args array, hence we push NULL:
            this.$ = [null];
         
break;
case 102 : 
/*! Production::     arglist : arglist ','[comma] one_argument */
 
            this.$ = $$[$0-2].concat($$[$0]);
         
break;
case 103 : 
/*! Production::     percentage_alternative_for_data_entry : MODULO_OPERATOR value */
 
            patch_tokenstream("PERCENTAGE_OPERATOR", null, 1, _$[$0-1]);
            this.$ = $$[$0] / 100;
         
break;
case 104 : 
/*! Production::     percentage_alternative_for_data_entry : PROMILAGE_OPERATOR value */
 
            this.$ = $$[$0] / 1000;
         
break;
case 105 : 
/*! Production::     percentage : value PERCENTAGE_OPERATOR */
 
            this.$ = $$[$0-1] / 100;
         
break;
case 106 : 
/*! Production::     percentage : value PROMILAGE_OPERATOR */
 
            this.$ = $$[$0-1] / 1000;
         
break;
case 107 : 
/*! Production::     radians : value DEGREES_OPERATOR */
 
            // convert value to radians!
            this.$ = $$[$0-1] * 2 * Math.PI / 360;
         
break;
case 108 : 
/*! Production::     price : CURRENCY value */
 
            /* The `CURRENCY` AST opcode has the notation attributes we need: */
            this.$ = $$[$0];
         
break;
case 110 : 
/*! Production::     value : '-'[minus] number */
 case 116 : 
/*! Production::     constant : '-'[minus] CONSTANT */
 
            this.$ = -($$[$0]);
         
break;
case 111 : 
/*! Production::     value : '+'[plus] number */
 case 117 : 
/*! Production::     constant : '+'[plus] CONSTANT */
 
            this.$ = +($$[$0]);
         
break;
case 113 : 
/*! Production::     number : NUMBER */
 
            assert(Number($$[$0]) === yytext);
            this.$ = $$[$0];
         
break;
case 114 : 
/*! Production::     number : INTEGER_NUMBER */
 
            assert(Number($$[$0]) === yytext);
            //console.log("Integer Number: value = ", $$[$0], _$[$0], yytext);
            this.$ = $$[$0];
         
break;
}
},
table: [
  {
    2: [
      1,
      17
    ],
    3: 1,
    4: 2,
    6: [
      1,
      3
    ],
    8: 4,
    9: [
      1,
      5
    ],
    11: [
      1,
      6
    ],
    13: [
      1,
      7
    ],
    14: 8,
    15: 9,
    16: 10,
    17: 11,
    18: 12,
    19: 13,
    20: 14,
    21: 15,
    22: [
      1,
      16
    ],
    39: [
      1,
      19
    ],
    40: [
      1,
      18
    ],
    44: [
      1,
      26
    ],
    85: [
      1,
      27
    ],
    88: [
      1,
      22
    ],
    89: 20,
    90: [
      1,
      28
    ],
    91: [
      1,
      29
    ],
    92: [
      1,
      21
    ],
    93: [
      1,
      23
    ],
    94: [
      1,
      24
    ],
    95: [
      1,
      25
    ]
  },
  {
    1: [
      3
    ]
  },
  {
    2: [
      1,
      31
    ],
    5: [
      1,
      30
    ]
  },
  {
    2: [
      1,
      50
    ],
    7: 32,
    10: 63,
    14: 43,
    15: 44,
    16: 45,
    17: 46,
    18: 47,
    19: 48,
    20: 49,
    23: 33,
    26: 34,
    29: 35,
    32: 36,
    39: [
      1,
      52
    ],
    40: [
      1,
      51
    ],
    41: 37,
    45: 38,
    46: 39,
    48: [
      1,
      40
    ],
    52: 41,
    53: 42,
    55: [
      1,
      53
    ],
    56: 54,
    59: [
      1,
      61
    ],
    60: [
      1,
      62
    ],
    68: 66,
    69: 67,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      68
    ],
    88: [
      1,
      57
    ],
    89: 55,
    90: [
      1,
      64
    ],
    91: [
      1,
      65
    ],
    92: [
      1,
      56
    ],
    93: [
      1,
      58
    ],
    94: [
      1,
      59
    ],
    95: [
      1,
      60
    ]
  },
  {
    2: [
      2,
      4
    ],
    5: [
      2,
      4
    ]
  },
  {
    2: [
      1,
      72
    ],
    10: 71,
    20: 76,
    60: [
      1,
      77
    ],
    68: 73,
    69: 74,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      75
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      80
    ],
    12: 79,
    76: 81,
    77: 83,
    78: [
      1,
      85
    ],
    82: 82,
    83: [
      1,
      84
    ]
  },
  {
    2: [
      1,
      17
    ],
    8: 86,
    14: 8,
    15: 9,
    16: 10,
    17: 11,
    18: 12,
    19: 13,
    20: 14,
    21: 15,
    22: [
      1,
      16
    ],
    39: [
      1,
      19
    ],
    40: [
      1,
      18
    ],
    44: [
      1,
      26
    ],
    85: [
      1,
      27
    ],
    88: [
      1,
      22
    ],
    89: 20,
    90: [
      1,
      28
    ],
    91: [
      1,
      29
    ],
    92: [
      1,
      21
    ],
    93: [
      1,
      23
    ],
    94: [
      1,
      24
    ],
    95: [
      1,
      25
    ]
  },
  __expand__($V0, [
      2,
      10
    ], {85:[
      1,
      88
    ],86:[
      1,
      87
    ],87:[
      1,
      90
    ],88:[
      1,
      89
    ]
  }),
  {
    2: [
      2,
      11
    ],
    5: [
      2,
      11
    ]
  },
  {
    2: [
      2,
      12
    ],
    5: [
      2,
      12
    ]
  },
  {
    2: [
      2,
      13
    ],
    5: [
      2,
      13
    ]
  },
  {
    2: [
      2,
      14
    ],
    5: [
      2,
      14
    ]
  },
  {
    2: [
      2,
      15
    ],
    5: [
      2,
      15
    ]
  },
  {
    2: [
      2,
      16
    ],
    5: [
      2,
      16
    ]
  },
  {
    2: [
      2,
      17
    ],
    5: [
      2,
      17
    ]
  },
  {
    2: [
      2,
      18
    ],
    5: [
      2,
      18
    ]
  },
  {
    2: [
      2,
      19
    ],
    5: [
      2,
      19
    ]
  },
  {
    89: 91,
    90: [
      1,
      28
    ],
    91: [
      1,
      29
    ],
    92: [
      1,
      92
    ]
  },
  {
    89: 93,
    90: [
      1,
      28
    ],
    91: [
      1,
      29
    ],
    92: [
      1,
      94
    ]
  },
  __expand__($V1, [
      2,
      112
    ], {88:[
      2,
      112
    ]
  }),
  {
    2: [
      2,
      115
    ],
    5: [
      2,
      115
    ]
  },
  {
    14: 95,
    39: [
      1,
      97
    ],
    40: [
      1,
      96
    ],
    89: 98,
    90: [
      1,
      99
    ],
    91: [
      1,
      100
    ]
  },
  {
    2: [
      2,
      118
    ],
    5: [
      2,
      118
    ]
  },
  {
    2: [
      2,
      119
    ],
    5: [
      2,
      119
    ]
  },
  {
    2: [
      2,
      120
    ],
    5: [
      2,
      120
    ]
  },
  {
    14: 101,
    39: [
      1,
      97
    ],
    40: [
      1,
      96
    ],
    89: 98,
    90: [
      1,
      99
    ],
    91: [
      1,
      100
    ]
  },
  {
    14: 102,
    39: [
      1,
      97
    ],
    40: [
      1,
      96
    ],
    89: 98,
    90: [
      1,
      99
    ],
    91: [
      1,
      100
    ]
  },
  __expand__($V1, [
      2,
      113
    ], {88:[
      2,
      113
    ]
  }),
  __expand__($V1, [
      2,
      114
    ], {88:[
      2,
      114
    ]
  }),
  {
    1: [
      2,
      1
    ]
  },
  {
    1: [
      2,
      2
    ]
  },
  {
    2: [
      2,
      3
    ],
    5: [
      2,
      3
    ]
  },
  __expand__($V0, [
      2,
      20
    ], {24:[
      1,
      103
    ],25:[
      1,
      104
    ]
  }),
  __expand__([2,5,24,25], [
      2,
      23
    ], {6:[
      1,
      108
    ],27:[
      1,
      105
    ],28:[
      1,
      106
    ],31:[
      1,
      107
    ],37:[
      1,
      109
    ]
  }),
  __expand__($V2, [
      2,
      36
    ], {30:[
      1,
      110
    ],39:[
      1,
      111
    ],40:[
      1,
      112
    ]
  }),
  __expand__($V3, [
      2,
      34
    ], {33:[
      1,
      113
    ],34:[
      1,
      114
    ],35:[
      1,
      115
    ],36:[
      1,
      116
    ],38:[
      1,
      117
    ]
  }),
  __expand__([2,5,6,24,25,27,28,30,31,33,34,35,36,37,38,39,40], [
      2,
      39
    ], {42:[
      1,
      118
    ],43:[
      1,
      119
    ],44:[
      1,
      120
    ]
  }),
  __expand__($V4, [
      2,
      43
    ], {49:[
      1,
      121
    ],50:[
      1,
      122
    ],51:[
      1,
      123
    ]
  }),
  __expand__($V5, [
      2,
      49
    ], {47:[
      1,
      124
    ],51:[
      2,
      49
    ]
  }),
  {
    2: [
      1,
      50
    ],
    10: 63,
    14: 43,
    15: 44,
    16: 45,
    17: 46,
    18: 47,
    19: 48,
    20: 49,
    39: [
      1,
      52
    ],
    40: [
      1,
      51
    ],
    45: 125,
    46: 39,
    48: [
      1,
      40
    ],
    52: 41,
    53: 42,
    55: [
      1,
      53
    ],
    56: 54,
    59: [
      1,
      61
    ],
    60: [
      1,
      62
    ],
    68: 66,
    69: 67,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      68
    ],
    88: [
      1,
      57
    ],
    89: 55,
    90: [
      1,
      64
    ],
    91: [
      1,
      65
    ],
    92: [
      1,
      56
    ],
    93: [
      1,
      58
    ],
    94: [
      1,
      59
    ],
    95: [
      1,
      60
    ]
  },
  __expand__($V6, [
      2,
      50
    ], {51:[
      2,
      50
    ]
  }),
  __expand__($V6, [
      2,
      51
    ], {51:[
      2,
      51
    ]
  }),
  __expand__($V7, [
      2,
      52
    ], {85:[
      1,
      127
    ],86:[
      1,
      126
    ],87:[
      1,
      129
    ],88:[
      1,
      128
    ]
  }),
  __expand__($V6, [
      2,
      53
    ], {51:[
      2,
      53
    ]
  }),
  __expand__($V6, [
      2,
      54
    ], {51:[
      2,
      54
    ]
  }),
  __expand__($V6, [
      2,
      55
    ], {51:[
      2,
      55
    ]
  }),
  __expand__($V6, [
      2,
      56
    ], {51:[
      2,
      56
    ]
  }),
  __expand__($V6, [
      2,
      57
    ], {51:[
      2,
      57
    ]
  }),
  __expand__($V7, [
      2,
      58
    ], {55:[
      1,
      131
    ],70:130
  }),
  __expand__($V6, [
      2,
      59
    ], {51:[
      2,
      59
    ]
  }),
  {
    2: [
      1,
      136
    ],
    10: 63,
    20: 76,
    53: 135,
    54: 132,
    56: 54,
    59: [
      1,
      61
    ],
    60: [
      1,
      62
    ],
    68: 66,
    69: 67,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      68
    ],
    89: 133,
    90: [
      1,
      64
    ],
    91: [
      1,
      65
    ],
    92: [
      1,
      134
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      136
    ],
    10: 63,
    20: 76,
    53: 135,
    54: 137,
    56: 54,
    59: [
      1,
      61
    ],
    60: [
      1,
      62
    ],
    68: 66,
    69: 67,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      68
    ],
    89: 138,
    90: [
      1,
      64
    ],
    91: [
      1,
      65
    ],
    92: [
      1,
      139
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      136
    ],
    10: 63,
    20: 76,
    53: 135,
    54: 140,
    56: 54,
    59: [
      1,
      61
    ],
    60: [
      1,
      62
    ],
    68: 66,
    69: 67,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      68
    ],
    95: [
      1,
      78
    ]
  },
  __expand__($V7, [
      2,
      65
    ], {57:[
      1,
      141
    ]
  }),
  __expand__($V8, [
      2,
      112
    ], {88:[
      2,
      112
    ]
  }),
  __expand__($V6, [
      2,
      115
    ], {51:[
      2,
      115
    ]
  }),
  {
    14: 142,
    39: [
      1,
      144
    ],
    40: [
      1,
      143
    ],
    89: 145,
    90: [
      1,
      146
    ],
    91: [
      1,
      147
    ]
  },
  __expand__($V6, [
      2,
      118
    ], {51:[
      2,
      118
    ]
  }),
  __expand__($V6, [
      2,
      119
    ], {51:[
      2,
      119
    ]
  }),
  __expand__($V7, [
      2,
      120
    ], {55:[
      2,
      120
    ]
  }),
  {
    60: [
      1,
      148
    ]
  },
  {
    2: [
      1,
      169
    ],
    7: 149,
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    23: 152,
    26: 153,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      150
    ],
    73: [
      1,
      151
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  __expand__($V7, [
      2,
      69
    ], {57:[
      2,
      69
    ]
  }),
  __expand__($V8, [
      2,
      113
    ], {88:[
      2,
      113
    ]
  }),
  __expand__($V8, [
      2,
      114
    ], {88:[
      2,
      114
    ]
  }),
  __expand__($V7, [
      2,
      76
    ], {57:[
      2,
      76
    ]
  }),
  {
    68: 188,
    74: [
      1,
      68
    ]
  },
  __expand__($V7, [
      2,
      86
    ], {57:[
      2,
      86
    ]
  }),
  {
    55: [
      1,
      131
    ],
    70: 190,
    72: 189,
    74: [
      2,
      83
    ]
  },
  {
    55: [
      1,
      131
    ],
    70: 190,
    72: 191,
    74: [
      2,
      83
    ]
  },
  {
    2: [
      2,
      5
    ],
    5: [
      2,
      5
    ]
  },
  {
    2: [
      2,
      6
    ],
    5: [
      2,
      6
    ]
  },
  {
    2: [
      2,
      76
    ],
    5: [
      2,
      76
    ]
  },
  {
    68: 192,
    74: [
      1,
      75
    ]
  },
  {
    2: [
      2,
      86
    ],
    5: [
      2,
      86
    ]
  },
  {
    55: [
      1,
      131
    ],
    70: 130
  },
  {
    71: [
      1,
      193
    ],
    73: [
      1,
      194
    ]
  },
  {
    55: [
      2,
      120
    ]
  },
  __expand__($V0, [
      2,
      7
    ], {75:[
      1,
      195
    ]
  }),
  {
    2: [
      2,
      8
    ],
    5: [
      2,
      8
    ]
  },
  __expand__($V0, [
      2,
      89
    ], {75:[
      2,
      89
    ]
  }),
  __expand__($V0, [
      2,
      95
    ], {75:[
      2,
      95
    ]
  }),
  __expand__($V0, [
      2,
      96
    ], {75:[
      2,
      96
    ]
  }),
  __expand__($V0, [
      2,
      97
    ], {75:[
      2,
      97
    ]
  }),
  {
    2: [
      1,
      199
    ],
    10: 198,
    12: 197,
    20: 76,
    60: [
      1,
      77
    ],
    68: 201,
    69: 202,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      205
    ],
    76: 200,
    77: 204,
    78: [
      1,
      207
    ],
    79: 196,
    82: 203,
    83: [
      1,
      206
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      2,
      9
    ],
    5: [
      2,
      9
    ]
  },
  {
    2: [
      2,
      105
    ],
    5: [
      2,
      105
    ]
  },
  {
    2: [
      2,
      106
    ],
    5: [
      2,
      106
    ]
  },
  {
    2: [
      2,
      109
    ],
    5: [
      2,
      109
    ]
  },
  {
    2: [
      2,
      107
    ],
    5: [
      2,
      107
    ]
  },
  __expand__($V1, [
      2,
      110
    ], {88:[
      2,
      110
    ]
  }),
  {
    2: [
      2,
      116
    ],
    5: [
      2,
      116
    ]
  },
  __expand__($V1, [
      2,
      111
    ], {88:[
      2,
      111
    ]
  }),
  {
    2: [
      2,
      117
    ],
    5: [
      2,
      117
    ]
  },
  {
    2: [
      2,
      108
    ],
    5: [
      2,
      108
    ]
  },
  {
    89: 208,
    90: [
      1,
      99
    ],
    91: [
      1,
      100
    ]
  },
  {
    89: 209,
    90: [
      1,
      99
    ],
    91: [
      1,
      100
    ]
  },
  {
    2: [
      2,
      112
    ],
    5: [
      2,
      112
    ]
  },
  {
    2: [
      2,
      113
    ],
    5: [
      2,
      113
    ]
  },
  {
    2: [
      2,
      114
    ],
    5: [
      2,
      114
    ]
  },
  {
    2: [
      2,
      103
    ],
    5: [
      2,
      103
    ]
  },
  {
    2: [
      2,
      104
    ],
    5: [
      2,
      104
    ]
  },
  {
    2: [
      1,
      50
    ],
    10: 63,
    14: 43,
    15: 44,
    16: 45,
    17: 46,
    18: 47,
    19: 48,
    20: 49,
    23: 210,
    26: 34,
    29: 35,
    32: 36,
    39: [
      1,
      52
    ],
    40: [
      1,
      51
    ],
    41: 37,
    45: 38,
    46: 39,
    48: [
      1,
      40
    ],
    52: 41,
    53: 42,
    55: [
      1,
      53
    ],
    56: 54,
    59: [
      1,
      61
    ],
    60: [
      1,
      62
    ],
    68: 66,
    69: 67,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      68
    ],
    88: [
      1,
      57
    ],
    89: 55,
    90: [
      1,
      64
    ],
    91: [
      1,
      65
    ],
    92: [
      1,
      56
    ],
    93: [
      1,
      58
    ],
    94: [
      1,
      59
    ],
    95: [
      1,
      60
    ]
  },
  {
    2: [
      1,
      50
    ],
    10: 63,
    14: 43,
    15: 44,
    16: 45,
    17: 46,
    18: 47,
    19: 48,
    20: 49,
    23: 211,
    26: 34,
    29: 35,
    32: 36,
    39: [
      1,
      52
    ],
    40: [
      1,
      51
    ],
    41: 37,
    45: 38,
    46: 39,
    48: [
      1,
      40
    ],
    52: 41,
    53: 42,
    55: [
      1,
      53
    ],
    56: 54,
    59: [
      1,
      61
    ],
    60: [
      1,
      62
    ],
    68: 66,
    69: 67,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      68
    ],
    88: [
      1,
      57
    ],
    89: 55,
    90: [
      1,
      64
    ],
    91: [
      1,
      65
    ],
    92: [
      1,
      56
    ],
    93: [
      1,
      58
    ],
    94: [
      1,
      59
    ],
    95: [
      1,
      60
    ]
  },
  {
    2: [
      1,
      50
    ],
    10: 63,
    14: 43,
    15: 44,
    16: 45,
    17: 46,
    18: 47,
    19: 48,
    20: 49,
    26: 212,
    29: 35,
    32: 36,
    39: [
      1,
      52
    ],
    40: [
      1,
      51
    ],
    41: 37,
    45: 38,
    46: 39,
    48: [
      1,
      40
    ],
    52: 41,
    53: 42,
    55: [
      1,
      53
    ],
    56: 54,
    59: [
      1,
      61
    ],
    60: [
      1,
      62
    ],
    68: 66,
    69: 67,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      68
    ],
    88: [
      1,
      57
    ],
    89: 55,
    90: [
      1,
      64
    ],
    91: [
      1,
      65
    ],
    92: [
      1,
      56
    ],
    93: [
      1,
      58
    ],
    94: [
      1,
      59
    ],
    95: [
      1,
      60
    ]
  },
  {
    2: [
      1,
      50
    ],
    10: 63,
    14: 43,
    15: 44,
    16: 45,
    17: 46,
    18: 47,
    19: 48,
    20: 49,
    26: 213,
    29: 35,
    32: 36,
    39: [
      1,
      52
    ],
    40: [
      1,
      51
    ],
    41: 37,
    45: 38,
    46: 39,
    48: [
      1,
      40
    ],
    52: 41,
    53: 42,
    55: [
      1,
      53
    ],
    56: 54,
    59: [
      1,
      61
    ],
    60: [
      1,
      62
    ],
    68: 66,
    69: 67,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      68
    ],
    88: [
      1,
      57
    ],
    89: 55,
    90: [
      1,
      64
    ],
    91: [
      1,
      65
    ],
    92: [
      1,
      56
    ],
    93: [
      1,
      58
    ],
    94: [
      1,
      59
    ],
    95: [
      1,
      60
    ]
  },
  {
    2: [
      1,
      50
    ],
    10: 63,
    14: 43,
    15: 44,
    16: 45,
    17: 46,
    18: 47,
    19: 48,
    20: 49,
    26: 214,
    29: 35,
    32: 36,
    39: [
      1,
      52
    ],
    40: [
      1,
      51
    ],
    41: 37,
    45: 38,
    46: 39,
    48: [
      1,
      40
    ],
    52: 41,
    53: 42,
    55: [
      1,
      53
    ],
    56: 54,
    59: [
      1,
      61
    ],
    60: [
      1,
      62
    ],
    68: 66,
    69: 67,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      68
    ],
    88: [
      1,
      57
    ],
    89: 55,
    90: [
      1,
      64
    ],
    91: [
      1,
      65
    ],
    92: [
      1,
      56
    ],
    93: [
      1,
      58
    ],
    94: [
      1,
      59
    ],
    95: [
      1,
      60
    ]
  },
  {
    2: [
      1,
      50
    ],
    10: 63,
    14: 43,
    15: 44,
    16: 45,
    17: 46,
    18: 47,
    19: 48,
    20: 49,
    26: 215,
    29: 35,
    32: 36,
    39: [
      1,
      52
    ],
    40: [
      1,
      51
    ],
    41: 37,
    45: 38,
    46: 39,
    48: [
      1,
      40
    ],
    52: 41,
    53: 42,
    55: [
      1,
      53
    ],
    56: 54,
    59: [
      1,
      61
    ],
    60: [
      1,
      62
    ],
    68: 66,
    69: 67,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      68
    ],
    88: [
      1,
      57
    ],
    89: 55,
    90: [
      1,
      64
    ],
    91: [
      1,
      65
    ],
    92: [
      1,
      56
    ],
    93: [
      1,
      58
    ],
    94: [
      1,
      59
    ],
    95: [
      1,
      60
    ]
  },
  {
    2: [
      1,
      50
    ],
    10: 63,
    14: 43,
    15: 44,
    16: 45,
    17: 46,
    18: 47,
    19: 48,
    20: 49,
    26: 216,
    29: 35,
    32: 36,
    39: [
      1,
      52
    ],
    40: [
      1,
      51
    ],
    41: 37,
    45: 38,
    46: 39,
    48: [
      1,
      40
    ],
    52: 41,
    53: 42,
    55: [
      1,
      53
    ],
    56: 54,
    59: [
      1,
      61
    ],
    60: [
      1,
      62
    ],
    68: 66,
    69: 67,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      68
    ],
    88: [
      1,
      57
    ],
    89: 55,
    90: [
      1,
      64
    ],
    91: [
      1,
      65
    ],
    92: [
      1,
      56
    ],
    93: [
      1,
      58
    ],
    94: [
      1,
      59
    ],
    95: [
      1,
      60
    ]
  },
  {
    2: [
      1,
      231
    ],
    10: 244,
    14: 224,
    15: 225,
    16: 226,
    17: 227,
    18: 228,
    19: 229,
    20: 230,
    29: 217,
    39: [
      1,
      233
    ],
    40: [
      1,
      232
    ],
    41: 218,
    45: 219,
    46: 220,
    48: [
      1,
      221
    ],
    52: 222,
    53: 223,
    55: [
      1,
      234
    ],
    56: 235,
    59: [
      1,
      242
    ],
    60: [
      1,
      243
    ],
    68: 247,
    69: 248,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      249
    ],
    88: [
      1,
      238
    ],
    89: 236,
    90: [
      1,
      245
    ],
    91: [
      1,
      246
    ],
    92: [
      1,
      237
    ],
    93: [
      1,
      239
    ],
    94: [
      1,
      240
    ],
    95: [
      1,
      241
    ]
  },
  {
    2: [
      1,
      50
    ],
    10: 63,
    14: 43,
    15: 44,
    16: 45,
    17: 46,
    18: 47,
    19: 48,
    20: 49,
    29: 250,
    39: [
      1,
      52
    ],
    40: [
      1,
      51
    ],
    41: 37,
    45: 38,
    46: 39,
    48: [
      1,
      40
    ],
    52: 41,
    53: 42,
    55: [
      1,
      53
    ],
    56: 54,
    59: [
      1,
      61
    ],
    60: [
      1,
      62
    ],
    68: 66,
    69: 67,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      68
    ],
    88: [
      1,
      57
    ],
    89: 55,
    90: [
      1,
      64
    ],
    91: [
      1,
      65
    ],
    92: [
      1,
      56
    ],
    93: [
      1,
      58
    ],
    94: [
      1,
      59
    ],
    95: [
      1,
      60
    ]
  },
  {
    2: [
      1,
      50
    ],
    10: 63,
    14: 43,
    15: 44,
    16: 45,
    17: 46,
    18: 47,
    19: 48,
    20: 49,
    29: 251,
    39: [
      1,
      52
    ],
    40: [
      1,
      51
    ],
    41: 37,
    45: 38,
    46: 39,
    48: [
      1,
      40
    ],
    52: 41,
    53: 42,
    55: [
      1,
      53
    ],
    56: 54,
    59: [
      1,
      61
    ],
    60: [
      1,
      62
    ],
    68: 66,
    69: 67,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      68
    ],
    88: [
      1,
      57
    ],
    89: 55,
    90: [
      1,
      64
    ],
    91: [
      1,
      65
    ],
    92: [
      1,
      56
    ],
    93: [
      1,
      58
    ],
    94: [
      1,
      59
    ],
    95: [
      1,
      60
    ]
  },
  {
    2: [
      1,
      267
    ],
    10: 280,
    14: 260,
    15: 261,
    16: 262,
    17: 263,
    18: 264,
    19: 265,
    20: 266,
    29: 253,
    32: 252,
    39: [
      1,
      269
    ],
    40: [
      1,
      268
    ],
    41: 254,
    45: 255,
    46: 256,
    48: [
      1,
      257
    ],
    52: 258,
    53: 259,
    55: [
      1,
      270
    ],
    56: 271,
    59: [
      1,
      278
    ],
    60: [
      1,
      279
    ],
    68: 283,
    69: 284,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      285
    ],
    88: [
      1,
      274
    ],
    89: 272,
    90: [
      1,
      281
    ],
    91: [
      1,
      282
    ],
    92: [
      1,
      273
    ],
    93: [
      1,
      275
    ],
    94: [
      1,
      276
    ],
    95: [
      1,
      277
    ]
  },
  {
    2: [
      1,
      267
    ],
    10: 280,
    14: 260,
    15: 261,
    16: 262,
    17: 263,
    18: 264,
    19: 265,
    20: 266,
    29: 253,
    32: 286,
    39: [
      1,
      269
    ],
    40: [
      1,
      268
    ],
    41: 254,
    45: 255,
    46: 256,
    48: [
      1,
      257
    ],
    52: 258,
    53: 259,
    55: [
      1,
      270
    ],
    56: 271,
    59: [
      1,
      278
    ],
    60: [
      1,
      279
    ],
    68: 283,
    69: 284,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      285
    ],
    88: [
      1,
      274
    ],
    89: 272,
    90: [
      1,
      281
    ],
    91: [
      1,
      282
    ],
    92: [
      1,
      273
    ],
    93: [
      1,
      275
    ],
    94: [
      1,
      276
    ],
    95: [
      1,
      277
    ]
  },
  {
    2: [
      1,
      267
    ],
    10: 280,
    14: 260,
    15: 261,
    16: 262,
    17: 263,
    18: 264,
    19: 265,
    20: 266,
    29: 253,
    32: 287,
    39: [
      1,
      269
    ],
    40: [
      1,
      268
    ],
    41: 254,
    45: 255,
    46: 256,
    48: [
      1,
      257
    ],
    52: 258,
    53: 259,
    55: [
      1,
      270
    ],
    56: 271,
    59: [
      1,
      278
    ],
    60: [
      1,
      279
    ],
    68: 283,
    69: 284,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      285
    ],
    88: [
      1,
      274
    ],
    89: 272,
    90: [
      1,
      281
    ],
    91: [
      1,
      282
    ],
    92: [
      1,
      273
    ],
    93: [
      1,
      275
    ],
    94: [
      1,
      276
    ],
    95: [
      1,
      277
    ]
  },
  {
    2: [
      1,
      267
    ],
    10: 280,
    14: 260,
    15: 261,
    16: 262,
    17: 263,
    18: 264,
    19: 265,
    20: 266,
    29: 253,
    32: 288,
    39: [
      1,
      269
    ],
    40: [
      1,
      268
    ],
    41: 254,
    45: 255,
    46: 256,
    48: [
      1,
      257
    ],
    52: 258,
    53: 259,
    55: [
      1,
      270
    ],
    56: 271,
    59: [
      1,
      278
    ],
    60: [
      1,
      279
    ],
    68: 283,
    69: 284,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      285
    ],
    88: [
      1,
      274
    ],
    89: 272,
    90: [
      1,
      281
    ],
    91: [
      1,
      282
    ],
    92: [
      1,
      273
    ],
    93: [
      1,
      275
    ],
    94: [
      1,
      276
    ],
    95: [
      1,
      277
    ]
  },
  {
    2: [
      1,
      304
    ],
    10: 317,
    14: 297,
    15: 298,
    16: 299,
    17: 300,
    18: 301,
    19: 302,
    20: 303,
    29: 290,
    32: 289,
    39: [
      1,
      306
    ],
    40: [
      1,
      305
    ],
    41: 291,
    45: 292,
    46: 293,
    48: [
      1,
      294
    ],
    52: 295,
    53: 296,
    55: [
      1,
      307
    ],
    56: 308,
    59: [
      1,
      315
    ],
    60: [
      1,
      316
    ],
    68: 320,
    69: 321,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      322
    ],
    88: [
      1,
      311
    ],
    89: 309,
    90: [
      1,
      318
    ],
    91: [
      1,
      319
    ],
    92: [
      1,
      310
    ],
    93: [
      1,
      312
    ],
    94: [
      1,
      313
    ],
    95: [
      1,
      314
    ]
  },
  {
    2: [
      1,
      50
    ],
    10: 63,
    14: 43,
    15: 44,
    16: 45,
    17: 46,
    18: 47,
    19: 48,
    20: 49,
    39: [
      1,
      52
    ],
    40: [
      1,
      51
    ],
    41: 323,
    45: 38,
    46: 39,
    48: [
      1,
      40
    ],
    52: 41,
    53: 42,
    55: [
      1,
      53
    ],
    56: 54,
    59: [
      1,
      61
    ],
    60: [
      1,
      62
    ],
    68: 66,
    69: 67,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      68
    ],
    88: [
      1,
      57
    ],
    89: 55,
    90: [
      1,
      64
    ],
    91: [
      1,
      65
    ],
    92: [
      1,
      56
    ],
    93: [
      1,
      58
    ],
    94: [
      1,
      59
    ],
    95: [
      1,
      60
    ]
  },
  {
    2: [
      1,
      50
    ],
    10: 63,
    14: 43,
    15: 44,
    16: 45,
    17: 46,
    18: 47,
    19: 48,
    20: 49,
    39: [
      1,
      52
    ],
    40: [
      1,
      51
    ],
    41: 324,
    45: 38,
    46: 39,
    48: [
      1,
      40
    ],
    52: 41,
    53: 42,
    55: [
      1,
      53
    ],
    56: 54,
    59: [
      1,
      61
    ],
    60: [
      1,
      62
    ],
    68: 66,
    69: 67,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      68
    ],
    88: [
      1,
      57
    ],
    89: 55,
    90: [
      1,
      64
    ],
    91: [
      1,
      65
    ],
    92: [
      1,
      56
    ],
    93: [
      1,
      58
    ],
    94: [
      1,
      59
    ],
    95: [
      1,
      60
    ]
  },
  {
    2: [
      1,
      50
    ],
    10: 63,
    14: 43,
    15: 44,
    16: 45,
    17: 46,
    18: 47,
    19: 48,
    20: 49,
    39: [
      1,
      52
    ],
    40: [
      1,
      51
    ],
    41: 325,
    45: 38,
    46: 39,
    48: [
      1,
      40
    ],
    52: 41,
    53: 42,
    55: [
      1,
      53
    ],
    56: 54,
    59: [
      1,
      61
    ],
    60: [
      1,
      62
    ],
    68: 66,
    69: 67,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      68
    ],
    88: [
      1,
      57
    ],
    89: 55,
    90: [
      1,
      64
    ],
    91: [
      1,
      65
    ],
    92: [
      1,
      56
    ],
    93: [
      1,
      58
    ],
    94: [
      1,
      59
    ],
    95: [
      1,
      60
    ]
  },
  __expand__($V5, [
      2,
      46
    ], {51:[
      2,
      46
    ]
  }),
  __expand__($V5, [
      2,
      47
    ], {51:[
      2,
      47
    ]
  }),
  __expand__($V5, [
      2,
      48
    ], {51:[
      2,
      48
    ]
  }),
  {
    2: [
      1,
      50
    ],
    10: 63,
    14: 43,
    15: 44,
    16: 45,
    17: 46,
    18: 47,
    19: 48,
    20: 49,
    39: [
      1,
      52
    ],
    40: [
      1,
      51
    ],
    45: 326,
    46: 39,
    48: [
      1,
      40
    ],
    52: 41,
    53: 42,
    55: [
      1,
      53
    ],
    56: 54,
    59: [
      1,
      61
    ],
    60: [
      1,
      62
    ],
    68: 66,
    69: 67,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      68
    ],
    88: [
      1,
      57
    ],
    89: 55,
    90: [
      1,
      64
    ],
    91: [
      1,
      65
    ],
    92: [
      1,
      56
    ],
    93: [
      1,
      58
    ],
    94: [
      1,
      59
    ],
    95: [
      1,
      60
    ]
  },
  __expand__($V5, [
      2,
      45
    ], {51:[
      2,
      45
    ]
  }),
  __expand__($V6, [
      2,
      105
    ], {51:[
      2,
      105
    ]
  }),
  __expand__($V6, [
      2,
      106
    ], {51:[
      2,
      106
    ]
  }),
  __expand__($V6, [
      2,
      109
    ], {51:[
      2,
      109
    ]
  }),
  __expand__($V6, [
      2,
      107
    ], {51:[
      2,
      107
    ]
  }),
  {
    74: [
      2,
      78
    ]
  },
  {
    74: [
      2,
      85
    ]
  },
  __expand__($V6, [
      2,
      60
    ], {51:[
      2,
      60
    ]
  }),
  __expand__($V8, [
      2,
      110
    ], {88:[
      2,
      110
    ]
  }),
  __expand__($V6, [
      2,
      116
    ], {51:[
      2,
      116
    ]
  }),
  __expand__($V6, [
      2,
      63
    ], {51:[
      2,
      63
    ]
  }),
  __expand__($V6, [
      2,
      64
    ], {51:[
      2,
      64
    ]
  }),
  __expand__($V6, [
      2,
      61
    ], {51:[
      2,
      61
    ]
  }),
  __expand__($V8, [
      2,
      111
    ], {88:[
      2,
      111
    ]
  }),
  __expand__($V6, [
      2,
      117
    ], {51:[
      2,
      117
    ]
  }),
  __expand__($V6, [
      2,
      62
    ], {51:[
      2,
      62
    ]
  }),
  {
    2: [
      1,
      331
    ],
    58: 327,
    63: 328,
    64: [
      1,
      329
    ],
    65: [
      1,
      330
    ]
  },
  __expand__($V6, [
      2,
      108
    ], {51:[
      2,
      108
    ]
  }),
  {
    89: 332,
    90: [
      1,
      146
    ],
    91: [
      1,
      147
    ]
  },
  {
    89: 333,
    90: [
      1,
      146
    ],
    91: [
      1,
      147
    ]
  },
  __expand__($V6, [
      2,
      112
    ], {51:[
      2,
      112
    ]
  }),
  __expand__($V6, [
      2,
      113
    ], {51:[
      2,
      113
    ]
  }),
  __expand__($V6, [
      2,
      114
    ], {51:[
      2,
      114
    ]
  }),
  __expand__($V9, [
      2,
      100
    ], {61:334,84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  {
    62: [
      1,
      379
    ]
  },
  {
    55: [
      1,
      131
    ],
    62: [
      1,
      380
    ],
    70: 190,
    72: 189,
    74: [
      2,
      83
    ]
  },
  {
    55: [
      1,
      131
    ],
    62: [
      1,
      381
    ],
    70: 190,
    72: 191,
    74: [
      2,
      83
    ]
  },
  {
    24: [
      1,
      382
    ],
    25: [
      1,
      383
    ],
    62: [
      2,
      20
    ]
  },
  __expand__($Va, [
      2,
      23
    ], {6:[
      1,
      387
    ],27:[
      1,
      384
    ],28:[
      1,
      385
    ],31:[
      1,
      386
    ],37:[
      1,
      388
    ],62:[
      2,
      23
    ]
  }),
  __expand__($Vb, [
      2,
      36
    ], {30:[
      1,
      389
    ],39:[
      1,
      390
    ],40:[
      1,
      391
    ],62:[
      2,
      36
    ]
  }),
  __expand__($Vc, [
      2,
      34
    ], {33:[
      1,
      392
    ],34:[
      1,
      393
    ],35:[
      1,
      394
    ],36:[
      1,
      395
    ],38:[
      1,
      396
    ],62:[
      2,
      34
    ]
  }),
  __expand__($Vd, [
      2,
      39
    ], {42:[
      1,
      397
    ],43:[
      1,
      398
    ],44:[
      1,
      399
    ],62:[
      2,
      39
    ]
  }),
  __expand__($Ve, [
      2,
      43
    ], {49:[
      1,
      400
    ],50:[
      1,
      401
    ],51:[
      1,
      402
    ],62:[
      2,
      43
    ]
  }),
  __expand__($Vf, [
      2,
      49
    ], {47:[
      1,
      403
    ],62:[
      2,
      49
    ]
  }),
  {
    2: [
      1,
      169
    ],
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    45: 404,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  __expand__($Vg, [
      2,
      50
    ], {62:[
      2,
      50
    ]
  }),
  __expand__($Vg, [
      2,
      51
    ], {62:[
      2,
      51
    ]
  }),
  __expand__($Vh, [
      2,
      52
    ], {85:[
      1,
      406
    ],86:[
      1,
      405
    ],87:[
      1,
      408
    ],88:[
      1,
      407
    ]
  }),
  __expand__($Vg, [
      2,
      53
    ], {62:[
      2,
      53
    ]
  }),
  __expand__($Vg, [
      2,
      54
    ], {62:[
      2,
      54
    ]
  }),
  __expand__($Vg, [
      2,
      55
    ], {62:[
      2,
      55
    ]
  }),
  __expand__($Vg, [
      2,
      56
    ], {62:[
      2,
      56
    ]
  }),
  __expand__($Vg, [
      2,
      57
    ], {62:[
      2,
      57
    ]
  }),
  __expand__($Vh, [
      2,
      58
    ], {55:[
      1,
      131
    ],70:130
  }),
  __expand__($Vg, [
      2,
      59
    ], {62:[
      2,
      59
    ]
  }),
  {
    2: [
      1,
      413
    ],
    10: 182,
    20: 76,
    53: 412,
    54: 409,
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      187
    ],
    89: 410,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      411
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      413
    ],
    10: 182,
    20: 76,
    53: 412,
    54: 414,
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      187
    ],
    89: 415,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      416
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      413
    ],
    10: 182,
    20: 76,
    53: 412,
    54: 417,
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      187
    ],
    95: [
      1,
      78
    ]
  },
  __expand__($Vg, [
      2,
      65
    ], {57:[
      1,
      418
    ],62:[
      2,
      65
    ]
  }),
  __expand__($Vi, [
      2,
      112
    ], {88:[
      2,
      112
    ]
  }),
  __expand__($Vg, [
      2,
      115
    ], {62:[
      2,
      115
    ]
  }),
  {
    14: 419,
    39: [
      1,
      421
    ],
    40: [
      1,
      420
    ],
    89: 422,
    90: [
      1,
      423
    ],
    91: [
      1,
      424
    ]
  },
  __expand__($Vg, [
      2,
      118
    ], {62:[
      2,
      118
    ]
  }),
  __expand__($Vg, [
      2,
      119
    ], {62:[
      2,
      119
    ]
  }),
  __expand__($Vj, [
      2,
      120
    ], {62:[
      2,
      120
    ]
  }),
  {
    60: [
      1,
      425
    ]
  },
  {
    2: [
      1,
      169
    ],
    7: 426,
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    23: 152,
    26: 153,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      150
    ],
    73: [
      1,
      151
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  __expand__($Vk, [
      2,
      69
    ], {62:[
      2,
      69
    ]
  }),
  __expand__($Vi, [
      2,
      113
    ], {88:[
      2,
      113
    ]
  }),
  __expand__($Vi, [
      2,
      114
    ], {88:[
      2,
      114
    ]
  }),
  __expand__($Vk, [
      2,
      76
    ], {62:[
      2,
      76
    ]
  }),
  {
    68: 427,
    74: [
      1,
      187
    ]
  },
  __expand__($Vk, [
      2,
      86
    ], {62:[
      2,
      86
    ]
  }),
  __expand__($V7, [
      2,
      77
    ], {57:[
      2,
      77
    ]
  }),
  {
    74: [
      2,
      81
    ]
  },
  {
    74: [
      2,
      84
    ]
  },
  {
    74: [
      2,
      82
    ]
  },
  {
    2: [
      2,
      77
    ],
    5: [
      2,
      77
    ]
  },
  {
    62: [
      1,
      380
    ]
  },
  {
    62: [
      1,
      381
    ]
  },
  {
    2: [
      1,
      429
    ],
    12: 428,
    76: 81,
    77: 83,
    78: [
      1,
      85
    ],
    82: 82,
    83: [
      1,
      84
    ]
  },
  {
    80: [
      1,
      430
    ],
    81: [
      1,
      431
    ]
  },
  {
    75: [
      1,
      432
    ],
    80: [
      2,
      92
    ],
    81: [
      2,
      92
    ]
  },
  {
    80: [
      2,
      93
    ],
    81: [
      2,
      93
    ]
  },
  {
    80: [
      2,
      94
    ],
    81: [
      2,
      94
    ]
  },
  __expand__($Vl, [
      2,
      89
    ], {81:[
      2,
      89
    ]
  }),
  {
    80: [
      2,
      76
    ],
    81: [
      2,
      76
    ]
  },
  {
    68: 433,
    74: [
      1,
      205
    ]
  },
  __expand__($Vl, [
      2,
      95
    ], {81:[
      2,
      95
    ]
  }),
  __expand__($Vl, [
      2,
      96
    ], {81:[
      2,
      96
    ]
  }),
  {
    80: [
      2,
      86
    ],
    81: [
      2,
      86
    ]
  },
  __expand__($Vl, [
      2,
      97
    ], {81:[
      2,
      97
    ]
  }),
  {
    2: [
      1,
      199
    ],
    10: 198,
    12: 197,
    20: 76,
    60: [
      1,
      77
    ],
    68: 201,
    69: 202,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      205
    ],
    76: 200,
    77: 204,
    78: [
      1,
      207
    ],
    79: 434,
    82: 203,
    83: [
      1,
      206
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      2,
      110
    ],
    5: [
      2,
      110
    ]
  },
  {
    2: [
      2,
      111
    ],
    5: [
      2,
      111
    ]
  },
  __expand__($Vm, [
      2,
      21
    ], {25:[
      2,
      21
    ]
  }),
  __expand__($Vm, [
      2,
      22
    ], {25:[
      2,
      22
    ]
  }),
  __expand__($Vn, [
      2,
      24
    ], {37:[
      2,
      24
    ]
  }),
  __expand__($Vn, [
      2,
      25
    ], {37:[
      2,
      25
    ]
  }),
  __expand__($Vn, [
      2,
      27
    ], {37:[
      2,
      27
    ]
  }),
  __expand__($Vn, [
      2,
      32
    ], {37:[
      2,
      32
    ]
  }),
  __expand__($Vn, [
      2,
      33
    ], {37:[
      2,
      33
    ]
  }),
  __expand__($V3, [
      2,
      26
    ], {39:[
      1,
      435
    ],40:[
      1,
      436
    ]
  }),
  __expand__([2,5,6,24,25,27,28,31,37,39,40], [
      2,
      39
    ], {42:[
      1,
      437
    ],43:[
      1,
      438
    ],44:[
      1,
      439
    ]
  }),
  __expand__($Vo, [
      2,
      43
    ], {49:[
      1,
      440
    ],50:[
      1,
      441
    ],51:[
      1,
      442
    ]
  }),
  __expand__($Vp, [
      2,
      49
    ], {47:[
      1,
      443
    ],51:[
      2,
      49
    ]
  }),
  {
    2: [
      1,
      231
    ],
    10: 244,
    14: 224,
    15: 225,
    16: 226,
    17: 227,
    18: 228,
    19: 229,
    20: 230,
    39: [
      1,
      233
    ],
    40: [
      1,
      232
    ],
    45: 444,
    46: 220,
    48: [
      1,
      221
    ],
    52: 222,
    53: 223,
    55: [
      1,
      234
    ],
    56: 235,
    59: [
      1,
      242
    ],
    60: [
      1,
      243
    ],
    68: 247,
    69: 248,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      249
    ],
    88: [
      1,
      238
    ],
    89: 236,
    90: [
      1,
      245
    ],
    91: [
      1,
      246
    ],
    92: [
      1,
      237
    ],
    93: [
      1,
      239
    ],
    94: [
      1,
      240
    ],
    95: [
      1,
      241
    ]
  },
  __expand__($Vq, [
      2,
      50
    ], {51:[
      2,
      50
    ]
  }),
  __expand__($Vq, [
      2,
      51
    ], {51:[
      2,
      51
    ]
  }),
  __expand__($Vr, [
      2,
      52
    ], {85:[
      1,
      446
    ],86:[
      1,
      445
    ],87:[
      1,
      448
    ],88:[
      1,
      447
    ]
  }),
  __expand__($Vq, [
      2,
      53
    ], {51:[
      2,
      53
    ]
  }),
  __expand__($Vq, [
      2,
      54
    ], {51:[
      2,
      54
    ]
  }),
  __expand__($Vq, [
      2,
      55
    ], {51:[
      2,
      55
    ]
  }),
  __expand__($Vq, [
      2,
      56
    ], {51:[
      2,
      56
    ]
  }),
  __expand__($Vq, [
      2,
      57
    ], {51:[
      2,
      57
    ]
  }),
  __expand__($Vr, [
      2,
      58
    ], {55:[
      1,
      131
    ],70:130
  }),
  __expand__($Vq, [
      2,
      59
    ], {51:[
      2,
      59
    ]
  }),
  {
    2: [
      1,
      453
    ],
    10: 244,
    20: 76,
    53: 452,
    54: 449,
    56: 235,
    59: [
      1,
      242
    ],
    60: [
      1,
      243
    ],
    68: 247,
    69: 248,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      249
    ],
    89: 450,
    90: [
      1,
      245
    ],
    91: [
      1,
      246
    ],
    92: [
      1,
      451
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      453
    ],
    10: 244,
    20: 76,
    53: 452,
    54: 454,
    56: 235,
    59: [
      1,
      242
    ],
    60: [
      1,
      243
    ],
    68: 247,
    69: 248,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      249
    ],
    89: 455,
    90: [
      1,
      245
    ],
    91: [
      1,
      246
    ],
    92: [
      1,
      456
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      453
    ],
    10: 244,
    20: 76,
    53: 452,
    54: 457,
    56: 235,
    59: [
      1,
      242
    ],
    60: [
      1,
      243
    ],
    68: 247,
    69: 248,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      249
    ],
    95: [
      1,
      78
    ]
  },
  __expand__($Vr, [
      2,
      65
    ], {57:[
      1,
      458
    ]
  }),
  __expand__($Vs, [
      2,
      112
    ], {88:[
      2,
      112
    ]
  }),
  __expand__($Vq, [
      2,
      115
    ], {51:[
      2,
      115
    ]
  }),
  {
    14: 459,
    39: [
      1,
      461
    ],
    40: [
      1,
      460
    ],
    89: 462,
    90: [
      1,
      463
    ],
    91: [
      1,
      464
    ]
  },
  __expand__($Vq, [
      2,
      118
    ], {51:[
      2,
      118
    ]
  }),
  __expand__($Vq, [
      2,
      119
    ], {51:[
      2,
      119
    ]
  }),
  __expand__($Vr, [
      2,
      120
    ], {55:[
      2,
      120
    ]
  }),
  {
    60: [
      1,
      465
    ]
  },
  {
    2: [
      1,
      169
    ],
    7: 466,
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    23: 152,
    26: 153,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      150
    ],
    73: [
      1,
      151
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  __expand__($Vr, [
      2,
      69
    ], {57:[
      2,
      69
    ]
  }),
  __expand__($Vs, [
      2,
      113
    ], {88:[
      2,
      113
    ]
  }),
  __expand__($Vs, [
      2,
      114
    ], {88:[
      2,
      114
    ]
  }),
  __expand__($Vr, [
      2,
      76
    ], {57:[
      2,
      76
    ]
  }),
  {
    68: 467,
    74: [
      1,
      249
    ]
  },
  __expand__($Vr, [
      2,
      86
    ], {57:[
      2,
      86
    ]
  }),
  __expand__($Vt, [
      2,
      37
    ], {40:[
      2,
      37
    ]
  }),
  __expand__($Vt, [
      2,
      38
    ], {40:[
      2,
      38
    ]
  }),
  __expand__($V3, [
      2,
      28
    ], {38:[
      1,
      468
    ]
  }),
  __expand__([2,5,6,24,25,27,28,31,37,38], [
      2,
      36
    ], {39:[
      1,
      469
    ],40:[
      1,
      470
    ]
  }),
  __expand__([2,5,6,24,25,27,28,31,37,38,39,40], [
      2,
      39
    ], {42:[
      1,
      471
    ],43:[
      1,
      472
    ],44:[
      1,
      473
    ]
  }),
  __expand__($Vu, [
      2,
      43
    ], {49:[
      1,
      474
    ],50:[
      1,
      475
    ],51:[
      1,
      476
    ]
  }),
  __expand__($Vv, [
      2,
      49
    ], {47:[
      1,
      477
    ],51:[
      2,
      49
    ]
  }),
  {
    2: [
      1,
      267
    ],
    10: 280,
    14: 260,
    15: 261,
    16: 262,
    17: 263,
    18: 264,
    19: 265,
    20: 266,
    39: [
      1,
      269
    ],
    40: [
      1,
      268
    ],
    45: 478,
    46: 256,
    48: [
      1,
      257
    ],
    52: 258,
    53: 259,
    55: [
      1,
      270
    ],
    56: 271,
    59: [
      1,
      278
    ],
    60: [
      1,
      279
    ],
    68: 283,
    69: 284,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      285
    ],
    88: [
      1,
      274
    ],
    89: 272,
    90: [
      1,
      281
    ],
    91: [
      1,
      282
    ],
    92: [
      1,
      273
    ],
    93: [
      1,
      275
    ],
    94: [
      1,
      276
    ],
    95: [
      1,
      277
    ]
  },
  __expand__($Vw, [
      2,
      50
    ], {51:[
      2,
      50
    ]
  }),
  __expand__($Vw, [
      2,
      51
    ], {51:[
      2,
      51
    ]
  }),
  __expand__($Vx, [
      2,
      52
    ], {85:[
      1,
      480
    ],86:[
      1,
      479
    ],87:[
      1,
      482
    ],88:[
      1,
      481
    ]
  }),
  __expand__($Vw, [
      2,
      53
    ], {51:[
      2,
      53
    ]
  }),
  __expand__($Vw, [
      2,
      54
    ], {51:[
      2,
      54
    ]
  }),
  __expand__($Vw, [
      2,
      55
    ], {51:[
      2,
      55
    ]
  }),
  __expand__($Vw, [
      2,
      56
    ], {51:[
      2,
      56
    ]
  }),
  __expand__($Vw, [
      2,
      57
    ], {51:[
      2,
      57
    ]
  }),
  __expand__($Vx, [
      2,
      58
    ], {55:[
      1,
      131
    ],70:130
  }),
  __expand__($Vw, [
      2,
      59
    ], {51:[
      2,
      59
    ]
  }),
  {
    2: [
      1,
      487
    ],
    10: 280,
    20: 76,
    53: 486,
    54: 483,
    56: 271,
    59: [
      1,
      278
    ],
    60: [
      1,
      279
    ],
    68: 283,
    69: 284,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      285
    ],
    89: 484,
    90: [
      1,
      281
    ],
    91: [
      1,
      282
    ],
    92: [
      1,
      485
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      487
    ],
    10: 280,
    20: 76,
    53: 486,
    54: 488,
    56: 271,
    59: [
      1,
      278
    ],
    60: [
      1,
      279
    ],
    68: 283,
    69: 284,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      285
    ],
    89: 489,
    90: [
      1,
      281
    ],
    91: [
      1,
      282
    ],
    92: [
      1,
      490
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      487
    ],
    10: 280,
    20: 76,
    53: 486,
    54: 491,
    56: 271,
    59: [
      1,
      278
    ],
    60: [
      1,
      279
    ],
    68: 283,
    69: 284,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      285
    ],
    95: [
      1,
      78
    ]
  },
  __expand__($Vx, [
      2,
      65
    ], {57:[
      1,
      492
    ]
  }),
  __expand__($Vy, [
      2,
      112
    ], {88:[
      2,
      112
    ]
  }),
  __expand__($Vw, [
      2,
      115
    ], {51:[
      2,
      115
    ]
  }),
  {
    14: 493,
    39: [
      1,
      495
    ],
    40: [
      1,
      494
    ],
    89: 496,
    90: [
      1,
      497
    ],
    91: [
      1,
      498
    ]
  },
  __expand__($Vw, [
      2,
      118
    ], {51:[
      2,
      118
    ]
  }),
  __expand__($Vw, [
      2,
      119
    ], {51:[
      2,
      119
    ]
  }),
  __expand__($Vx, [
      2,
      120
    ], {55:[
      2,
      120
    ]
  }),
  {
    60: [
      1,
      499
    ]
  },
  {
    2: [
      1,
      169
    ],
    7: 500,
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    23: 152,
    26: 153,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      150
    ],
    73: [
      1,
      151
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  __expand__($Vx, [
      2,
      69
    ], {57:[
      2,
      69
    ]
  }),
  __expand__($Vy, [
      2,
      113
    ], {88:[
      2,
      113
    ]
  }),
  __expand__($Vy, [
      2,
      114
    ], {88:[
      2,
      114
    ]
  }),
  __expand__($Vx, [
      2,
      76
    ], {57:[
      2,
      76
    ]
  }),
  {
    68: 501,
    74: [
      1,
      285
    ]
  },
  __expand__($Vx, [
      2,
      86
    ], {57:[
      2,
      86
    ]
  }),
  __expand__($V3, [
      2,
      29
    ], {38:[
      1,
      468
    ]
  }),
  __expand__($V3, [
      2,
      30
    ], {38:[
      1,
      468
    ]
  }),
  __expand__($V3, [
      2,
      31
    ], {38:[
      1,
      468
    ]
  }),
  __expand__([2,5,6,24,25,27,28,31,33,34,35,36,37], [
      2,
      35
    ], {38:[
      2,
      35
    ]
  }),
  __expand__($V2, [
      2,
      36
    ], {39:[
      1,
      502
    ],40:[
      1,
      503
    ]
  }),
  __expand__([2,5,6,24,25,27,28,31,33,34,35,36,37,38,39,40], [
      2,
      39
    ], {42:[
      1,
      504
    ],43:[
      1,
      505
    ],44:[
      1,
      506
    ]
  }),
  __expand__($Vz, [
      2,
      43
    ], {49:[
      1,
      507
    ],50:[
      1,
      508
    ],51:[
      1,
      509
    ]
  }),
  __expand__($VA, [
      2,
      49
    ], {47:[
      1,
      510
    ],51:[
      2,
      49
    ]
  }),
  {
    2: [
      1,
      304
    ],
    10: 317,
    14: 297,
    15: 298,
    16: 299,
    17: 300,
    18: 301,
    19: 302,
    20: 303,
    39: [
      1,
      306
    ],
    40: [
      1,
      305
    ],
    45: 511,
    46: 293,
    48: [
      1,
      294
    ],
    52: 295,
    53: 296,
    55: [
      1,
      307
    ],
    56: 308,
    59: [
      1,
      315
    ],
    60: [
      1,
      316
    ],
    68: 320,
    69: 321,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      322
    ],
    88: [
      1,
      311
    ],
    89: 309,
    90: [
      1,
      318
    ],
    91: [
      1,
      319
    ],
    92: [
      1,
      310
    ],
    93: [
      1,
      312
    ],
    94: [
      1,
      313
    ],
    95: [
      1,
      314
    ]
  },
  __expand__($VB, [
      2,
      50
    ], {51:[
      2,
      50
    ]
  }),
  __expand__($VB, [
      2,
      51
    ], {51:[
      2,
      51
    ]
  }),
  __expand__($VC, [
      2,
      52
    ], {85:[
      1,
      513
    ],86:[
      1,
      512
    ],87:[
      1,
      515
    ],88:[
      1,
      514
    ]
  }),
  __expand__($VB, [
      2,
      53
    ], {51:[
      2,
      53
    ]
  }),
  __expand__($VB, [
      2,
      54
    ], {51:[
      2,
      54
    ]
  }),
  __expand__($VB, [
      2,
      55
    ], {51:[
      2,
      55
    ]
  }),
  __expand__($VB, [
      2,
      56
    ], {51:[
      2,
      56
    ]
  }),
  __expand__($VB, [
      2,
      57
    ], {51:[
      2,
      57
    ]
  }),
  __expand__($VC, [
      2,
      58
    ], {55:[
      1,
      131
    ],70:130
  }),
  __expand__($VB, [
      2,
      59
    ], {51:[
      2,
      59
    ]
  }),
  {
    2: [
      1,
      520
    ],
    10: 317,
    20: 76,
    53: 519,
    54: 516,
    56: 308,
    59: [
      1,
      315
    ],
    60: [
      1,
      316
    ],
    68: 320,
    69: 321,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      322
    ],
    89: 517,
    90: [
      1,
      318
    ],
    91: [
      1,
      319
    ],
    92: [
      1,
      518
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      520
    ],
    10: 317,
    20: 76,
    53: 519,
    54: 521,
    56: 308,
    59: [
      1,
      315
    ],
    60: [
      1,
      316
    ],
    68: 320,
    69: 321,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      322
    ],
    89: 522,
    90: [
      1,
      318
    ],
    91: [
      1,
      319
    ],
    92: [
      1,
      523
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      520
    ],
    10: 317,
    20: 76,
    53: 519,
    54: 524,
    56: 308,
    59: [
      1,
      315
    ],
    60: [
      1,
      316
    ],
    68: 320,
    69: 321,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      322
    ],
    95: [
      1,
      78
    ]
  },
  __expand__($VC, [
      2,
      65
    ], {57:[
      1,
      525
    ]
  }),
  __expand__($VD, [
      2,
      112
    ], {88:[
      2,
      112
    ]
  }),
  __expand__($VB, [
      2,
      115
    ], {51:[
      2,
      115
    ]
  }),
  {
    14: 526,
    39: [
      1,
      528
    ],
    40: [
      1,
      527
    ],
    89: 529,
    90: [
      1,
      530
    ],
    91: [
      1,
      531
    ]
  },
  __expand__($VB, [
      2,
      118
    ], {51:[
      2,
      118
    ]
  }),
  __expand__($VB, [
      2,
      119
    ], {51:[
      2,
      119
    ]
  }),
  __expand__($VC, [
      2,
      120
    ], {55:[
      2,
      120
    ]
  }),
  {
    60: [
      1,
      532
    ]
  },
  {
    2: [
      1,
      169
    ],
    7: 533,
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    23: 152,
    26: 153,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      150
    ],
    73: [
      1,
      151
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  __expand__($VC, [
      2,
      69
    ], {57:[
      2,
      69
    ]
  }),
  __expand__($VD, [
      2,
      113
    ], {88:[
      2,
      113
    ]
  }),
  __expand__($VD, [
      2,
      114
    ], {88:[
      2,
      114
    ]
  }),
  __expand__($VC, [
      2,
      76
    ], {57:[
      2,
      76
    ]
  }),
  {
    68: 534,
    74: [
      1,
      322
    ]
  },
  __expand__($VC, [
      2,
      86
    ], {57:[
      2,
      86
    ]
  }),
  __expand__($VE, [
      2,
      40
    ], {44:[
      1,
      120
    ]
  }),
  __expand__($VE, [
      2,
      41
    ], {44:[
      1,
      120
    ]
  }),
  __expand__($VE, [
      2,
      42
    ], {44:[
      1,
      120
    ]
  }),
  __expand__($V4, [
      2,
      44
    ], {49:[
      1,
      121
    ],50:[
      1,
      122
    ],51:[
      2,
      44
    ]
  }),
  __expand__($V6, [
      2,
      66
    ], {51:[
      2,
      66
    ]
  }),
  __expand__($V7, [
      2,
      70
    ], {57:[
      1,
      535
    ],66:[
      1,
      536
    ]
  }),
  __expand__($VF, [
      2,
      72
    ], {66:[
      2,
      72
    ]
  }),
  {
    60: [
      1,
      537
    ]
  },
  __expand__($VF, [
      2,
      75
    ], {66:[
      2,
      75
    ]
  }),
  __expand__($V6, [
      2,
      110
    ], {51:[
      2,
      110
    ]
  }),
  __expand__($V6, [
      2,
      111
    ], {51:[
      2,
      111
    ]
  }),
  {
    62: [
      1,
      538
    ],
    81: [
      1,
      539
    ]
  },
  {
    62: [
      2,
      101
    ],
    81: [
      2,
      101
    ]
  },
  {
    62: [
      2,
      98
    ],
    81: [
      2,
      98
    ]
  },
  {
    62: [
      2,
      99
    ],
    75: [
      1,
      540
    ],
    81: [
      2,
      99
    ]
  },
  {
    24: [
      1,
      541
    ],
    25: [
      1,
      542
    ],
    62: [
      2,
      20
    ],
    81: [
      2,
      20
    ]
  },
  __expand__($VG, [
      2,
      89
    ], {81:[
      2,
      89
    ]
  }),
  __expand__($VH, [
      2,
      23
    ], {6:[
      1,
      546
    ],27:[
      1,
      543
    ],28:[
      1,
      544
    ],31:[
      1,
      545
    ],37:[
      1,
      547
    ],81:[
      2,
      23
    ]
  }),
  __expand__($VG, [
      2,
      95
    ], {81:[
      2,
      95
    ]
  }),
  __expand__($VG, [
      2,
      96
    ], {81:[
      2,
      96
    ]
  }),
  __expand__($VI, [
      2,
      36
    ], {30:[
      1,
      548
    ],39:[
      1,
      549
    ],40:[
      1,
      550
    ],81:[
      2,
      36
    ]
  }),
  __expand__($VJ, [
      2,
      34
    ], {33:[
      1,
      551
    ],34:[
      1,
      552
    ],35:[
      1,
      553
    ],36:[
      1,
      554
    ],38:[
      1,
      555
    ],81:[
      2,
      34
    ]
  }),
  __expand__($VG, [
      2,
      97
    ], {81:[
      2,
      97
    ]
  }),
  {
    2: [
      1,
      199
    ],
    10: 198,
    12: 197,
    20: 76,
    60: [
      1,
      77
    ],
    68: 201,
    69: 202,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      205
    ],
    76: 200,
    77: 204,
    78: [
      1,
      207
    ],
    79: 556,
    82: 203,
    83: [
      1,
      206
    ],
    95: [
      1,
      78
    ]
  },
  __expand__($VK, [
      2,
      39
    ], {42:[
      1,
      557
    ],43:[
      1,
      558
    ],44:[
      1,
      559
    ],81:[
      2,
      39
    ]
  }),
  __expand__([6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,62], [
      2,
      43
    ], {49:[
      1,
      560
    ],50:[
      1,
      561
    ],51:[
      1,
      562
    ],81:[
      2,
      43
    ]
  }),
  __expand__($VL, [
      2,
      49
    ], {47:[
      1,
      563
    ],81:[
      2,
      49
    ]
  }),
  {
    2: [
      1,
      360
    ],
    10: 373,
    14: 353,
    15: 354,
    16: 355,
    17: 356,
    18: 357,
    19: 358,
    20: 359,
    39: [
      1,
      362
    ],
    40: [
      1,
      361
    ],
    45: 564,
    46: 349,
    48: [
      1,
      350
    ],
    52: 351,
    53: 352,
    55: [
      1,
      363
    ],
    56: 364,
    59: [
      1,
      371
    ],
    60: [
      1,
      372
    ],
    68: 376,
    69: 377,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      378
    ],
    88: [
      1,
      367
    ],
    89: 365,
    90: [
      1,
      374
    ],
    91: [
      1,
      375
    ],
    92: [
      1,
      366
    ],
    93: [
      1,
      368
    ],
    94: [
      1,
      369
    ],
    95: [
      1,
      370
    ]
  },
  __expand__($Vh, [
      2,
      50
    ], {81:[
      2,
      50
    ]
  }),
  __expand__($Vh, [
      2,
      51
    ], {81:[
      2,
      51
    ]
  }),
  __expand__([6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,62,81], [
      2,
      52
    ], {85:[
      1,
      566
    ],86:[
      1,
      565
    ],87:[
      1,
      568
    ],88:[
      1,
      567
    ]
  }),
  __expand__($Vh, [
      2,
      53
    ], {81:[
      2,
      53
    ]
  }),
  __expand__($Vh, [
      2,
      54
    ], {81:[
      2,
      54
    ]
  }),
  __expand__($Vh, [
      2,
      55
    ], {81:[
      2,
      55
    ]
  }),
  __expand__($Vh, [
      2,
      56
    ], {81:[
      2,
      56
    ]
  }),
  __expand__($Vh, [
      2,
      57
    ], {81:[
      2,
      57
    ]
  }),
  __expand__($Vh, [
      2,
      58
    ], {70:130,55:[
      1,
      131
    ],81:[
      2,
      58
    ]
  }),
  __expand__($Vh, [
      2,
      59
    ], {81:[
      2,
      59
    ]
  }),
  {
    2: [
      1,
      573
    ],
    10: 373,
    20: 76,
    53: 572,
    54: 569,
    56: 364,
    59: [
      1,
      371
    ],
    60: [
      1,
      372
    ],
    68: 376,
    69: 377,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      378
    ],
    89: 570,
    90: [
      1,
      374
    ],
    91: [
      1,
      375
    ],
    92: [
      1,
      571
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      573
    ],
    10: 373,
    20: 76,
    53: 572,
    54: 574,
    56: 364,
    59: [
      1,
      371
    ],
    60: [
      1,
      372
    ],
    68: 376,
    69: 377,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      378
    ],
    89: 575,
    90: [
      1,
      374
    ],
    91: [
      1,
      375
    ],
    92: [
      1,
      576
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      573
    ],
    10: 373,
    20: 76,
    53: 572,
    54: 577,
    56: 364,
    59: [
      1,
      371
    ],
    60: [
      1,
      372
    ],
    68: 376,
    69: 377,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      378
    ],
    95: [
      1,
      78
    ]
  },
  __expand__($Vh, [
      2,
      65
    ], {57:[
      1,
      578
    ],81:[
      2,
      65
    ]
  }),
  __expand__($VM, [
      2,
      112
    ], {88:[
      2,
      112
    ]
  }),
  __expand__($Vh, [
      2,
      115
    ], {81:[
      2,
      115
    ]
  }),
  {
    14: 579,
    39: [
      1,
      581
    ],
    40: [
      1,
      580
    ],
    89: 582,
    90: [
      1,
      583
    ],
    91: [
      1,
      584
    ]
  },
  __expand__($Vh, [
      2,
      118
    ], {81:[
      2,
      118
    ]
  }),
  __expand__($Vh, [
      2,
      119
    ], {81:[
      2,
      119
    ]
  }),
  __expand__([6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,55,62], [
      2,
      120
    ], {81:[
      2,
      120
    ]
  }),
  {
    60: [
      1,
      585
    ]
  },
  {
    2: [
      1,
      169
    ],
    7: 586,
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    23: 152,
    26: 153,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      150
    ],
    73: [
      1,
      151
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  __expand__($VN, [
      2,
      69
    ], {81:[
      2,
      69
    ]
  }),
  __expand__($VM, [
      2,
      113
    ], {88:[
      2,
      113
    ]
  }),
  __expand__($VM, [
      2,
      114
    ], {88:[
      2,
      114
    ]
  }),
  __expand__($VN, [
      2,
      76
    ], {81:[
      2,
      76
    ]
  }),
  {
    68: 587,
    74: [
      1,
      378
    ]
  },
  __expand__($VN, [
      2,
      86
    ], {81:[
      2,
      86
    ]
  }),
  __expand__($V7, [
      2,
      68
    ], {57:[
      2,
      68
    ]
  }),
  {
    55: [
      1,
      131
    ],
    70: 190,
    72: 588,
    74: [
      2,
      83
    ]
  },
  {
    55: [
      1,
      131
    ],
    70: 190,
    72: 589,
    74: [
      2,
      83
    ]
  },
  {
    2: [
      1,
      169
    ],
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    23: 590,
    26: 153,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  {
    2: [
      1,
      169
    ],
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    23: 591,
    26: 153,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  {
    2: [
      1,
      169
    ],
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    26: 592,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  {
    2: [
      1,
      169
    ],
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    26: 593,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  {
    2: [
      1,
      169
    ],
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    26: 594,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  {
    2: [
      1,
      169
    ],
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    26: 595,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  {
    2: [
      1,
      169
    ],
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    26: 596,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  {
    2: [
      1,
      611
    ],
    10: 624,
    14: 604,
    15: 605,
    16: 606,
    17: 607,
    18: 608,
    19: 609,
    20: 610,
    29: 597,
    39: [
      1,
      613
    ],
    40: [
      1,
      612
    ],
    41: 598,
    45: 599,
    46: 600,
    48: [
      1,
      601
    ],
    52: 602,
    53: 603,
    55: [
      1,
      614
    ],
    56: 615,
    59: [
      1,
      622
    ],
    60: [
      1,
      623
    ],
    68: 627,
    69: 628,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      629
    ],
    88: [
      1,
      618
    ],
    89: 616,
    90: [
      1,
      625
    ],
    91: [
      1,
      626
    ],
    92: [
      1,
      617
    ],
    93: [
      1,
      619
    ],
    94: [
      1,
      620
    ],
    95: [
      1,
      621
    ]
  },
  {
    2: [
      1,
      169
    ],
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    29: 630,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  {
    2: [
      1,
      169
    ],
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    29: 631,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  {
    2: [
      1,
      647
    ],
    10: 660,
    14: 640,
    15: 641,
    16: 642,
    17: 643,
    18: 644,
    19: 645,
    20: 646,
    29: 633,
    32: 632,
    39: [
      1,
      649
    ],
    40: [
      1,
      648
    ],
    41: 634,
    45: 635,
    46: 636,
    48: [
      1,
      637
    ],
    52: 638,
    53: 639,
    55: [
      1,
      650
    ],
    56: 651,
    59: [
      1,
      658
    ],
    60: [
      1,
      659
    ],
    68: 663,
    69: 664,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      665
    ],
    88: [
      1,
      654
    ],
    89: 652,
    90: [
      1,
      661
    ],
    91: [
      1,
      662
    ],
    92: [
      1,
      653
    ],
    93: [
      1,
      655
    ],
    94: [
      1,
      656
    ],
    95: [
      1,
      657
    ]
  },
  {
    2: [
      1,
      647
    ],
    10: 660,
    14: 640,
    15: 641,
    16: 642,
    17: 643,
    18: 644,
    19: 645,
    20: 646,
    29: 633,
    32: 666,
    39: [
      1,
      649
    ],
    40: [
      1,
      648
    ],
    41: 634,
    45: 635,
    46: 636,
    48: [
      1,
      637
    ],
    52: 638,
    53: 639,
    55: [
      1,
      650
    ],
    56: 651,
    59: [
      1,
      658
    ],
    60: [
      1,
      659
    ],
    68: 663,
    69: 664,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      665
    ],
    88: [
      1,
      654
    ],
    89: 652,
    90: [
      1,
      661
    ],
    91: [
      1,
      662
    ],
    92: [
      1,
      653
    ],
    93: [
      1,
      655
    ],
    94: [
      1,
      656
    ],
    95: [
      1,
      657
    ]
  },
  {
    2: [
      1,
      647
    ],
    10: 660,
    14: 640,
    15: 641,
    16: 642,
    17: 643,
    18: 644,
    19: 645,
    20: 646,
    29: 633,
    32: 667,
    39: [
      1,
      649
    ],
    40: [
      1,
      648
    ],
    41: 634,
    45: 635,
    46: 636,
    48: [
      1,
      637
    ],
    52: 638,
    53: 639,
    55: [
      1,
      650
    ],
    56: 651,
    59: [
      1,
      658
    ],
    60: [
      1,
      659
    ],
    68: 663,
    69: 664,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      665
    ],
    88: [
      1,
      654
    ],
    89: 652,
    90: [
      1,
      661
    ],
    91: [
      1,
      662
    ],
    92: [
      1,
      653
    ],
    93: [
      1,
      655
    ],
    94: [
      1,
      656
    ],
    95: [
      1,
      657
    ]
  },
  {
    2: [
      1,
      647
    ],
    10: 660,
    14: 640,
    15: 641,
    16: 642,
    17: 643,
    18: 644,
    19: 645,
    20: 646,
    29: 633,
    32: 668,
    39: [
      1,
      649
    ],
    40: [
      1,
      648
    ],
    41: 634,
    45: 635,
    46: 636,
    48: [
      1,
      637
    ],
    52: 638,
    53: 639,
    55: [
      1,
      650
    ],
    56: 651,
    59: [
      1,
      658
    ],
    60: [
      1,
      659
    ],
    68: 663,
    69: 664,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      665
    ],
    88: [
      1,
      654
    ],
    89: 652,
    90: [
      1,
      661
    ],
    91: [
      1,
      662
    ],
    92: [
      1,
      653
    ],
    93: [
      1,
      655
    ],
    94: [
      1,
      656
    ],
    95: [
      1,
      657
    ]
  },
  {
    2: [
      1,
      684
    ],
    10: 697,
    14: 677,
    15: 678,
    16: 679,
    17: 680,
    18: 681,
    19: 682,
    20: 683,
    29: 670,
    32: 669,
    39: [
      1,
      686
    ],
    40: [
      1,
      685
    ],
    41: 671,
    45: 672,
    46: 673,
    48: [
      1,
      674
    ],
    52: 675,
    53: 676,
    55: [
      1,
      687
    ],
    56: 688,
    59: [
      1,
      695
    ],
    60: [
      1,
      696
    ],
    68: 700,
    69: 701,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      702
    ],
    88: [
      1,
      691
    ],
    89: 689,
    90: [
      1,
      698
    ],
    91: [
      1,
      699
    ],
    92: [
      1,
      690
    ],
    93: [
      1,
      692
    ],
    94: [
      1,
      693
    ],
    95: [
      1,
      694
    ]
  },
  {
    2: [
      1,
      169
    ],
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 703,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  {
    2: [
      1,
      169
    ],
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 704,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  {
    2: [
      1,
      169
    ],
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 705,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  __expand__($Vf, [
      2,
      46
    ], {62:[
      2,
      46
    ]
  }),
  __expand__($Vf, [
      2,
      47
    ], {62:[
      2,
      47
    ]
  }),
  __expand__($Vf, [
      2,
      48
    ], {62:[
      2,
      48
    ]
  }),
  {
    2: [
      1,
      169
    ],
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    45: 706,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  __expand__($Vf, [
      2,
      45
    ], {62:[
      2,
      45
    ]
  }),
  __expand__($Vg, [
      2,
      105
    ], {62:[
      2,
      105
    ]
  }),
  __expand__($Vg, [
      2,
      106
    ], {62:[
      2,
      106
    ]
  }),
  __expand__($Vg, [
      2,
      109
    ], {62:[
      2,
      109
    ]
  }),
  __expand__($Vg, [
      2,
      107
    ], {62:[
      2,
      107
    ]
  }),
  __expand__($Vg, [
      2,
      60
    ], {62:[
      2,
      60
    ]
  }),
  __expand__($Vi, [
      2,
      110
    ], {88:[
      2,
      110
    ]
  }),
  __expand__($Vg, [
      2,
      116
    ], {62:[
      2,
      116
    ]
  }),
  __expand__($Vg, [
      2,
      63
    ], {62:[
      2,
      63
    ]
  }),
  __expand__($Vg, [
      2,
      64
    ], {62:[
      2,
      64
    ]
  }),
  __expand__($Vg, [
      2,
      61
    ], {62:[
      2,
      61
    ]
  }),
  __expand__($Vi, [
      2,
      111
    ], {88:[
      2,
      111
    ]
  }),
  __expand__($Vg, [
      2,
      117
    ], {62:[
      2,
      117
    ]
  }),
  __expand__($Vg, [
      2,
      62
    ], {62:[
      2,
      62
    ]
  }),
  {
    2: [
      1,
      711
    ],
    58: 707,
    63: 708,
    64: [
      1,
      709
    ],
    65: [
      1,
      710
    ]
  },
  __expand__($Vg, [
      2,
      108
    ], {62:[
      2,
      108
    ]
  }),
  {
    89: 712,
    90: [
      1,
      423
    ],
    91: [
      1,
      424
    ]
  },
  {
    89: 713,
    90: [
      1,
      423
    ],
    91: [
      1,
      424
    ]
  },
  __expand__($Vg, [
      2,
      112
    ], {62:[
      2,
      112
    ]
  }),
  __expand__($Vg, [
      2,
      113
    ], {62:[
      2,
      113
    ]
  }),
  __expand__($Vg, [
      2,
      114
    ], {62:[
      2,
      114
    ]
  }),
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:714,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  {
    62: [
      1,
      715
    ]
  },
  __expand__($Vk, [
      2,
      77
    ], {62:[
      2,
      77
    ]
  }),
  __expand__($V0, [
      2,
      87
    ], {75:[
      2,
      87
    ]
  }),
  __expand__($V0, [
      2,
      88
    ], {75:[
      2,
      88
    ]
  }),
  __expand__($V0, [
      2,
      90
    ], {75:[
      2,
      90
    ]
  }),
  {
    2: [
      1,
      199
    ],
    10: 198,
    12: 197,
    20: 76,
    60: [
      1,
      77
    ],
    68: 201,
    69: 202,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      205
    ],
    76: 200,
    77: 204,
    78: [
      1,
      207
    ],
    79: 716,
    82: 203,
    83: [
      1,
      206
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      718
    ],
    12: 717,
    76: 200,
    77: 204,
    78: [
      1,
      207
    ],
    82: 203,
    83: [
      1,
      206
    ]
  },
  {
    80: [
      2,
      77
    ],
    81: [
      2,
      77
    ]
  },
  {
    80: [
      1,
      719
    ],
    81: [
      1,
      431
    ]
  },
  {
    2: [
      1,
      231
    ],
    10: 244,
    14: 224,
    15: 225,
    16: 226,
    17: 227,
    18: 228,
    19: 229,
    20: 230,
    29: 720,
    39: [
      1,
      233
    ],
    40: [
      1,
      232
    ],
    41: 218,
    45: 219,
    46: 220,
    48: [
      1,
      221
    ],
    52: 222,
    53: 223,
    55: [
      1,
      234
    ],
    56: 235,
    59: [
      1,
      242
    ],
    60: [
      1,
      243
    ],
    68: 247,
    69: 248,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      249
    ],
    88: [
      1,
      238
    ],
    89: 236,
    90: [
      1,
      245
    ],
    91: [
      1,
      246
    ],
    92: [
      1,
      237
    ],
    93: [
      1,
      239
    ],
    94: [
      1,
      240
    ],
    95: [
      1,
      241
    ]
  },
  {
    2: [
      1,
      231
    ],
    10: 244,
    14: 224,
    15: 225,
    16: 226,
    17: 227,
    18: 228,
    19: 229,
    20: 230,
    29: 721,
    39: [
      1,
      233
    ],
    40: [
      1,
      232
    ],
    41: 218,
    45: 219,
    46: 220,
    48: [
      1,
      221
    ],
    52: 222,
    53: 223,
    55: [
      1,
      234
    ],
    56: 235,
    59: [
      1,
      242
    ],
    60: [
      1,
      243
    ],
    68: 247,
    69: 248,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      249
    ],
    88: [
      1,
      238
    ],
    89: 236,
    90: [
      1,
      245
    ],
    91: [
      1,
      246
    ],
    92: [
      1,
      237
    ],
    93: [
      1,
      239
    ],
    94: [
      1,
      240
    ],
    95: [
      1,
      241
    ]
  },
  {
    2: [
      1,
      231
    ],
    10: 244,
    14: 224,
    15: 225,
    16: 226,
    17: 227,
    18: 228,
    19: 229,
    20: 230,
    39: [
      1,
      233
    ],
    40: [
      1,
      232
    ],
    41: 722,
    45: 219,
    46: 220,
    48: [
      1,
      221
    ],
    52: 222,
    53: 223,
    55: [
      1,
      234
    ],
    56: 235,
    59: [
      1,
      242
    ],
    60: [
      1,
      243
    ],
    68: 247,
    69: 248,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      249
    ],
    88: [
      1,
      238
    ],
    89: 236,
    90: [
      1,
      245
    ],
    91: [
      1,
      246
    ],
    92: [
      1,
      237
    ],
    93: [
      1,
      239
    ],
    94: [
      1,
      240
    ],
    95: [
      1,
      241
    ]
  },
  {
    2: [
      1,
      231
    ],
    10: 244,
    14: 224,
    15: 225,
    16: 226,
    17: 227,
    18: 228,
    19: 229,
    20: 230,
    39: [
      1,
      233
    ],
    40: [
      1,
      232
    ],
    41: 723,
    45: 219,
    46: 220,
    48: [
      1,
      221
    ],
    52: 222,
    53: 223,
    55: [
      1,
      234
    ],
    56: 235,
    59: [
      1,
      242
    ],
    60: [
      1,
      243
    ],
    68: 247,
    69: 248,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      249
    ],
    88: [
      1,
      238
    ],
    89: 236,
    90: [
      1,
      245
    ],
    91: [
      1,
      246
    ],
    92: [
      1,
      237
    ],
    93: [
      1,
      239
    ],
    94: [
      1,
      240
    ],
    95: [
      1,
      241
    ]
  },
  {
    2: [
      1,
      231
    ],
    10: 244,
    14: 224,
    15: 225,
    16: 226,
    17: 227,
    18: 228,
    19: 229,
    20: 230,
    39: [
      1,
      233
    ],
    40: [
      1,
      232
    ],
    41: 724,
    45: 219,
    46: 220,
    48: [
      1,
      221
    ],
    52: 222,
    53: 223,
    55: [
      1,
      234
    ],
    56: 235,
    59: [
      1,
      242
    ],
    60: [
      1,
      243
    ],
    68: 247,
    69: 248,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      249
    ],
    88: [
      1,
      238
    ],
    89: 236,
    90: [
      1,
      245
    ],
    91: [
      1,
      246
    ],
    92: [
      1,
      237
    ],
    93: [
      1,
      239
    ],
    94: [
      1,
      240
    ],
    95: [
      1,
      241
    ]
  },
  __expand__($Vp, [
      2,
      46
    ], {51:[
      2,
      46
    ]
  }),
  __expand__($Vp, [
      2,
      47
    ], {51:[
      2,
      47
    ]
  }),
  __expand__($Vp, [
      2,
      48
    ], {51:[
      2,
      48
    ]
  }),
  {
    2: [
      1,
      231
    ],
    10: 244,
    14: 224,
    15: 225,
    16: 226,
    17: 227,
    18: 228,
    19: 229,
    20: 230,
    39: [
      1,
      233
    ],
    40: [
      1,
      232
    ],
    45: 725,
    46: 220,
    48: [
      1,
      221
    ],
    52: 222,
    53: 223,
    55: [
      1,
      234
    ],
    56: 235,
    59: [
      1,
      242
    ],
    60: [
      1,
      243
    ],
    68: 247,
    69: 248,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      249
    ],
    88: [
      1,
      238
    ],
    89: 236,
    90: [
      1,
      245
    ],
    91: [
      1,
      246
    ],
    92: [
      1,
      237
    ],
    93: [
      1,
      239
    ],
    94: [
      1,
      240
    ],
    95: [
      1,
      241
    ]
  },
  __expand__($Vp, [
      2,
      45
    ], {51:[
      2,
      45
    ]
  }),
  __expand__($Vq, [
      2,
      105
    ], {51:[
      2,
      105
    ]
  }),
  __expand__($Vq, [
      2,
      106
    ], {51:[
      2,
      106
    ]
  }),
  __expand__($Vq, [
      2,
      109
    ], {51:[
      2,
      109
    ]
  }),
  __expand__($Vq, [
      2,
      107
    ], {51:[
      2,
      107
    ]
  }),
  __expand__($Vq, [
      2,
      60
    ], {51:[
      2,
      60
    ]
  }),
  __expand__($Vs, [
      2,
      110
    ], {88:[
      2,
      110
    ]
  }),
  __expand__($Vq, [
      2,
      116
    ], {51:[
      2,
      116
    ]
  }),
  __expand__($Vq, [
      2,
      63
    ], {51:[
      2,
      63
    ]
  }),
  __expand__($Vq, [
      2,
      64
    ], {51:[
      2,
      64
    ]
  }),
  __expand__($Vq, [
      2,
      61
    ], {51:[
      2,
      61
    ]
  }),
  __expand__($Vs, [
      2,
      111
    ], {88:[
      2,
      111
    ]
  }),
  __expand__($Vq, [
      2,
      117
    ], {51:[
      2,
      117
    ]
  }),
  __expand__($Vq, [
      2,
      62
    ], {51:[
      2,
      62
    ]
  }),
  {
    2: [
      1,
      730
    ],
    58: 726,
    63: 727,
    64: [
      1,
      728
    ],
    65: [
      1,
      729
    ]
  },
  __expand__($Vq, [
      2,
      108
    ], {51:[
      2,
      108
    ]
  }),
  {
    89: 731,
    90: [
      1,
      463
    ],
    91: [
      1,
      464
    ]
  },
  {
    89: 732,
    90: [
      1,
      463
    ],
    91: [
      1,
      464
    ]
  },
  __expand__($Vq, [
      2,
      112
    ], {51:[
      2,
      112
    ]
  }),
  __expand__($Vq, [
      2,
      113
    ], {51:[
      2,
      113
    ]
  }),
  __expand__($Vq, [
      2,
      114
    ], {51:[
      2,
      114
    ]
  }),
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:733,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  {
    62: [
      1,
      734
    ]
  },
  __expand__($Vr, [
      2,
      77
    ], {57:[
      2,
      77
    ]
  }),
  {
    2: [
      1,
      267
    ],
    10: 280,
    14: 260,
    15: 261,
    16: 262,
    17: 263,
    18: 264,
    19: 265,
    20: 266,
    29: 253,
    32: 735,
    39: [
      1,
      269
    ],
    40: [
      1,
      268
    ],
    41: 254,
    45: 255,
    46: 256,
    48: [
      1,
      257
    ],
    52: 258,
    53: 259,
    55: [
      1,
      270
    ],
    56: 271,
    59: [
      1,
      278
    ],
    60: [
      1,
      279
    ],
    68: 283,
    69: 284,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      285
    ],
    88: [
      1,
      274
    ],
    89: 272,
    90: [
      1,
      281
    ],
    91: [
      1,
      282
    ],
    92: [
      1,
      273
    ],
    93: [
      1,
      275
    ],
    94: [
      1,
      276
    ],
    95: [
      1,
      277
    ]
  },
  {
    2: [
      1,
      267
    ],
    10: 280,
    14: 260,
    15: 261,
    16: 262,
    17: 263,
    18: 264,
    19: 265,
    20: 266,
    29: 736,
    39: [
      1,
      269
    ],
    40: [
      1,
      268
    ],
    41: 254,
    45: 255,
    46: 256,
    48: [
      1,
      257
    ],
    52: 258,
    53: 259,
    55: [
      1,
      270
    ],
    56: 271,
    59: [
      1,
      278
    ],
    60: [
      1,
      279
    ],
    68: 283,
    69: 284,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      285
    ],
    88: [
      1,
      274
    ],
    89: 272,
    90: [
      1,
      281
    ],
    91: [
      1,
      282
    ],
    92: [
      1,
      273
    ],
    93: [
      1,
      275
    ],
    94: [
      1,
      276
    ],
    95: [
      1,
      277
    ]
  },
  {
    2: [
      1,
      267
    ],
    10: 280,
    14: 260,
    15: 261,
    16: 262,
    17: 263,
    18: 264,
    19: 265,
    20: 266,
    29: 737,
    39: [
      1,
      269
    ],
    40: [
      1,
      268
    ],
    41: 254,
    45: 255,
    46: 256,
    48: [
      1,
      257
    ],
    52: 258,
    53: 259,
    55: [
      1,
      270
    ],
    56: 271,
    59: [
      1,
      278
    ],
    60: [
      1,
      279
    ],
    68: 283,
    69: 284,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      285
    ],
    88: [
      1,
      274
    ],
    89: 272,
    90: [
      1,
      281
    ],
    91: [
      1,
      282
    ],
    92: [
      1,
      273
    ],
    93: [
      1,
      275
    ],
    94: [
      1,
      276
    ],
    95: [
      1,
      277
    ]
  },
  {
    2: [
      1,
      267
    ],
    10: 280,
    14: 260,
    15: 261,
    16: 262,
    17: 263,
    18: 264,
    19: 265,
    20: 266,
    39: [
      1,
      269
    ],
    40: [
      1,
      268
    ],
    41: 738,
    45: 255,
    46: 256,
    48: [
      1,
      257
    ],
    52: 258,
    53: 259,
    55: [
      1,
      270
    ],
    56: 271,
    59: [
      1,
      278
    ],
    60: [
      1,
      279
    ],
    68: 283,
    69: 284,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      285
    ],
    88: [
      1,
      274
    ],
    89: 272,
    90: [
      1,
      281
    ],
    91: [
      1,
      282
    ],
    92: [
      1,
      273
    ],
    93: [
      1,
      275
    ],
    94: [
      1,
      276
    ],
    95: [
      1,
      277
    ]
  },
  {
    2: [
      1,
      267
    ],
    10: 280,
    14: 260,
    15: 261,
    16: 262,
    17: 263,
    18: 264,
    19: 265,
    20: 266,
    39: [
      1,
      269
    ],
    40: [
      1,
      268
    ],
    41: 739,
    45: 255,
    46: 256,
    48: [
      1,
      257
    ],
    52: 258,
    53: 259,
    55: [
      1,
      270
    ],
    56: 271,
    59: [
      1,
      278
    ],
    60: [
      1,
      279
    ],
    68: 283,
    69: 284,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      285
    ],
    88: [
      1,
      274
    ],
    89: 272,
    90: [
      1,
      281
    ],
    91: [
      1,
      282
    ],
    92: [
      1,
      273
    ],
    93: [
      1,
      275
    ],
    94: [
      1,
      276
    ],
    95: [
      1,
      277
    ]
  },
  {
    2: [
      1,
      267
    ],
    10: 280,
    14: 260,
    15: 261,
    16: 262,
    17: 263,
    18: 264,
    19: 265,
    20: 266,
    39: [
      1,
      269
    ],
    40: [
      1,
      268
    ],
    41: 740,
    45: 255,
    46: 256,
    48: [
      1,
      257
    ],
    52: 258,
    53: 259,
    55: [
      1,
      270
    ],
    56: 271,
    59: [
      1,
      278
    ],
    60: [
      1,
      279
    ],
    68: 283,
    69: 284,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      285
    ],
    88: [
      1,
      274
    ],
    89: 272,
    90: [
      1,
      281
    ],
    91: [
      1,
      282
    ],
    92: [
      1,
      273
    ],
    93: [
      1,
      275
    ],
    94: [
      1,
      276
    ],
    95: [
      1,
      277
    ]
  },
  __expand__($Vv, [
      2,
      46
    ], {51:[
      2,
      46
    ]
  }),
  __expand__($Vv, [
      2,
      47
    ], {51:[
      2,
      47
    ]
  }),
  __expand__($Vv, [
      2,
      48
    ], {51:[
      2,
      48
    ]
  }),
  {
    2: [
      1,
      267
    ],
    10: 280,
    14: 260,
    15: 261,
    16: 262,
    17: 263,
    18: 264,
    19: 265,
    20: 266,
    39: [
      1,
      269
    ],
    40: [
      1,
      268
    ],
    45: 741,
    46: 256,
    48: [
      1,
      257
    ],
    52: 258,
    53: 259,
    55: [
      1,
      270
    ],
    56: 271,
    59: [
      1,
      278
    ],
    60: [
      1,
      279
    ],
    68: 283,
    69: 284,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      285
    ],
    88: [
      1,
      274
    ],
    89: 272,
    90: [
      1,
      281
    ],
    91: [
      1,
      282
    ],
    92: [
      1,
      273
    ],
    93: [
      1,
      275
    ],
    94: [
      1,
      276
    ],
    95: [
      1,
      277
    ]
  },
  __expand__($Vv, [
      2,
      45
    ], {51:[
      2,
      45
    ]
  }),
  __expand__($Vw, [
      2,
      105
    ], {51:[
      2,
      105
    ]
  }),
  __expand__($Vw, [
      2,
      106
    ], {51:[
      2,
      106
    ]
  }),
  __expand__($Vw, [
      2,
      109
    ], {51:[
      2,
      109
    ]
  }),
  __expand__($Vw, [
      2,
      107
    ], {51:[
      2,
      107
    ]
  }),
  __expand__($Vw, [
      2,
      60
    ], {51:[
      2,
      60
    ]
  }),
  __expand__($Vy, [
      2,
      110
    ], {88:[
      2,
      110
    ]
  }),
  __expand__($Vw, [
      2,
      116
    ], {51:[
      2,
      116
    ]
  }),
  __expand__($Vw, [
      2,
      63
    ], {51:[
      2,
      63
    ]
  }),
  __expand__($Vw, [
      2,
      64
    ], {51:[
      2,
      64
    ]
  }),
  __expand__($Vw, [
      2,
      61
    ], {51:[
      2,
      61
    ]
  }),
  __expand__($Vy, [
      2,
      111
    ], {88:[
      2,
      111
    ]
  }),
  __expand__($Vw, [
      2,
      117
    ], {51:[
      2,
      117
    ]
  }),
  __expand__($Vw, [
      2,
      62
    ], {51:[
      2,
      62
    ]
  }),
  {
    2: [
      1,
      746
    ],
    58: 742,
    63: 743,
    64: [
      1,
      744
    ],
    65: [
      1,
      745
    ]
  },
  __expand__($Vw, [
      2,
      108
    ], {51:[
      2,
      108
    ]
  }),
  {
    89: 747,
    90: [
      1,
      497
    ],
    91: [
      1,
      498
    ]
  },
  {
    89: 748,
    90: [
      1,
      497
    ],
    91: [
      1,
      498
    ]
  },
  __expand__($Vw, [
      2,
      112
    ], {51:[
      2,
      112
    ]
  }),
  __expand__($Vw, [
      2,
      113
    ], {51:[
      2,
      113
    ]
  }),
  __expand__($Vw, [
      2,
      114
    ], {51:[
      2,
      114
    ]
  }),
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:749,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  {
    62: [
      1,
      750
    ]
  },
  __expand__($Vx, [
      2,
      77
    ], {57:[
      2,
      77
    ]
  }),
  {
    2: [
      1,
      304
    ],
    10: 317,
    14: 297,
    15: 298,
    16: 299,
    17: 300,
    18: 301,
    19: 302,
    20: 303,
    29: 751,
    39: [
      1,
      306
    ],
    40: [
      1,
      305
    ],
    41: 291,
    45: 292,
    46: 293,
    48: [
      1,
      294
    ],
    52: 295,
    53: 296,
    55: [
      1,
      307
    ],
    56: 308,
    59: [
      1,
      315
    ],
    60: [
      1,
      316
    ],
    68: 320,
    69: 321,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      322
    ],
    88: [
      1,
      311
    ],
    89: 309,
    90: [
      1,
      318
    ],
    91: [
      1,
      319
    ],
    92: [
      1,
      310
    ],
    93: [
      1,
      312
    ],
    94: [
      1,
      313
    ],
    95: [
      1,
      314
    ]
  },
  {
    2: [
      1,
      304
    ],
    10: 317,
    14: 297,
    15: 298,
    16: 299,
    17: 300,
    18: 301,
    19: 302,
    20: 303,
    29: 752,
    39: [
      1,
      306
    ],
    40: [
      1,
      305
    ],
    41: 291,
    45: 292,
    46: 293,
    48: [
      1,
      294
    ],
    52: 295,
    53: 296,
    55: [
      1,
      307
    ],
    56: 308,
    59: [
      1,
      315
    ],
    60: [
      1,
      316
    ],
    68: 320,
    69: 321,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      322
    ],
    88: [
      1,
      311
    ],
    89: 309,
    90: [
      1,
      318
    ],
    91: [
      1,
      319
    ],
    92: [
      1,
      310
    ],
    93: [
      1,
      312
    ],
    94: [
      1,
      313
    ],
    95: [
      1,
      314
    ]
  },
  {
    2: [
      1,
      304
    ],
    10: 317,
    14: 297,
    15: 298,
    16: 299,
    17: 300,
    18: 301,
    19: 302,
    20: 303,
    39: [
      1,
      306
    ],
    40: [
      1,
      305
    ],
    41: 753,
    45: 292,
    46: 293,
    48: [
      1,
      294
    ],
    52: 295,
    53: 296,
    55: [
      1,
      307
    ],
    56: 308,
    59: [
      1,
      315
    ],
    60: [
      1,
      316
    ],
    68: 320,
    69: 321,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      322
    ],
    88: [
      1,
      311
    ],
    89: 309,
    90: [
      1,
      318
    ],
    91: [
      1,
      319
    ],
    92: [
      1,
      310
    ],
    93: [
      1,
      312
    ],
    94: [
      1,
      313
    ],
    95: [
      1,
      314
    ]
  },
  {
    2: [
      1,
      304
    ],
    10: 317,
    14: 297,
    15: 298,
    16: 299,
    17: 300,
    18: 301,
    19: 302,
    20: 303,
    39: [
      1,
      306
    ],
    40: [
      1,
      305
    ],
    41: 754,
    45: 292,
    46: 293,
    48: [
      1,
      294
    ],
    52: 295,
    53: 296,
    55: [
      1,
      307
    ],
    56: 308,
    59: [
      1,
      315
    ],
    60: [
      1,
      316
    ],
    68: 320,
    69: 321,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      322
    ],
    88: [
      1,
      311
    ],
    89: 309,
    90: [
      1,
      318
    ],
    91: [
      1,
      319
    ],
    92: [
      1,
      310
    ],
    93: [
      1,
      312
    ],
    94: [
      1,
      313
    ],
    95: [
      1,
      314
    ]
  },
  {
    2: [
      1,
      304
    ],
    10: 317,
    14: 297,
    15: 298,
    16: 299,
    17: 300,
    18: 301,
    19: 302,
    20: 303,
    39: [
      1,
      306
    ],
    40: [
      1,
      305
    ],
    41: 755,
    45: 292,
    46: 293,
    48: [
      1,
      294
    ],
    52: 295,
    53: 296,
    55: [
      1,
      307
    ],
    56: 308,
    59: [
      1,
      315
    ],
    60: [
      1,
      316
    ],
    68: 320,
    69: 321,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      322
    ],
    88: [
      1,
      311
    ],
    89: 309,
    90: [
      1,
      318
    ],
    91: [
      1,
      319
    ],
    92: [
      1,
      310
    ],
    93: [
      1,
      312
    ],
    94: [
      1,
      313
    ],
    95: [
      1,
      314
    ]
  },
  __expand__($VA, [
      2,
      46
    ], {51:[
      2,
      46
    ]
  }),
  __expand__($VA, [
      2,
      47
    ], {51:[
      2,
      47
    ]
  }),
  __expand__($VA, [
      2,
      48
    ], {51:[
      2,
      48
    ]
  }),
  {
    2: [
      1,
      304
    ],
    10: 317,
    14: 297,
    15: 298,
    16: 299,
    17: 300,
    18: 301,
    19: 302,
    20: 303,
    39: [
      1,
      306
    ],
    40: [
      1,
      305
    ],
    45: 756,
    46: 293,
    48: [
      1,
      294
    ],
    52: 295,
    53: 296,
    55: [
      1,
      307
    ],
    56: 308,
    59: [
      1,
      315
    ],
    60: [
      1,
      316
    ],
    68: 320,
    69: 321,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      322
    ],
    88: [
      1,
      311
    ],
    89: 309,
    90: [
      1,
      318
    ],
    91: [
      1,
      319
    ],
    92: [
      1,
      310
    ],
    93: [
      1,
      312
    ],
    94: [
      1,
      313
    ],
    95: [
      1,
      314
    ]
  },
  __expand__($VA, [
      2,
      45
    ], {51:[
      2,
      45
    ]
  }),
  __expand__($VB, [
      2,
      105
    ], {51:[
      2,
      105
    ]
  }),
  __expand__($VB, [
      2,
      106
    ], {51:[
      2,
      106
    ]
  }),
  __expand__($VB, [
      2,
      109
    ], {51:[
      2,
      109
    ]
  }),
  __expand__($VB, [
      2,
      107
    ], {51:[
      2,
      107
    ]
  }),
  __expand__($VB, [
      2,
      60
    ], {51:[
      2,
      60
    ]
  }),
  __expand__($VD, [
      2,
      110
    ], {88:[
      2,
      110
    ]
  }),
  __expand__($VB, [
      2,
      116
    ], {51:[
      2,
      116
    ]
  }),
  __expand__($VB, [
      2,
      63
    ], {51:[
      2,
      63
    ]
  }),
  __expand__($VB, [
      2,
      64
    ], {51:[
      2,
      64
    ]
  }),
  __expand__($VB, [
      2,
      61
    ], {51:[
      2,
      61
    ]
  }),
  __expand__($VD, [
      2,
      111
    ], {88:[
      2,
      111
    ]
  }),
  __expand__($VB, [
      2,
      117
    ], {51:[
      2,
      117
    ]
  }),
  __expand__($VB, [
      2,
      62
    ], {51:[
      2,
      62
    ]
  }),
  {
    2: [
      1,
      761
    ],
    58: 757,
    63: 758,
    64: [
      1,
      759
    ],
    65: [
      1,
      760
    ]
  },
  __expand__($VB, [
      2,
      108
    ], {51:[
      2,
      108
    ]
  }),
  {
    89: 762,
    90: [
      1,
      530
    ],
    91: [
      1,
      531
    ]
  },
  {
    89: 763,
    90: [
      1,
      530
    ],
    91: [
      1,
      531
    ]
  },
  __expand__($VB, [
      2,
      112
    ], {51:[
      2,
      112
    ]
  }),
  __expand__($VB, [
      2,
      113
    ], {51:[
      2,
      113
    ]
  }),
  __expand__($VB, [
      2,
      114
    ], {51:[
      2,
      114
    ]
  }),
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:764,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  {
    62: [
      1,
      765
    ]
  },
  __expand__($VC, [
      2,
      77
    ], {57:[
      2,
      77
    ]
  }),
  {
    2: [
      1,
      331
    ],
    58: 766,
    63: 328,
    64: [
      1,
      329
    ],
    65: [
      1,
      330
    ]
  },
  {
    2: [
      1,
      785
    ],
    7: 767,
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    23: 768,
    26: 769,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:804,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  __expand__($V7, [
      2,
      67
    ], {57:[
      2,
      67
    ]
  }),
  __expand__($V9, [
      2,
      100
    ], {7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,84:805,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  {
    2: [
      1,
      807
    ],
    12: 806,
    76: 339,
    77: 342,
    78: [
      1,
      346
    ],
    82: 341,
    83: [
      1,
      345
    ]
  },
  {
    2: [
      1,
      360
    ],
    10: 373,
    14: 353,
    15: 354,
    16: 355,
    17: 356,
    18: 357,
    19: 358,
    20: 359,
    23: 808,
    26: 340,
    29: 343,
    32: 344,
    39: [
      1,
      362
    ],
    40: [
      1,
      361
    ],
    41: 347,
    45: 348,
    46: 349,
    48: [
      1,
      350
    ],
    52: 351,
    53: 352,
    55: [
      1,
      363
    ],
    56: 364,
    59: [
      1,
      371
    ],
    60: [
      1,
      372
    ],
    68: 376,
    69: 377,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      378
    ],
    88: [
      1,
      367
    ],
    89: 365,
    90: [
      1,
      374
    ],
    91: [
      1,
      375
    ],
    92: [
      1,
      366
    ],
    93: [
      1,
      368
    ],
    94: [
      1,
      369
    ],
    95: [
      1,
      370
    ]
  },
  {
    2: [
      1,
      360
    ],
    10: 373,
    14: 353,
    15: 354,
    16: 355,
    17: 356,
    18: 357,
    19: 358,
    20: 359,
    23: 809,
    26: 340,
    29: 343,
    32: 344,
    39: [
      1,
      362
    ],
    40: [
      1,
      361
    ],
    41: 347,
    45: 348,
    46: 349,
    48: [
      1,
      350
    ],
    52: 351,
    53: 352,
    55: [
      1,
      363
    ],
    56: 364,
    59: [
      1,
      371
    ],
    60: [
      1,
      372
    ],
    68: 376,
    69: 377,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      378
    ],
    88: [
      1,
      367
    ],
    89: 365,
    90: [
      1,
      374
    ],
    91: [
      1,
      375
    ],
    92: [
      1,
      366
    ],
    93: [
      1,
      368
    ],
    94: [
      1,
      369
    ],
    95: [
      1,
      370
    ]
  },
  {
    2: [
      1,
      360
    ],
    10: 373,
    14: 353,
    15: 354,
    16: 355,
    17: 356,
    18: 357,
    19: 358,
    20: 359,
    26: 810,
    29: 343,
    32: 344,
    39: [
      1,
      362
    ],
    40: [
      1,
      361
    ],
    41: 347,
    45: 348,
    46: 349,
    48: [
      1,
      350
    ],
    52: 351,
    53: 352,
    55: [
      1,
      363
    ],
    56: 364,
    59: [
      1,
      371
    ],
    60: [
      1,
      372
    ],
    68: 376,
    69: 377,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      378
    ],
    88: [
      1,
      367
    ],
    89: 365,
    90: [
      1,
      374
    ],
    91: [
      1,
      375
    ],
    92: [
      1,
      366
    ],
    93: [
      1,
      368
    ],
    94: [
      1,
      369
    ],
    95: [
      1,
      370
    ]
  },
  {
    2: [
      1,
      360
    ],
    10: 373,
    14: 353,
    15: 354,
    16: 355,
    17: 356,
    18: 357,
    19: 358,
    20: 359,
    26: 811,
    29: 343,
    32: 344,
    39: [
      1,
      362
    ],
    40: [
      1,
      361
    ],
    41: 347,
    45: 348,
    46: 349,
    48: [
      1,
      350
    ],
    52: 351,
    53: 352,
    55: [
      1,
      363
    ],
    56: 364,
    59: [
      1,
      371
    ],
    60: [
      1,
      372
    ],
    68: 376,
    69: 377,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      378
    ],
    88: [
      1,
      367
    ],
    89: 365,
    90: [
      1,
      374
    ],
    91: [
      1,
      375
    ],
    92: [
      1,
      366
    ],
    93: [
      1,
      368
    ],
    94: [
      1,
      369
    ],
    95: [
      1,
      370
    ]
  },
  {
    2: [
      1,
      360
    ],
    10: 373,
    14: 353,
    15: 354,
    16: 355,
    17: 356,
    18: 357,
    19: 358,
    20: 359,
    26: 812,
    29: 343,
    32: 344,
    39: [
      1,
      362
    ],
    40: [
      1,
      361
    ],
    41: 347,
    45: 348,
    46: 349,
    48: [
      1,
      350
    ],
    52: 351,
    53: 352,
    55: [
      1,
      363
    ],
    56: 364,
    59: [
      1,
      371
    ],
    60: [
      1,
      372
    ],
    68: 376,
    69: 377,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      378
    ],
    88: [
      1,
      367
    ],
    89: 365,
    90: [
      1,
      374
    ],
    91: [
      1,
      375
    ],
    92: [
      1,
      366
    ],
    93: [
      1,
      368
    ],
    94: [
      1,
      369
    ],
    95: [
      1,
      370
    ]
  },
  {
    2: [
      1,
      360
    ],
    10: 373,
    14: 353,
    15: 354,
    16: 355,
    17: 356,
    18: 357,
    19: 358,
    20: 359,
    26: 813,
    29: 343,
    32: 344,
    39: [
      1,
      362
    ],
    40: [
      1,
      361
    ],
    41: 347,
    45: 348,
    46: 349,
    48: [
      1,
      350
    ],
    52: 351,
    53: 352,
    55: [
      1,
      363
    ],
    56: 364,
    59: [
      1,
      371
    ],
    60: [
      1,
      372
    ],
    68: 376,
    69: 377,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      378
    ],
    88: [
      1,
      367
    ],
    89: 365,
    90: [
      1,
      374
    ],
    91: [
      1,
      375
    ],
    92: [
      1,
      366
    ],
    93: [
      1,
      368
    ],
    94: [
      1,
      369
    ],
    95: [
      1,
      370
    ]
  },
  {
    2: [
      1,
      360
    ],
    10: 373,
    14: 353,
    15: 354,
    16: 355,
    17: 356,
    18: 357,
    19: 358,
    20: 359,
    26: 814,
    29: 343,
    32: 344,
    39: [
      1,
      362
    ],
    40: [
      1,
      361
    ],
    41: 347,
    45: 348,
    46: 349,
    48: [
      1,
      350
    ],
    52: 351,
    53: 352,
    55: [
      1,
      363
    ],
    56: 364,
    59: [
      1,
      371
    ],
    60: [
      1,
      372
    ],
    68: 376,
    69: 377,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      378
    ],
    88: [
      1,
      367
    ],
    89: 365,
    90: [
      1,
      374
    ],
    91: [
      1,
      375
    ],
    92: [
      1,
      366
    ],
    93: [
      1,
      368
    ],
    94: [
      1,
      369
    ],
    95: [
      1,
      370
    ]
  },
  {
    2: [
      1,
      829
    ],
    10: 842,
    14: 822,
    15: 823,
    16: 824,
    17: 825,
    18: 826,
    19: 827,
    20: 828,
    29: 815,
    39: [
      1,
      831
    ],
    40: [
      1,
      830
    ],
    41: 816,
    45: 817,
    46: 818,
    48: [
      1,
      819
    ],
    52: 820,
    53: 821,
    55: [
      1,
      832
    ],
    56: 833,
    59: [
      1,
      840
    ],
    60: [
      1,
      841
    ],
    68: 845,
    69: 846,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      847
    ],
    88: [
      1,
      836
    ],
    89: 834,
    90: [
      1,
      843
    ],
    91: [
      1,
      844
    ],
    92: [
      1,
      835
    ],
    93: [
      1,
      837
    ],
    94: [
      1,
      838
    ],
    95: [
      1,
      839
    ]
  },
  {
    2: [
      1,
      360
    ],
    10: 373,
    14: 353,
    15: 354,
    16: 355,
    17: 356,
    18: 357,
    19: 358,
    20: 359,
    29: 848,
    39: [
      1,
      362
    ],
    40: [
      1,
      361
    ],
    41: 347,
    45: 348,
    46: 349,
    48: [
      1,
      350
    ],
    52: 351,
    53: 352,
    55: [
      1,
      363
    ],
    56: 364,
    59: [
      1,
      371
    ],
    60: [
      1,
      372
    ],
    68: 376,
    69: 377,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      378
    ],
    88: [
      1,
      367
    ],
    89: 365,
    90: [
      1,
      374
    ],
    91: [
      1,
      375
    ],
    92: [
      1,
      366
    ],
    93: [
      1,
      368
    ],
    94: [
      1,
      369
    ],
    95: [
      1,
      370
    ]
  },
  {
    2: [
      1,
      360
    ],
    10: 373,
    14: 353,
    15: 354,
    16: 355,
    17: 356,
    18: 357,
    19: 358,
    20: 359,
    29: 849,
    39: [
      1,
      362
    ],
    40: [
      1,
      361
    ],
    41: 347,
    45: 348,
    46: 349,
    48: [
      1,
      350
    ],
    52: 351,
    53: 352,
    55: [
      1,
      363
    ],
    56: 364,
    59: [
      1,
      371
    ],
    60: [
      1,
      372
    ],
    68: 376,
    69: 377,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      378
    ],
    88: [
      1,
      367
    ],
    89: 365,
    90: [
      1,
      374
    ],
    91: [
      1,
      375
    ],
    92: [
      1,
      366
    ],
    93: [
      1,
      368
    ],
    94: [
      1,
      369
    ],
    95: [
      1,
      370
    ]
  },
  {
    2: [
      1,
      865
    ],
    10: 878,
    14: 858,
    15: 859,
    16: 860,
    17: 861,
    18: 862,
    19: 863,
    20: 864,
    29: 851,
    32: 850,
    39: [
      1,
      867
    ],
    40: [
      1,
      866
    ],
    41: 852,
    45: 853,
    46: 854,
    48: [
      1,
      855
    ],
    52: 856,
    53: 857,
    55: [
      1,
      868
    ],
    56: 869,
    59: [
      1,
      876
    ],
    60: [
      1,
      877
    ],
    68: 881,
    69: 882,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      883
    ],
    88: [
      1,
      872
    ],
    89: 870,
    90: [
      1,
      879
    ],
    91: [
      1,
      880
    ],
    92: [
      1,
      871
    ],
    93: [
      1,
      873
    ],
    94: [
      1,
      874
    ],
    95: [
      1,
      875
    ]
  },
  {
    2: [
      1,
      865
    ],
    10: 878,
    14: 858,
    15: 859,
    16: 860,
    17: 861,
    18: 862,
    19: 863,
    20: 864,
    29: 851,
    32: 884,
    39: [
      1,
      867
    ],
    40: [
      1,
      866
    ],
    41: 852,
    45: 853,
    46: 854,
    48: [
      1,
      855
    ],
    52: 856,
    53: 857,
    55: [
      1,
      868
    ],
    56: 869,
    59: [
      1,
      876
    ],
    60: [
      1,
      877
    ],
    68: 881,
    69: 882,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      883
    ],
    88: [
      1,
      872
    ],
    89: 870,
    90: [
      1,
      879
    ],
    91: [
      1,
      880
    ],
    92: [
      1,
      871
    ],
    93: [
      1,
      873
    ],
    94: [
      1,
      874
    ],
    95: [
      1,
      875
    ]
  },
  {
    2: [
      1,
      865
    ],
    10: 878,
    14: 858,
    15: 859,
    16: 860,
    17: 861,
    18: 862,
    19: 863,
    20: 864,
    29: 851,
    32: 885,
    39: [
      1,
      867
    ],
    40: [
      1,
      866
    ],
    41: 852,
    45: 853,
    46: 854,
    48: [
      1,
      855
    ],
    52: 856,
    53: 857,
    55: [
      1,
      868
    ],
    56: 869,
    59: [
      1,
      876
    ],
    60: [
      1,
      877
    ],
    68: 881,
    69: 882,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      883
    ],
    88: [
      1,
      872
    ],
    89: 870,
    90: [
      1,
      879
    ],
    91: [
      1,
      880
    ],
    92: [
      1,
      871
    ],
    93: [
      1,
      873
    ],
    94: [
      1,
      874
    ],
    95: [
      1,
      875
    ]
  },
  {
    2: [
      1,
      865
    ],
    10: 878,
    14: 858,
    15: 859,
    16: 860,
    17: 861,
    18: 862,
    19: 863,
    20: 864,
    29: 851,
    32: 886,
    39: [
      1,
      867
    ],
    40: [
      1,
      866
    ],
    41: 852,
    45: 853,
    46: 854,
    48: [
      1,
      855
    ],
    52: 856,
    53: 857,
    55: [
      1,
      868
    ],
    56: 869,
    59: [
      1,
      876
    ],
    60: [
      1,
      877
    ],
    68: 881,
    69: 882,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      883
    ],
    88: [
      1,
      872
    ],
    89: 870,
    90: [
      1,
      879
    ],
    91: [
      1,
      880
    ],
    92: [
      1,
      871
    ],
    93: [
      1,
      873
    ],
    94: [
      1,
      874
    ],
    95: [
      1,
      875
    ]
  },
  {
    2: [
      1,
      902
    ],
    10: 915,
    14: 895,
    15: 896,
    16: 897,
    17: 898,
    18: 899,
    19: 900,
    20: 901,
    29: 888,
    32: 887,
    39: [
      1,
      904
    ],
    40: [
      1,
      903
    ],
    41: 889,
    45: 890,
    46: 891,
    48: [
      1,
      892
    ],
    52: 893,
    53: 894,
    55: [
      1,
      905
    ],
    56: 906,
    59: [
      1,
      913
    ],
    60: [
      1,
      914
    ],
    68: 918,
    69: 919,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      920
    ],
    88: [
      1,
      909
    ],
    89: 907,
    90: [
      1,
      916
    ],
    91: [
      1,
      917
    ],
    92: [
      1,
      908
    ],
    93: [
      1,
      910
    ],
    94: [
      1,
      911
    ],
    95: [
      1,
      912
    ]
  },
  {
    80: [
      1,
      921
    ],
    81: [
      1,
      431
    ]
  },
  {
    2: [
      1,
      360
    ],
    10: 373,
    14: 353,
    15: 354,
    16: 355,
    17: 356,
    18: 357,
    19: 358,
    20: 359,
    39: [
      1,
      362
    ],
    40: [
      1,
      361
    ],
    41: 922,
    45: 348,
    46: 349,
    48: [
      1,
      350
    ],
    52: 351,
    53: 352,
    55: [
      1,
      363
    ],
    56: 364,
    59: [
      1,
      371
    ],
    60: [
      1,
      372
    ],
    68: 376,
    69: 377,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      378
    ],
    88: [
      1,
      367
    ],
    89: 365,
    90: [
      1,
      374
    ],
    91: [
      1,
      375
    ],
    92: [
      1,
      366
    ],
    93: [
      1,
      368
    ],
    94: [
      1,
      369
    ],
    95: [
      1,
      370
    ]
  },
  {
    2: [
      1,
      360
    ],
    10: 373,
    14: 353,
    15: 354,
    16: 355,
    17: 356,
    18: 357,
    19: 358,
    20: 359,
    39: [
      1,
      362
    ],
    40: [
      1,
      361
    ],
    41: 923,
    45: 348,
    46: 349,
    48: [
      1,
      350
    ],
    52: 351,
    53: 352,
    55: [
      1,
      363
    ],
    56: 364,
    59: [
      1,
      371
    ],
    60: [
      1,
      372
    ],
    68: 376,
    69: 377,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      378
    ],
    88: [
      1,
      367
    ],
    89: 365,
    90: [
      1,
      374
    ],
    91: [
      1,
      375
    ],
    92: [
      1,
      366
    ],
    93: [
      1,
      368
    ],
    94: [
      1,
      369
    ],
    95: [
      1,
      370
    ]
  },
  {
    2: [
      1,
      360
    ],
    10: 373,
    14: 353,
    15: 354,
    16: 355,
    17: 356,
    18: 357,
    19: 358,
    20: 359,
    39: [
      1,
      362
    ],
    40: [
      1,
      361
    ],
    41: 924,
    45: 348,
    46: 349,
    48: [
      1,
      350
    ],
    52: 351,
    53: 352,
    55: [
      1,
      363
    ],
    56: 364,
    59: [
      1,
      371
    ],
    60: [
      1,
      372
    ],
    68: 376,
    69: 377,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      378
    ],
    88: [
      1,
      367
    ],
    89: 365,
    90: [
      1,
      374
    ],
    91: [
      1,
      375
    ],
    92: [
      1,
      366
    ],
    93: [
      1,
      368
    ],
    94: [
      1,
      369
    ],
    95: [
      1,
      370
    ]
  },
  __expand__($VL, [
      2,
      46
    ], {81:[
      2,
      46
    ]
  }),
  __expand__($VL, [
      2,
      47
    ], {81:[
      2,
      47
    ]
  }),
  __expand__($VL, [
      2,
      48
    ], {81:[
      2,
      48
    ]
  }),
  {
    2: [
      1,
      360
    ],
    10: 373,
    14: 353,
    15: 354,
    16: 355,
    17: 356,
    18: 357,
    19: 358,
    20: 359,
    39: [
      1,
      362
    ],
    40: [
      1,
      361
    ],
    45: 925,
    46: 349,
    48: [
      1,
      350
    ],
    52: 351,
    53: 352,
    55: [
      1,
      363
    ],
    56: 364,
    59: [
      1,
      371
    ],
    60: [
      1,
      372
    ],
    68: 376,
    69: 377,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      378
    ],
    88: [
      1,
      367
    ],
    89: 365,
    90: [
      1,
      374
    ],
    91: [
      1,
      375
    ],
    92: [
      1,
      366
    ],
    93: [
      1,
      368
    ],
    94: [
      1,
      369
    ],
    95: [
      1,
      370
    ]
  },
  __expand__($VL, [
      2,
      45
    ], {81:[
      2,
      45
    ]
  }),
  __expand__($Vh, [
      2,
      105
    ], {81:[
      2,
      105
    ]
  }),
  __expand__($Vh, [
      2,
      106
    ], {81:[
      2,
      106
    ]
  }),
  __expand__($Vh, [
      2,
      109
    ], {81:[
      2,
      109
    ]
  }),
  __expand__($Vh, [
      2,
      107
    ], {81:[
      2,
      107
    ]
  }),
  __expand__($Vh, [
      2,
      60
    ], {81:[
      2,
      60
    ]
  }),
  __expand__($VM, [
      2,
      110
    ], {88:[
      2,
      110
    ]
  }),
  __expand__($Vh, [
      2,
      116
    ], {81:[
      2,
      116
    ]
  }),
  __expand__($Vh, [
      2,
      63
    ], {81:[
      2,
      63
    ]
  }),
  __expand__($Vh, [
      2,
      64
    ], {81:[
      2,
      64
    ]
  }),
  __expand__($Vh, [
      2,
      61
    ], {81:[
      2,
      61
    ]
  }),
  __expand__($VM, [
      2,
      111
    ], {88:[
      2,
      111
    ]
  }),
  __expand__($Vh, [
      2,
      117
    ], {81:[
      2,
      117
    ]
  }),
  __expand__($Vh, [
      2,
      62
    ], {81:[
      2,
      62
    ]
  }),
  {
    2: [
      1,
      930
    ],
    58: 926,
    63: 927,
    64: [
      1,
      928
    ],
    65: [
      1,
      929
    ]
  },
  __expand__($Vh, [
      2,
      108
    ], {81:[
      2,
      108
    ]
  }),
  {
    89: 931,
    90: [
      1,
      583
    ],
    91: [
      1,
      584
    ]
  },
  {
    89: 932,
    90: [
      1,
      583
    ],
    91: [
      1,
      584
    ]
  },
  __expand__($Vh, [
      2,
      112
    ], {81:[
      2,
      112
    ]
  }),
  __expand__($Vh, [
      2,
      113
    ], {81:[
      2,
      113
    ]
  }),
  __expand__($Vh, [
      2,
      114
    ], {81:[
      2,
      114
    ]
  }),
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:933,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  {
    62: [
      1,
      934
    ]
  },
  __expand__($VN, [
      2,
      77
    ], {81:[
      2,
      77
    ]
  }),
  {
    74: [
      2,
      79
    ]
  },
  {
    74: [
      2,
      80
    ]
  },
  __expand__($Va, [
      2,
      21
    ], {62:[
      2,
      21
    ]
  }),
  __expand__($Va, [
      2,
      22
    ], {62:[
      2,
      22
    ]
  }),
  __expand__($Vc, [
      2,
      24
    ], {62:[
      2,
      24
    ]
  }),
  __expand__($Vc, [
      2,
      25
    ], {62:[
      2,
      25
    ]
  }),
  __expand__($Vc, [
      2,
      27
    ], {62:[
      2,
      27
    ]
  }),
  __expand__($Vc, [
      2,
      32
    ], {62:[
      2,
      32
    ]
  }),
  __expand__($Vc, [
      2,
      33
    ], {62:[
      2,
      33
    ]
  }),
  __expand__($Vc, [
      2,
      26
    ], {39:[
      1,
      935
    ],40:[
      1,
      936
    ],62:[
      2,
      26
    ]
  }),
  __expand__($VO, [
      2,
      39
    ], {42:[
      1,
      937
    ],43:[
      1,
      938
    ],44:[
      1,
      939
    ],62:[
      2,
      39
    ]
  }),
  __expand__($VP, [
      2,
      43
    ], {49:[
      1,
      940
    ],50:[
      1,
      941
    ],51:[
      1,
      942
    ],62:[
      2,
      43
    ]
  }),
  __expand__($VQ, [
      2,
      49
    ], {47:[
      1,
      943
    ],62:[
      2,
      49
    ]
  }),
  {
    2: [
      1,
      611
    ],
    10: 624,
    14: 604,
    15: 605,
    16: 606,
    17: 607,
    18: 608,
    19: 609,
    20: 610,
    39: [
      1,
      613
    ],
    40: [
      1,
      612
    ],
    45: 944,
    46: 600,
    48: [
      1,
      601
    ],
    52: 602,
    53: 603,
    55: [
      1,
      614
    ],
    56: 615,
    59: [
      1,
      622
    ],
    60: [
      1,
      623
    ],
    68: 627,
    69: 628,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      629
    ],
    88: [
      1,
      618
    ],
    89: 616,
    90: [
      1,
      625
    ],
    91: [
      1,
      626
    ],
    92: [
      1,
      617
    ],
    93: [
      1,
      619
    ],
    94: [
      1,
      620
    ],
    95: [
      1,
      621
    ]
  },
  __expand__($VR, [
      2,
      50
    ], {62:[
      2,
      50
    ]
  }),
  __expand__($VR, [
      2,
      51
    ], {62:[
      2,
      51
    ]
  }),
  __expand__($VS, [
      2,
      52
    ], {85:[
      1,
      946
    ],86:[
      1,
      945
    ],87:[
      1,
      948
    ],88:[
      1,
      947
    ]
  }),
  __expand__($VR, [
      2,
      53
    ], {62:[
      2,
      53
    ]
  }),
  __expand__($VR, [
      2,
      54
    ], {62:[
      2,
      54
    ]
  }),
  __expand__($VR, [
      2,
      55
    ], {62:[
      2,
      55
    ]
  }),
  __expand__($VR, [
      2,
      56
    ], {62:[
      2,
      56
    ]
  }),
  __expand__($VR, [
      2,
      57
    ], {62:[
      2,
      57
    ]
  }),
  __expand__($VS, [
      2,
      58
    ], {55:[
      1,
      131
    ],70:130
  }),
  __expand__($VR, [
      2,
      59
    ], {62:[
      2,
      59
    ]
  }),
  {
    2: [
      1,
      953
    ],
    10: 624,
    20: 76,
    53: 952,
    54: 949,
    56: 615,
    59: [
      1,
      622
    ],
    60: [
      1,
      623
    ],
    68: 627,
    69: 628,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      629
    ],
    89: 950,
    90: [
      1,
      625
    ],
    91: [
      1,
      626
    ],
    92: [
      1,
      951
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      953
    ],
    10: 624,
    20: 76,
    53: 952,
    54: 954,
    56: 615,
    59: [
      1,
      622
    ],
    60: [
      1,
      623
    ],
    68: 627,
    69: 628,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      629
    ],
    89: 955,
    90: [
      1,
      625
    ],
    91: [
      1,
      626
    ],
    92: [
      1,
      956
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      953
    ],
    10: 624,
    20: 76,
    53: 952,
    54: 957,
    56: 615,
    59: [
      1,
      622
    ],
    60: [
      1,
      623
    ],
    68: 627,
    69: 628,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      629
    ],
    95: [
      1,
      78
    ]
  },
  __expand__($VR, [
      2,
      65
    ], {57:[
      1,
      958
    ],62:[
      2,
      65
    ]
  }),
  __expand__($VT, [
      2,
      112
    ], {88:[
      2,
      112
    ]
  }),
  __expand__($VR, [
      2,
      115
    ], {62:[
      2,
      115
    ]
  }),
  {
    14: 959,
    39: [
      1,
      961
    ],
    40: [
      1,
      960
    ],
    89: 962,
    90: [
      1,
      963
    ],
    91: [
      1,
      964
    ]
  },
  __expand__($VR, [
      2,
      118
    ], {62:[
      2,
      118
    ]
  }),
  __expand__($VR, [
      2,
      119
    ], {62:[
      2,
      119
    ]
  }),
  __expand__($VU, [
      2,
      120
    ], {62:[
      2,
      120
    ]
  }),
  {
    60: [
      1,
      965
    ]
  },
  {
    2: [
      1,
      169
    ],
    7: 966,
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    23: 152,
    26: 153,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      150
    ],
    73: [
      1,
      151
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  __expand__($VV, [
      2,
      69
    ], {62:[
      2,
      69
    ]
  }),
  __expand__($VT, [
      2,
      113
    ], {88:[
      2,
      113
    ]
  }),
  __expand__($VT, [
      2,
      114
    ], {88:[
      2,
      114
    ]
  }),
  __expand__($VV, [
      2,
      76
    ], {62:[
      2,
      76
    ]
  }),
  {
    68: 967,
    74: [
      1,
      629
    ]
  },
  __expand__($VV, [
      2,
      86
    ], {62:[
      2,
      86
    ]
  }),
  __expand__($Vd, [
      2,
      37
    ], {62:[
      2,
      37
    ]
  }),
  __expand__($Vd, [
      2,
      38
    ], {62:[
      2,
      38
    ]
  }),
  __expand__($Vc, [
      2,
      28
    ], {38:[
      1,
      968
    ],62:[
      2,
      28
    ]
  }),
  __expand__($VW, [
      2,
      36
    ], {39:[
      1,
      969
    ],40:[
      1,
      970
    ],62:[
      2,
      36
    ]
  }),
  __expand__($VX, [
      2,
      39
    ], {42:[
      1,
      971
    ],43:[
      1,
      972
    ],44:[
      1,
      973
    ],62:[
      2,
      39
    ]
  }),
  __expand__($VY, [
      2,
      43
    ], {49:[
      1,
      974
    ],50:[
      1,
      975
    ],51:[
      1,
      976
    ],62:[
      2,
      43
    ]
  }),
  __expand__($VZ, [
      2,
      49
    ], {47:[
      1,
      977
    ],62:[
      2,
      49
    ]
  }),
  {
    2: [
      1,
      647
    ],
    10: 660,
    14: 640,
    15: 641,
    16: 642,
    17: 643,
    18: 644,
    19: 645,
    20: 646,
    39: [
      1,
      649
    ],
    40: [
      1,
      648
    ],
    45: 978,
    46: 636,
    48: [
      1,
      637
    ],
    52: 638,
    53: 639,
    55: [
      1,
      650
    ],
    56: 651,
    59: [
      1,
      658
    ],
    60: [
      1,
      659
    ],
    68: 663,
    69: 664,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      665
    ],
    88: [
      1,
      654
    ],
    89: 652,
    90: [
      1,
      661
    ],
    91: [
      1,
      662
    ],
    92: [
      1,
      653
    ],
    93: [
      1,
      655
    ],
    94: [
      1,
      656
    ],
    95: [
      1,
      657
    ]
  },
  __expand__($V_, [
      2,
      50
    ], {62:[
      2,
      50
    ]
  }),
  __expand__($V_, [
      2,
      51
    ], {62:[
      2,
      51
    ]
  }),
  __expand__($V$, [
      2,
      52
    ], {85:[
      1,
      980
    ],86:[
      1,
      979
    ],87:[
      1,
      982
    ],88:[
      1,
      981
    ]
  }),
  __expand__($V_, [
      2,
      53
    ], {62:[
      2,
      53
    ]
  }),
  __expand__($V_, [
      2,
      54
    ], {62:[
      2,
      54
    ]
  }),
  __expand__($V_, [
      2,
      55
    ], {62:[
      2,
      55
    ]
  }),
  __expand__($V_, [
      2,
      56
    ], {62:[
      2,
      56
    ]
  }),
  __expand__($V_, [
      2,
      57
    ], {62:[
      2,
      57
    ]
  }),
  __expand__($V$, [
      2,
      58
    ], {55:[
      1,
      131
    ],70:130
  }),
  __expand__($V_, [
      2,
      59
    ], {62:[
      2,
      59
    ]
  }),
  {
    2: [
      1,
      987
    ],
    10: 660,
    20: 76,
    53: 986,
    54: 983,
    56: 651,
    59: [
      1,
      658
    ],
    60: [
      1,
      659
    ],
    68: 663,
    69: 664,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      665
    ],
    89: 984,
    90: [
      1,
      661
    ],
    91: [
      1,
      662
    ],
    92: [
      1,
      985
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      987
    ],
    10: 660,
    20: 76,
    53: 986,
    54: 988,
    56: 651,
    59: [
      1,
      658
    ],
    60: [
      1,
      659
    ],
    68: 663,
    69: 664,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      665
    ],
    89: 989,
    90: [
      1,
      661
    ],
    91: [
      1,
      662
    ],
    92: [
      1,
      990
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      987
    ],
    10: 660,
    20: 76,
    53: 986,
    54: 991,
    56: 651,
    59: [
      1,
      658
    ],
    60: [
      1,
      659
    ],
    68: 663,
    69: 664,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      665
    ],
    95: [
      1,
      78
    ]
  },
  __expand__($V_, [
      2,
      65
    ], {57:[
      1,
      992
    ],62:[
      2,
      65
    ]
  }),
  __expand__($V01, [
      2,
      112
    ], {88:[
      2,
      112
    ]
  }),
  __expand__($V_, [
      2,
      115
    ], {62:[
      2,
      115
    ]
  }),
  {
    14: 993,
    39: [
      1,
      995
    ],
    40: [
      1,
      994
    ],
    89: 996,
    90: [
      1,
      997
    ],
    91: [
      1,
      998
    ]
  },
  __expand__($V_, [
      2,
      118
    ], {62:[
      2,
      118
    ]
  }),
  __expand__($V_, [
      2,
      119
    ], {62:[
      2,
      119
    ]
  }),
  __expand__($V11, [
      2,
      120
    ], {62:[
      2,
      120
    ]
  }),
  {
    60: [
      1,
      999
    ]
  },
  {
    2: [
      1,
      169
    ],
    7: 1000,
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    23: 152,
    26: 153,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      150
    ],
    73: [
      1,
      151
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  __expand__($V21, [
      2,
      69
    ], {62:[
      2,
      69
    ]
  }),
  __expand__($V01, [
      2,
      113
    ], {88:[
      2,
      113
    ]
  }),
  __expand__($V01, [
      2,
      114
    ], {88:[
      2,
      114
    ]
  }),
  __expand__($V21, [
      2,
      76
    ], {62:[
      2,
      76
    ]
  }),
  {
    68: 1001,
    74: [
      1,
      665
    ]
  },
  __expand__($V21, [
      2,
      86
    ], {62:[
      2,
      86
    ]
  }),
  __expand__($Vc, [
      2,
      29
    ], {38:[
      1,
      968
    ],62:[
      2,
      29
    ]
  }),
  __expand__($Vc, [
      2,
      30
    ], {38:[
      1,
      968
    ],62:[
      2,
      30
    ]
  }),
  __expand__($Vc, [
      2,
      31
    ], {38:[
      1,
      968
    ],62:[
      2,
      31
    ]
  }),
  __expand__($Vb, [
      2,
      35
    ], {62:[
      2,
      35
    ]
  }),
  __expand__($Vb, [
      2,
      36
    ], {39:[
      1,
      1002
    ],40:[
      1,
      1003
    ],62:[
      2,
      36
    ]
  }),
  __expand__($V31, [
      2,
      39
    ], {42:[
      1,
      1004
    ],43:[
      1,
      1005
    ],44:[
      1,
      1006
    ],62:[
      2,
      39
    ]
  }),
  __expand__($V41, [
      2,
      43
    ], {49:[
      1,
      1007
    ],50:[
      1,
      1008
    ],51:[
      1,
      1009
    ],62:[
      2,
      43
    ]
  }),
  __expand__($V51, [
      2,
      49
    ], {47:[
      1,
      1010
    ],62:[
      2,
      49
    ]
  }),
  {
    2: [
      1,
      684
    ],
    10: 697,
    14: 677,
    15: 678,
    16: 679,
    17: 680,
    18: 681,
    19: 682,
    20: 683,
    39: [
      1,
      686
    ],
    40: [
      1,
      685
    ],
    45: 1011,
    46: 673,
    48: [
      1,
      674
    ],
    52: 675,
    53: 676,
    55: [
      1,
      687
    ],
    56: 688,
    59: [
      1,
      695
    ],
    60: [
      1,
      696
    ],
    68: 700,
    69: 701,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      702
    ],
    88: [
      1,
      691
    ],
    89: 689,
    90: [
      1,
      698
    ],
    91: [
      1,
      699
    ],
    92: [
      1,
      690
    ],
    93: [
      1,
      692
    ],
    94: [
      1,
      693
    ],
    95: [
      1,
      694
    ]
  },
  __expand__($V61, [
      2,
      50
    ], {62:[
      2,
      50
    ]
  }),
  __expand__($V61, [
      2,
      51
    ], {62:[
      2,
      51
    ]
  }),
  __expand__($V71, [
      2,
      52
    ], {85:[
      1,
      1013
    ],86:[
      1,
      1012
    ],87:[
      1,
      1015
    ],88:[
      1,
      1014
    ]
  }),
  __expand__($V61, [
      2,
      53
    ], {62:[
      2,
      53
    ]
  }),
  __expand__($V61, [
      2,
      54
    ], {62:[
      2,
      54
    ]
  }),
  __expand__($V61, [
      2,
      55
    ], {62:[
      2,
      55
    ]
  }),
  __expand__($V61, [
      2,
      56
    ], {62:[
      2,
      56
    ]
  }),
  __expand__($V61, [
      2,
      57
    ], {62:[
      2,
      57
    ]
  }),
  __expand__($V71, [
      2,
      58
    ], {55:[
      1,
      131
    ],70:130
  }),
  __expand__($V61, [
      2,
      59
    ], {62:[
      2,
      59
    ]
  }),
  {
    2: [
      1,
      1020
    ],
    10: 697,
    20: 76,
    53: 1019,
    54: 1016,
    56: 688,
    59: [
      1,
      695
    ],
    60: [
      1,
      696
    ],
    68: 700,
    69: 701,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      702
    ],
    89: 1017,
    90: [
      1,
      698
    ],
    91: [
      1,
      699
    ],
    92: [
      1,
      1018
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      1020
    ],
    10: 697,
    20: 76,
    53: 1019,
    54: 1021,
    56: 688,
    59: [
      1,
      695
    ],
    60: [
      1,
      696
    ],
    68: 700,
    69: 701,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      702
    ],
    89: 1022,
    90: [
      1,
      698
    ],
    91: [
      1,
      699
    ],
    92: [
      1,
      1023
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      1020
    ],
    10: 697,
    20: 76,
    53: 1019,
    54: 1024,
    56: 688,
    59: [
      1,
      695
    ],
    60: [
      1,
      696
    ],
    68: 700,
    69: 701,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      702
    ],
    95: [
      1,
      78
    ]
  },
  __expand__($V61, [
      2,
      65
    ], {57:[
      1,
      1025
    ],62:[
      2,
      65
    ]
  }),
  __expand__($V81, [
      2,
      112
    ], {88:[
      2,
      112
    ]
  }),
  __expand__($V61, [
      2,
      115
    ], {62:[
      2,
      115
    ]
  }),
  {
    14: 1026,
    39: [
      1,
      1028
    ],
    40: [
      1,
      1027
    ],
    89: 1029,
    90: [
      1,
      1030
    ],
    91: [
      1,
      1031
    ]
  },
  __expand__($V61, [
      2,
      118
    ], {62:[
      2,
      118
    ]
  }),
  __expand__($V61, [
      2,
      119
    ], {62:[
      2,
      119
    ]
  }),
  __expand__($V91, [
      2,
      120
    ], {62:[
      2,
      120
    ]
  }),
  {
    60: [
      1,
      1032
    ]
  },
  {
    2: [
      1,
      169
    ],
    7: 1033,
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    23: 152,
    26: 153,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      150
    ],
    73: [
      1,
      151
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  __expand__($Va1, [
      2,
      69
    ], {62:[
      2,
      69
    ]
  }),
  __expand__($V81, [
      2,
      113
    ], {88:[
      2,
      113
    ]
  }),
  __expand__($V81, [
      2,
      114
    ], {88:[
      2,
      114
    ]
  }),
  __expand__($Va1, [
      2,
      76
    ], {62:[
      2,
      76
    ]
  }),
  {
    68: 1034,
    74: [
      1,
      702
    ]
  },
  __expand__($Va1, [
      2,
      86
    ], {62:[
      2,
      86
    ]
  }),
  __expand__($Vb1, [
      2,
      40
    ], {44:[
      1,
      399
    ],62:[
      2,
      40
    ]
  }),
  __expand__($Vb1, [
      2,
      41
    ], {44:[
      1,
      399
    ],62:[
      2,
      41
    ]
  }),
  __expand__($Vb1, [
      2,
      42
    ], {44:[
      1,
      399
    ],62:[
      2,
      42
    ]
  }),
  __expand__($Vc1, [
      2,
      44
    ], {49:[
      1,
      400
    ],50:[
      1,
      401
    ],62:[
      2,
      44
    ]
  }),
  __expand__($Vg, [
      2,
      66
    ], {62:[
      2,
      66
    ]
  }),
  __expand__($Vh, [
      2,
      70
    ], {57:[
      1,
      1035
    ],66:[
      1,
      1036
    ]
  }),
  __expand__($VN, [
      2,
      72
    ], {66:[
      2,
      72
    ]
  }),
  {
    60: [
      1,
      1037
    ]
  },
  __expand__($VN, [
      2,
      75
    ], {66:[
      2,
      75
    ]
  }),
  __expand__($Vg, [
      2,
      110
    ], {62:[
      2,
      110
    ]
  }),
  __expand__($Vg, [
      2,
      111
    ], {62:[
      2,
      111
    ]
  }),
  {
    62: [
      1,
      1038
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($Vk, [
      2,
      68
    ], {62:[
      2,
      68
    ]
  }),
  {
    80: [
      2,
      91
    ],
    81: [
      2,
      91
    ]
  },
  __expand__($Vl, [
      2,
      87
    ], {81:[
      2,
      87
    ]
  }),
  __expand__($Vl, [
      2,
      88
    ], {81:[
      2,
      88
    ]
  }),
  __expand__($Vl, [
      2,
      90
    ], {81:[
      2,
      90
    ]
  }),
  __expand__($Vd1, [
      2,
      37
    ], {40:[
      2,
      37
    ]
  }),
  __expand__($Vd1, [
      2,
      38
    ], {40:[
      2,
      38
    ]
  }),
  __expand__($Ve1, [
      2,
      40
    ], {44:[
      1,
      439
    ]
  }),
  __expand__($Ve1, [
      2,
      41
    ], {44:[
      1,
      439
    ]
  }),
  __expand__($Ve1, [
      2,
      42
    ], {44:[
      1,
      439
    ]
  }),
  __expand__($Vo, [
      2,
      44
    ], {49:[
      1,
      440
    ],50:[
      1,
      441
    ],51:[
      2,
      44
    ]
  }),
  __expand__($Vq, [
      2,
      66
    ], {51:[
      2,
      66
    ]
  }),
  __expand__($Vr, [
      2,
      70
    ], {57:[
      1,
      1039
    ],66:[
      1,
      1040
    ]
  }),
  __expand__($Vf1, [
      2,
      72
    ], {66:[
      2,
      72
    ]
  }),
  {
    60: [
      1,
      1041
    ]
  },
  __expand__($Vf1, [
      2,
      75
    ], {66:[
      2,
      75
    ]
  }),
  __expand__($Vq, [
      2,
      110
    ], {51:[
      2,
      110
    ]
  }),
  __expand__($Vq, [
      2,
      111
    ], {51:[
      2,
      111
    ]
  }),
  {
    62: [
      1,
      1042
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($Vr, [
      2,
      68
    ], {57:[
      2,
      68
    ]
  }),
  __expand__($V3, [
      2,
      35
    ], {38:[
      2,
      35
    ]
  }),
  __expand__($Vg1, [
      2,
      37
    ], {40:[
      2,
      37
    ]
  }),
  __expand__($Vg1, [
      2,
      38
    ], {40:[
      2,
      38
    ]
  }),
  __expand__($Vh1, [
      2,
      40
    ], {44:[
      1,
      473
    ]
  }),
  __expand__($Vh1, [
      2,
      41
    ], {44:[
      1,
      473
    ]
  }),
  __expand__($Vh1, [
      2,
      42
    ], {44:[
      1,
      473
    ]
  }),
  __expand__($Vu, [
      2,
      44
    ], {49:[
      1,
      474
    ],50:[
      1,
      475
    ],51:[
      2,
      44
    ]
  }),
  __expand__($Vw, [
      2,
      66
    ], {51:[
      2,
      66
    ]
  }),
  __expand__($Vx, [
      2,
      70
    ], {57:[
      1,
      1043
    ],66:[
      1,
      1044
    ]
  }),
  __expand__($Vi1, [
      2,
      72
    ], {66:[
      2,
      72
    ]
  }),
  {
    60: [
      1,
      1045
    ]
  },
  __expand__($Vi1, [
      2,
      75
    ], {66:[
      2,
      75
    ]
  }),
  __expand__($Vw, [
      2,
      110
    ], {51:[
      2,
      110
    ]
  }),
  __expand__($Vw, [
      2,
      111
    ], {51:[
      2,
      111
    ]
  }),
  {
    62: [
      1,
      1046
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($Vx, [
      2,
      68
    ], {57:[
      2,
      68
    ]
  }),
  __expand__($Vj1, [
      2,
      37
    ], {40:[
      2,
      37
    ]
  }),
  __expand__($Vj1, [
      2,
      38
    ], {40:[
      2,
      38
    ]
  }),
  __expand__($Vk1, [
      2,
      40
    ], {44:[
      1,
      506
    ]
  }),
  __expand__($Vk1, [
      2,
      41
    ], {44:[
      1,
      506
    ]
  }),
  __expand__($Vk1, [
      2,
      42
    ], {44:[
      1,
      506
    ]
  }),
  __expand__($Vz, [
      2,
      44
    ], {49:[
      1,
      507
    ],50:[
      1,
      508
    ],51:[
      2,
      44
    ]
  }),
  __expand__($VB, [
      2,
      66
    ], {51:[
      2,
      66
    ]
  }),
  __expand__($VC, [
      2,
      70
    ], {57:[
      1,
      1047
    ],66:[
      1,
      1048
    ]
  }),
  __expand__($Vl1, [
      2,
      72
    ], {66:[
      2,
      72
    ]
  }),
  {
    60: [
      1,
      1049
    ]
  },
  __expand__($Vl1, [
      2,
      75
    ], {66:[
      2,
      75
    ]
  }),
  __expand__($VB, [
      2,
      110
    ], {51:[
      2,
      110
    ]
  }),
  __expand__($VB, [
      2,
      111
    ], {51:[
      2,
      111
    ]
  }),
  {
    62: [
      1,
      1050
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($VC, [
      2,
      68
    ], {57:[
      2,
      68
    ]
  }),
  __expand__($V6, [
      2,
      71
    ], {51:[
      2,
      71
    ]
  }),
  {
    67: [
      1,
      1051
    ]
  },
  {
    24: [
      1,
      1052
    ],
    25: [
      1,
      1053
    ],
    67: [
      2,
      20
    ]
  },
  __expand__($Va, [
      2,
      23
    ], {6:[
      1,
      1057
    ],27:[
      1,
      1054
    ],28:[
      1,
      1055
    ],31:[
      1,
      1056
    ],37:[
      1,
      1058
    ],67:[
      2,
      23
    ]
  }),
  __expand__($Vb, [
      2,
      36
    ], {30:[
      1,
      1059
    ],39:[
      1,
      1060
    ],40:[
      1,
      1061
    ],67:[
      2,
      36
    ]
  }),
  __expand__($Vc, [
      2,
      34
    ], {33:[
      1,
      1062
    ],34:[
      1,
      1063
    ],35:[
      1,
      1064
    ],36:[
      1,
      1065
    ],38:[
      1,
      1066
    ],67:[
      2,
      34
    ]
  }),
  __expand__($Vd, [
      2,
      39
    ], {42:[
      1,
      1067
    ],43:[
      1,
      1068
    ],44:[
      1,
      1069
    ],67:[
      2,
      39
    ]
  }),
  __expand__($Ve, [
      2,
      43
    ], {49:[
      1,
      1070
    ],50:[
      1,
      1071
    ],51:[
      1,
      1072
    ],67:[
      2,
      43
    ]
  }),
  __expand__($Vf, [
      2,
      49
    ], {47:[
      1,
      1073
    ],67:[
      2,
      49
    ]
  }),
  {
    2: [
      1,
      785
    ],
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    45: 1074,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  __expand__($Vg, [
      2,
      50
    ], {67:[
      2,
      50
    ]
  }),
  __expand__($Vg, [
      2,
      51
    ], {67:[
      2,
      51
    ]
  }),
  __expand__($Vm1, [
      2,
      52
    ], {85:[
      1,
      1076
    ],86:[
      1,
      1075
    ],87:[
      1,
      1078
    ],88:[
      1,
      1077
    ]
  }),
  __expand__($Vg, [
      2,
      53
    ], {67:[
      2,
      53
    ]
  }),
  __expand__($Vg, [
      2,
      54
    ], {67:[
      2,
      54
    ]
  }),
  __expand__($Vg, [
      2,
      55
    ], {67:[
      2,
      55
    ]
  }),
  __expand__($Vg, [
      2,
      56
    ], {67:[
      2,
      56
    ]
  }),
  __expand__($Vg, [
      2,
      57
    ], {67:[
      2,
      57
    ]
  }),
  __expand__($Vm1, [
      2,
      58
    ], {55:[
      1,
      131
    ],70:130
  }),
  __expand__($Vg, [
      2,
      59
    ], {67:[
      2,
      59
    ]
  }),
  {
    2: [
      1,
      1083
    ],
    10: 798,
    20: 76,
    53: 1082,
    54: 1079,
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    89: 1080,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      1081
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      1083
    ],
    10: 798,
    20: 76,
    53: 1082,
    54: 1084,
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    89: 1085,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      1086
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      1083
    ],
    10: 798,
    20: 76,
    53: 1082,
    54: 1087,
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    95: [
      1,
      78
    ]
  },
  __expand__($Vg, [
      2,
      65
    ], {57:[
      1,
      1088
    ],67:[
      2,
      65
    ]
  }),
  __expand__($Vn1, [
      2,
      112
    ], {88:[
      2,
      112
    ]
  }),
  __expand__($Vg, [
      2,
      115
    ], {67:[
      2,
      115
    ]
  }),
  {
    14: 1089,
    39: [
      1,
      1091
    ],
    40: [
      1,
      1090
    ],
    89: 1092,
    90: [
      1,
      1093
    ],
    91: [
      1,
      1094
    ]
  },
  __expand__($Vg, [
      2,
      118
    ], {67:[
      2,
      118
    ]
  }),
  __expand__($Vg, [
      2,
      119
    ], {67:[
      2,
      119
    ]
  }),
  __expand__($Vj, [
      2,
      120
    ], {67:[
      2,
      120
    ]
  }),
  {
    60: [
      1,
      1095
    ]
  },
  {
    2: [
      1,
      169
    ],
    7: 1096,
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    23: 152,
    26: 153,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      150
    ],
    73: [
      1,
      151
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  __expand__($Vk, [
      2,
      69
    ], {67:[
      2,
      69
    ]
  }),
  __expand__($Vn1, [
      2,
      113
    ], {88:[
      2,
      113
    ]
  }),
  __expand__($Vn1, [
      2,
      114
    ], {88:[
      2,
      114
    ]
  }),
  __expand__($Vk, [
      2,
      76
    ], {67:[
      2,
      76
    ]
  }),
  {
    68: 1097,
    74: [
      1,
      803
    ]
  },
  __expand__($Vk, [
      2,
      86
    ], {67:[
      2,
      86
    ]
  }),
  {
    62: [
      1,
      1098
    ],
    81: [
      1,
      539
    ]
  },
  {
    62: [
      2,
      102
    ],
    81: [
      2,
      102
    ]
  },
  __expand__($VG, [
      2,
      87
    ], {81:[
      2,
      87
    ]
  }),
  __expand__($VG, [
      2,
      88
    ], {81:[
      2,
      88
    ]
  }),
  __expand__($VH, [
      2,
      21
    ], {81:[
      2,
      21
    ]
  }),
  __expand__($VH, [
      2,
      22
    ], {81:[
      2,
      22
    ]
  }),
  __expand__($VJ, [
      2,
      24
    ], {81:[
      2,
      24
    ]
  }),
  __expand__($VJ, [
      2,
      25
    ], {81:[
      2,
      25
    ]
  }),
  __expand__($VJ, [
      2,
      27
    ], {81:[
      2,
      27
    ]
  }),
  __expand__($VJ, [
      2,
      32
    ], {81:[
      2,
      32
    ]
  }),
  __expand__($VJ, [
      2,
      33
    ], {81:[
      2,
      33
    ]
  }),
  __expand__($VJ, [
      2,
      26
    ], {39:[
      1,
      1099
    ],40:[
      1,
      1100
    ],81:[
      2,
      26
    ]
  }),
  __expand__($Vo1, [
      2,
      39
    ], {42:[
      1,
      1101
    ],43:[
      1,
      1102
    ],44:[
      1,
      1103
    ],81:[
      2,
      39
    ]
  }),
  __expand__([6,24,25,27,28,31,37,39,40,42,43,44,62], [
      2,
      43
    ], {49:[
      1,
      1104
    ],50:[
      1,
      1105
    ],51:[
      1,
      1106
    ],81:[
      2,
      43
    ]
  }),
  __expand__($Vp1, [
      2,
      49
    ], {47:[
      1,
      1107
    ],81:[
      2,
      49
    ]
  }),
  {
    2: [
      1,
      829
    ],
    10: 842,
    14: 822,
    15: 823,
    16: 824,
    17: 825,
    18: 826,
    19: 827,
    20: 828,
    39: [
      1,
      831
    ],
    40: [
      1,
      830
    ],
    45: 1108,
    46: 818,
    48: [
      1,
      819
    ],
    52: 820,
    53: 821,
    55: [
      1,
      832
    ],
    56: 833,
    59: [
      1,
      840
    ],
    60: [
      1,
      841
    ],
    68: 845,
    69: 846,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      847
    ],
    88: [
      1,
      836
    ],
    89: 834,
    90: [
      1,
      843
    ],
    91: [
      1,
      844
    ],
    92: [
      1,
      835
    ],
    93: [
      1,
      837
    ],
    94: [
      1,
      838
    ],
    95: [
      1,
      839
    ]
  },
  __expand__($VS, [
      2,
      50
    ], {81:[
      2,
      50
    ]
  }),
  __expand__($VS, [
      2,
      51
    ], {81:[
      2,
      51
    ]
  }),
  __expand__([6,24,25,27,28,31,37,39,40,42,43,44,47,49,50,51,62,81], [
      2,
      52
    ], {85:[
      1,
      1110
    ],86:[
      1,
      1109
    ],87:[
      1,
      1112
    ],88:[
      1,
      1111
    ]
  }),
  __expand__($VS, [
      2,
      53
    ], {81:[
      2,
      53
    ]
  }),
  __expand__($VS, [
      2,
      54
    ], {81:[
      2,
      54
    ]
  }),
  __expand__($VS, [
      2,
      55
    ], {81:[
      2,
      55
    ]
  }),
  __expand__($VS, [
      2,
      56
    ], {81:[
      2,
      56
    ]
  }),
  __expand__($VS, [
      2,
      57
    ], {81:[
      2,
      57
    ]
  }),
  __expand__($VS, [
      2,
      58
    ], {70:130,55:[
      1,
      131
    ],81:[
      2,
      58
    ]
  }),
  __expand__($VS, [
      2,
      59
    ], {81:[
      2,
      59
    ]
  }),
  {
    2: [
      1,
      1117
    ],
    10: 842,
    20: 76,
    53: 1116,
    54: 1113,
    56: 833,
    59: [
      1,
      840
    ],
    60: [
      1,
      841
    ],
    68: 845,
    69: 846,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      847
    ],
    89: 1114,
    90: [
      1,
      843
    ],
    91: [
      1,
      844
    ],
    92: [
      1,
      1115
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      1117
    ],
    10: 842,
    20: 76,
    53: 1116,
    54: 1118,
    56: 833,
    59: [
      1,
      840
    ],
    60: [
      1,
      841
    ],
    68: 845,
    69: 846,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      847
    ],
    89: 1119,
    90: [
      1,
      843
    ],
    91: [
      1,
      844
    ],
    92: [
      1,
      1120
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      1117
    ],
    10: 842,
    20: 76,
    53: 1116,
    54: 1121,
    56: 833,
    59: [
      1,
      840
    ],
    60: [
      1,
      841
    ],
    68: 845,
    69: 846,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      847
    ],
    95: [
      1,
      78
    ]
  },
  __expand__($VS, [
      2,
      65
    ], {57:[
      1,
      1122
    ],81:[
      2,
      65
    ]
  }),
  __expand__($Vq1, [
      2,
      112
    ], {88:[
      2,
      112
    ]
  }),
  __expand__($VS, [
      2,
      115
    ], {81:[
      2,
      115
    ]
  }),
  {
    14: 1123,
    39: [
      1,
      1125
    ],
    40: [
      1,
      1124
    ],
    89: 1126,
    90: [
      1,
      1127
    ],
    91: [
      1,
      1128
    ]
  },
  __expand__($VS, [
      2,
      118
    ], {81:[
      2,
      118
    ]
  }),
  __expand__($VS, [
      2,
      119
    ], {81:[
      2,
      119
    ]
  }),
  __expand__([6,24,25,27,28,31,37,39,40,42,43,44,47,49,50,51,55,62], [
      2,
      120
    ], {81:[
      2,
      120
    ]
  }),
  {
    60: [
      1,
      1129
    ]
  },
  {
    2: [
      1,
      169
    ],
    7: 1130,
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    23: 152,
    26: 153,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      150
    ],
    73: [
      1,
      151
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  __expand__($Vr1, [
      2,
      69
    ], {81:[
      2,
      69
    ]
  }),
  __expand__($Vq1, [
      2,
      113
    ], {88:[
      2,
      113
    ]
  }),
  __expand__($Vq1, [
      2,
      114
    ], {88:[
      2,
      114
    ]
  }),
  __expand__($Vr1, [
      2,
      76
    ], {81:[
      2,
      76
    ]
  }),
  {
    68: 1131,
    74: [
      1,
      847
    ]
  },
  __expand__($Vr1, [
      2,
      86
    ], {81:[
      2,
      86
    ]
  }),
  __expand__($VK, [
      2,
      37
    ], {81:[
      2,
      37
    ]
  }),
  __expand__($VK, [
      2,
      38
    ], {81:[
      2,
      38
    ]
  }),
  __expand__($VJ, [
      2,
      28
    ], {38:[
      1,
      1132
    ],81:[
      2,
      28
    ]
  }),
  __expand__($Vs1, [
      2,
      36
    ], {39:[
      1,
      1133
    ],40:[
      1,
      1134
    ],81:[
      2,
      36
    ]
  }),
  __expand__($Vt1, [
      2,
      39
    ], {42:[
      1,
      1135
    ],43:[
      1,
      1136
    ],44:[
      1,
      1137
    ],81:[
      2,
      39
    ]
  }),
  __expand__([6,24,25,27,28,31,37,38,39,40,42,43,44,62], [
      2,
      43
    ], {49:[
      1,
      1138
    ],50:[
      1,
      1139
    ],51:[
      1,
      1140
    ],81:[
      2,
      43
    ]
  }),
  __expand__($Vu1, [
      2,
      49
    ], {47:[
      1,
      1141
    ],81:[
      2,
      49
    ]
  }),
  {
    2: [
      1,
      865
    ],
    10: 878,
    14: 858,
    15: 859,
    16: 860,
    17: 861,
    18: 862,
    19: 863,
    20: 864,
    39: [
      1,
      867
    ],
    40: [
      1,
      866
    ],
    45: 1142,
    46: 854,
    48: [
      1,
      855
    ],
    52: 856,
    53: 857,
    55: [
      1,
      868
    ],
    56: 869,
    59: [
      1,
      876
    ],
    60: [
      1,
      877
    ],
    68: 881,
    69: 882,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      883
    ],
    88: [
      1,
      872
    ],
    89: 870,
    90: [
      1,
      879
    ],
    91: [
      1,
      880
    ],
    92: [
      1,
      871
    ],
    93: [
      1,
      873
    ],
    94: [
      1,
      874
    ],
    95: [
      1,
      875
    ]
  },
  __expand__($V$, [
      2,
      50
    ], {81:[
      2,
      50
    ]
  }),
  __expand__($V$, [
      2,
      51
    ], {81:[
      2,
      51
    ]
  }),
  __expand__([6,24,25,27,28,31,37,38,39,40,42,43,44,47,49,50,51,62,81], [
      2,
      52
    ], {85:[
      1,
      1144
    ],86:[
      1,
      1143
    ],87:[
      1,
      1146
    ],88:[
      1,
      1145
    ]
  }),
  __expand__($V$, [
      2,
      53
    ], {81:[
      2,
      53
    ]
  }),
  __expand__($V$, [
      2,
      54
    ], {81:[
      2,
      54
    ]
  }),
  __expand__($V$, [
      2,
      55
    ], {81:[
      2,
      55
    ]
  }),
  __expand__($V$, [
      2,
      56
    ], {81:[
      2,
      56
    ]
  }),
  __expand__($V$, [
      2,
      57
    ], {81:[
      2,
      57
    ]
  }),
  __expand__($V$, [
      2,
      58
    ], {70:130,55:[
      1,
      131
    ],81:[
      2,
      58
    ]
  }),
  __expand__($V$, [
      2,
      59
    ], {81:[
      2,
      59
    ]
  }),
  {
    2: [
      1,
      1151
    ],
    10: 878,
    20: 76,
    53: 1150,
    54: 1147,
    56: 869,
    59: [
      1,
      876
    ],
    60: [
      1,
      877
    ],
    68: 881,
    69: 882,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      883
    ],
    89: 1148,
    90: [
      1,
      879
    ],
    91: [
      1,
      880
    ],
    92: [
      1,
      1149
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      1151
    ],
    10: 878,
    20: 76,
    53: 1150,
    54: 1152,
    56: 869,
    59: [
      1,
      876
    ],
    60: [
      1,
      877
    ],
    68: 881,
    69: 882,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      883
    ],
    89: 1153,
    90: [
      1,
      879
    ],
    91: [
      1,
      880
    ],
    92: [
      1,
      1154
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      1151
    ],
    10: 878,
    20: 76,
    53: 1150,
    54: 1155,
    56: 869,
    59: [
      1,
      876
    ],
    60: [
      1,
      877
    ],
    68: 881,
    69: 882,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      883
    ],
    95: [
      1,
      78
    ]
  },
  __expand__($V$, [
      2,
      65
    ], {57:[
      1,
      1156
    ],81:[
      2,
      65
    ]
  }),
  __expand__($Vv1, [
      2,
      112
    ], {88:[
      2,
      112
    ]
  }),
  __expand__($V$, [
      2,
      115
    ], {81:[
      2,
      115
    ]
  }),
  {
    14: 1157,
    39: [
      1,
      1159
    ],
    40: [
      1,
      1158
    ],
    89: 1160,
    90: [
      1,
      1161
    ],
    91: [
      1,
      1162
    ]
  },
  __expand__($V$, [
      2,
      118
    ], {81:[
      2,
      118
    ]
  }),
  __expand__($V$, [
      2,
      119
    ], {81:[
      2,
      119
    ]
  }),
  __expand__([6,24,25,27,28,31,37,38,39,40,42,43,44,47,49,50,51,55,62], [
      2,
      120
    ], {81:[
      2,
      120
    ]
  }),
  {
    60: [
      1,
      1163
    ]
  },
  {
    2: [
      1,
      169
    ],
    7: 1164,
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    23: 152,
    26: 153,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      150
    ],
    73: [
      1,
      151
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  __expand__($Vw1, [
      2,
      69
    ], {81:[
      2,
      69
    ]
  }),
  __expand__($Vv1, [
      2,
      113
    ], {88:[
      2,
      113
    ]
  }),
  __expand__($Vv1, [
      2,
      114
    ], {88:[
      2,
      114
    ]
  }),
  __expand__($Vw1, [
      2,
      76
    ], {81:[
      2,
      76
    ]
  }),
  {
    68: 1165,
    74: [
      1,
      883
    ]
  },
  __expand__($Vw1, [
      2,
      86
    ], {81:[
      2,
      86
    ]
  }),
  __expand__($VJ, [
      2,
      29
    ], {38:[
      1,
      1132
    ],81:[
      2,
      29
    ]
  }),
  __expand__($VJ, [
      2,
      30
    ], {38:[
      1,
      1132
    ],81:[
      2,
      30
    ]
  }),
  __expand__($VJ, [
      2,
      31
    ], {38:[
      1,
      1132
    ],81:[
      2,
      31
    ]
  }),
  __expand__($VI, [
      2,
      35
    ], {81:[
      2,
      35
    ]
  }),
  __expand__($VI, [
      2,
      36
    ], {39:[
      1,
      1166
    ],40:[
      1,
      1167
    ],81:[
      2,
      36
    ]
  }),
  __expand__($Vx1, [
      2,
      39
    ], {42:[
      1,
      1168
    ],43:[
      1,
      1169
    ],44:[
      1,
      1170
    ],81:[
      2,
      39
    ]
  }),
  __expand__([6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,62], [
      2,
      43
    ], {49:[
      1,
      1171
    ],50:[
      1,
      1172
    ],51:[
      1,
      1173
    ],81:[
      2,
      43
    ]
  }),
  __expand__($Vy1, [
      2,
      49
    ], {47:[
      1,
      1174
    ],81:[
      2,
      49
    ]
  }),
  {
    2: [
      1,
      902
    ],
    10: 915,
    14: 895,
    15: 896,
    16: 897,
    17: 898,
    18: 899,
    19: 900,
    20: 901,
    39: [
      1,
      904
    ],
    40: [
      1,
      903
    ],
    45: 1175,
    46: 891,
    48: [
      1,
      892
    ],
    52: 893,
    53: 894,
    55: [
      1,
      905
    ],
    56: 906,
    59: [
      1,
      913
    ],
    60: [
      1,
      914
    ],
    68: 918,
    69: 919,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      920
    ],
    88: [
      1,
      909
    ],
    89: 907,
    90: [
      1,
      916
    ],
    91: [
      1,
      917
    ],
    92: [
      1,
      908
    ],
    93: [
      1,
      910
    ],
    94: [
      1,
      911
    ],
    95: [
      1,
      912
    ]
  },
  __expand__($V71, [
      2,
      50
    ], {81:[
      2,
      50
    ]
  }),
  __expand__($V71, [
      2,
      51
    ], {81:[
      2,
      51
    ]
  }),
  __expand__([6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,62,81], [
      2,
      52
    ], {85:[
      1,
      1177
    ],86:[
      1,
      1176
    ],87:[
      1,
      1179
    ],88:[
      1,
      1178
    ]
  }),
  __expand__($V71, [
      2,
      53
    ], {81:[
      2,
      53
    ]
  }),
  __expand__($V71, [
      2,
      54
    ], {81:[
      2,
      54
    ]
  }),
  __expand__($V71, [
      2,
      55
    ], {81:[
      2,
      55
    ]
  }),
  __expand__($V71, [
      2,
      56
    ], {81:[
      2,
      56
    ]
  }),
  __expand__($V71, [
      2,
      57
    ], {81:[
      2,
      57
    ]
  }),
  __expand__($V71, [
      2,
      58
    ], {70:130,55:[
      1,
      131
    ],81:[
      2,
      58
    ]
  }),
  __expand__($V71, [
      2,
      59
    ], {81:[
      2,
      59
    ]
  }),
  {
    2: [
      1,
      1184
    ],
    10: 915,
    20: 76,
    53: 1183,
    54: 1180,
    56: 906,
    59: [
      1,
      913
    ],
    60: [
      1,
      914
    ],
    68: 918,
    69: 919,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      920
    ],
    89: 1181,
    90: [
      1,
      916
    ],
    91: [
      1,
      917
    ],
    92: [
      1,
      1182
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      1184
    ],
    10: 915,
    20: 76,
    53: 1183,
    54: 1185,
    56: 906,
    59: [
      1,
      913
    ],
    60: [
      1,
      914
    ],
    68: 918,
    69: 919,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      920
    ],
    89: 1186,
    90: [
      1,
      916
    ],
    91: [
      1,
      917
    ],
    92: [
      1,
      1187
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      1184
    ],
    10: 915,
    20: 76,
    53: 1183,
    54: 1188,
    56: 906,
    59: [
      1,
      913
    ],
    60: [
      1,
      914
    ],
    68: 918,
    69: 919,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      920
    ],
    95: [
      1,
      78
    ]
  },
  __expand__($V71, [
      2,
      65
    ], {57:[
      1,
      1189
    ],81:[
      2,
      65
    ]
  }),
  __expand__($Vz1, [
      2,
      112
    ], {88:[
      2,
      112
    ]
  }),
  __expand__($V71, [
      2,
      115
    ], {81:[
      2,
      115
    ]
  }),
  {
    14: 1190,
    39: [
      1,
      1192
    ],
    40: [
      1,
      1191
    ],
    89: 1193,
    90: [
      1,
      1194
    ],
    91: [
      1,
      1195
    ]
  },
  __expand__($V71, [
      2,
      118
    ], {81:[
      2,
      118
    ]
  }),
  __expand__($V71, [
      2,
      119
    ], {81:[
      2,
      119
    ]
  }),
  __expand__([6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,47,49,50,51,55,62], [
      2,
      120
    ], {81:[
      2,
      120
    ]
  }),
  {
    60: [
      1,
      1196
    ]
  },
  {
    2: [
      1,
      169
    ],
    7: 1197,
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    23: 152,
    26: 153,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      150
    ],
    73: [
      1,
      151
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  __expand__($VA1, [
      2,
      69
    ], {81:[
      2,
      69
    ]
  }),
  __expand__($Vz1, [
      2,
      113
    ], {88:[
      2,
      113
    ]
  }),
  __expand__($Vz1, [
      2,
      114
    ], {88:[
      2,
      114
    ]
  }),
  __expand__($VA1, [
      2,
      76
    ], {81:[
      2,
      76
    ]
  }),
  {
    68: 1198,
    74: [
      1,
      920
    ]
  },
  __expand__($VA1, [
      2,
      86
    ], {81:[
      2,
      86
    ]
  }),
  __expand__($VG, [
      2,
      90
    ], {81:[
      2,
      90
    ]
  }),
  __expand__($VB1, [
      2,
      40
    ], {44:[
      1,
      559
    ],81:[
      2,
      40
    ]
  }),
  __expand__($VB1, [
      2,
      41
    ], {44:[
      1,
      559
    ],81:[
      2,
      41
    ]
  }),
  __expand__($VB1, [
      2,
      42
    ], {44:[
      1,
      559
    ],81:[
      2,
      42
    ]
  }),
  __expand__([6,24,25,27,28,30,31,33,34,35,36,37,38,39,40,42,43,44,51,62], [
      2,
      44
    ], {49:[
      1,
      560
    ],50:[
      1,
      561
    ],81:[
      2,
      44
    ]
  }),
  __expand__($Vh, [
      2,
      66
    ], {81:[
      2,
      66
    ]
  }),
  __expand__($Vh, [
      2,
      70
    ], {57:[
      1,
      1199
    ],66:[
      1,
      1200
    ],81:[
      2,
      70
    ]
  }),
  __expand__($VC1, [
      2,
      72
    ], {81:[
      2,
      72
    ]
  }),
  {
    60: [
      1,
      1201
    ]
  },
  __expand__($VC1, [
      2,
      75
    ], {81:[
      2,
      75
    ]
  }),
  __expand__($Vh, [
      2,
      110
    ], {81:[
      2,
      110
    ]
  }),
  __expand__($Vh, [
      2,
      111
    ], {81:[
      2,
      111
    ]
  }),
  {
    62: [
      1,
      1202
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($VN, [
      2,
      68
    ], {81:[
      2,
      68
    ]
  }),
  {
    2: [
      1,
      611
    ],
    10: 624,
    14: 604,
    15: 605,
    16: 606,
    17: 607,
    18: 608,
    19: 609,
    20: 610,
    29: 1203,
    39: [
      1,
      613
    ],
    40: [
      1,
      612
    ],
    41: 598,
    45: 599,
    46: 600,
    48: [
      1,
      601
    ],
    52: 602,
    53: 603,
    55: [
      1,
      614
    ],
    56: 615,
    59: [
      1,
      622
    ],
    60: [
      1,
      623
    ],
    68: 627,
    69: 628,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      629
    ],
    88: [
      1,
      618
    ],
    89: 616,
    90: [
      1,
      625
    ],
    91: [
      1,
      626
    ],
    92: [
      1,
      617
    ],
    93: [
      1,
      619
    ],
    94: [
      1,
      620
    ],
    95: [
      1,
      621
    ]
  },
  {
    2: [
      1,
      611
    ],
    10: 624,
    14: 604,
    15: 605,
    16: 606,
    17: 607,
    18: 608,
    19: 609,
    20: 610,
    29: 1204,
    39: [
      1,
      613
    ],
    40: [
      1,
      612
    ],
    41: 598,
    45: 599,
    46: 600,
    48: [
      1,
      601
    ],
    52: 602,
    53: 603,
    55: [
      1,
      614
    ],
    56: 615,
    59: [
      1,
      622
    ],
    60: [
      1,
      623
    ],
    68: 627,
    69: 628,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      629
    ],
    88: [
      1,
      618
    ],
    89: 616,
    90: [
      1,
      625
    ],
    91: [
      1,
      626
    ],
    92: [
      1,
      617
    ],
    93: [
      1,
      619
    ],
    94: [
      1,
      620
    ],
    95: [
      1,
      621
    ]
  },
  {
    2: [
      1,
      611
    ],
    10: 624,
    14: 604,
    15: 605,
    16: 606,
    17: 607,
    18: 608,
    19: 609,
    20: 610,
    39: [
      1,
      613
    ],
    40: [
      1,
      612
    ],
    41: 1205,
    45: 599,
    46: 600,
    48: [
      1,
      601
    ],
    52: 602,
    53: 603,
    55: [
      1,
      614
    ],
    56: 615,
    59: [
      1,
      622
    ],
    60: [
      1,
      623
    ],
    68: 627,
    69: 628,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      629
    ],
    88: [
      1,
      618
    ],
    89: 616,
    90: [
      1,
      625
    ],
    91: [
      1,
      626
    ],
    92: [
      1,
      617
    ],
    93: [
      1,
      619
    ],
    94: [
      1,
      620
    ],
    95: [
      1,
      621
    ]
  },
  {
    2: [
      1,
      611
    ],
    10: 624,
    14: 604,
    15: 605,
    16: 606,
    17: 607,
    18: 608,
    19: 609,
    20: 610,
    39: [
      1,
      613
    ],
    40: [
      1,
      612
    ],
    41: 1206,
    45: 599,
    46: 600,
    48: [
      1,
      601
    ],
    52: 602,
    53: 603,
    55: [
      1,
      614
    ],
    56: 615,
    59: [
      1,
      622
    ],
    60: [
      1,
      623
    ],
    68: 627,
    69: 628,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      629
    ],
    88: [
      1,
      618
    ],
    89: 616,
    90: [
      1,
      625
    ],
    91: [
      1,
      626
    ],
    92: [
      1,
      617
    ],
    93: [
      1,
      619
    ],
    94: [
      1,
      620
    ],
    95: [
      1,
      621
    ]
  },
  {
    2: [
      1,
      611
    ],
    10: 624,
    14: 604,
    15: 605,
    16: 606,
    17: 607,
    18: 608,
    19: 609,
    20: 610,
    39: [
      1,
      613
    ],
    40: [
      1,
      612
    ],
    41: 1207,
    45: 599,
    46: 600,
    48: [
      1,
      601
    ],
    52: 602,
    53: 603,
    55: [
      1,
      614
    ],
    56: 615,
    59: [
      1,
      622
    ],
    60: [
      1,
      623
    ],
    68: 627,
    69: 628,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      629
    ],
    88: [
      1,
      618
    ],
    89: 616,
    90: [
      1,
      625
    ],
    91: [
      1,
      626
    ],
    92: [
      1,
      617
    ],
    93: [
      1,
      619
    ],
    94: [
      1,
      620
    ],
    95: [
      1,
      621
    ]
  },
  __expand__($VQ, [
      2,
      46
    ], {62:[
      2,
      46
    ]
  }),
  __expand__($VQ, [
      2,
      47
    ], {62:[
      2,
      47
    ]
  }),
  __expand__($VQ, [
      2,
      48
    ], {62:[
      2,
      48
    ]
  }),
  {
    2: [
      1,
      611
    ],
    10: 624,
    14: 604,
    15: 605,
    16: 606,
    17: 607,
    18: 608,
    19: 609,
    20: 610,
    39: [
      1,
      613
    ],
    40: [
      1,
      612
    ],
    45: 1208,
    46: 600,
    48: [
      1,
      601
    ],
    52: 602,
    53: 603,
    55: [
      1,
      614
    ],
    56: 615,
    59: [
      1,
      622
    ],
    60: [
      1,
      623
    ],
    68: 627,
    69: 628,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      629
    ],
    88: [
      1,
      618
    ],
    89: 616,
    90: [
      1,
      625
    ],
    91: [
      1,
      626
    ],
    92: [
      1,
      617
    ],
    93: [
      1,
      619
    ],
    94: [
      1,
      620
    ],
    95: [
      1,
      621
    ]
  },
  __expand__($VQ, [
      2,
      45
    ], {62:[
      2,
      45
    ]
  }),
  __expand__($VR, [
      2,
      105
    ], {62:[
      2,
      105
    ]
  }),
  __expand__($VR, [
      2,
      106
    ], {62:[
      2,
      106
    ]
  }),
  __expand__($VR, [
      2,
      109
    ], {62:[
      2,
      109
    ]
  }),
  __expand__($VR, [
      2,
      107
    ], {62:[
      2,
      107
    ]
  }),
  __expand__($VR, [
      2,
      60
    ], {62:[
      2,
      60
    ]
  }),
  __expand__($VT, [
      2,
      110
    ], {88:[
      2,
      110
    ]
  }),
  __expand__($VR, [
      2,
      116
    ], {62:[
      2,
      116
    ]
  }),
  __expand__($VR, [
      2,
      63
    ], {62:[
      2,
      63
    ]
  }),
  __expand__($VR, [
      2,
      64
    ], {62:[
      2,
      64
    ]
  }),
  __expand__($VR, [
      2,
      61
    ], {62:[
      2,
      61
    ]
  }),
  __expand__($VT, [
      2,
      111
    ], {88:[
      2,
      111
    ]
  }),
  __expand__($VR, [
      2,
      117
    ], {62:[
      2,
      117
    ]
  }),
  __expand__($VR, [
      2,
      62
    ], {62:[
      2,
      62
    ]
  }),
  {
    2: [
      1,
      1213
    ],
    58: 1209,
    63: 1210,
    64: [
      1,
      1211
    ],
    65: [
      1,
      1212
    ]
  },
  __expand__($VR, [
      2,
      108
    ], {62:[
      2,
      108
    ]
  }),
  {
    89: 1214,
    90: [
      1,
      963
    ],
    91: [
      1,
      964
    ]
  },
  {
    89: 1215,
    90: [
      1,
      963
    ],
    91: [
      1,
      964
    ]
  },
  __expand__($VR, [
      2,
      112
    ], {62:[
      2,
      112
    ]
  }),
  __expand__($VR, [
      2,
      113
    ], {62:[
      2,
      113
    ]
  }),
  __expand__($VR, [
      2,
      114
    ], {62:[
      2,
      114
    ]
  }),
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1216,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  {
    62: [
      1,
      1217
    ]
  },
  __expand__($VV, [
      2,
      77
    ], {62:[
      2,
      77
    ]
  }),
  {
    2: [
      1,
      647
    ],
    10: 660,
    14: 640,
    15: 641,
    16: 642,
    17: 643,
    18: 644,
    19: 645,
    20: 646,
    29: 633,
    32: 1218,
    39: [
      1,
      649
    ],
    40: [
      1,
      648
    ],
    41: 634,
    45: 635,
    46: 636,
    48: [
      1,
      637
    ],
    52: 638,
    53: 639,
    55: [
      1,
      650
    ],
    56: 651,
    59: [
      1,
      658
    ],
    60: [
      1,
      659
    ],
    68: 663,
    69: 664,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      665
    ],
    88: [
      1,
      654
    ],
    89: 652,
    90: [
      1,
      661
    ],
    91: [
      1,
      662
    ],
    92: [
      1,
      653
    ],
    93: [
      1,
      655
    ],
    94: [
      1,
      656
    ],
    95: [
      1,
      657
    ]
  },
  {
    2: [
      1,
      647
    ],
    10: 660,
    14: 640,
    15: 641,
    16: 642,
    17: 643,
    18: 644,
    19: 645,
    20: 646,
    29: 1219,
    39: [
      1,
      649
    ],
    40: [
      1,
      648
    ],
    41: 634,
    45: 635,
    46: 636,
    48: [
      1,
      637
    ],
    52: 638,
    53: 639,
    55: [
      1,
      650
    ],
    56: 651,
    59: [
      1,
      658
    ],
    60: [
      1,
      659
    ],
    68: 663,
    69: 664,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      665
    ],
    88: [
      1,
      654
    ],
    89: 652,
    90: [
      1,
      661
    ],
    91: [
      1,
      662
    ],
    92: [
      1,
      653
    ],
    93: [
      1,
      655
    ],
    94: [
      1,
      656
    ],
    95: [
      1,
      657
    ]
  },
  {
    2: [
      1,
      647
    ],
    10: 660,
    14: 640,
    15: 641,
    16: 642,
    17: 643,
    18: 644,
    19: 645,
    20: 646,
    29: 1220,
    39: [
      1,
      649
    ],
    40: [
      1,
      648
    ],
    41: 634,
    45: 635,
    46: 636,
    48: [
      1,
      637
    ],
    52: 638,
    53: 639,
    55: [
      1,
      650
    ],
    56: 651,
    59: [
      1,
      658
    ],
    60: [
      1,
      659
    ],
    68: 663,
    69: 664,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      665
    ],
    88: [
      1,
      654
    ],
    89: 652,
    90: [
      1,
      661
    ],
    91: [
      1,
      662
    ],
    92: [
      1,
      653
    ],
    93: [
      1,
      655
    ],
    94: [
      1,
      656
    ],
    95: [
      1,
      657
    ]
  },
  {
    2: [
      1,
      647
    ],
    10: 660,
    14: 640,
    15: 641,
    16: 642,
    17: 643,
    18: 644,
    19: 645,
    20: 646,
    39: [
      1,
      649
    ],
    40: [
      1,
      648
    ],
    41: 1221,
    45: 635,
    46: 636,
    48: [
      1,
      637
    ],
    52: 638,
    53: 639,
    55: [
      1,
      650
    ],
    56: 651,
    59: [
      1,
      658
    ],
    60: [
      1,
      659
    ],
    68: 663,
    69: 664,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      665
    ],
    88: [
      1,
      654
    ],
    89: 652,
    90: [
      1,
      661
    ],
    91: [
      1,
      662
    ],
    92: [
      1,
      653
    ],
    93: [
      1,
      655
    ],
    94: [
      1,
      656
    ],
    95: [
      1,
      657
    ]
  },
  {
    2: [
      1,
      647
    ],
    10: 660,
    14: 640,
    15: 641,
    16: 642,
    17: 643,
    18: 644,
    19: 645,
    20: 646,
    39: [
      1,
      649
    ],
    40: [
      1,
      648
    ],
    41: 1222,
    45: 635,
    46: 636,
    48: [
      1,
      637
    ],
    52: 638,
    53: 639,
    55: [
      1,
      650
    ],
    56: 651,
    59: [
      1,
      658
    ],
    60: [
      1,
      659
    ],
    68: 663,
    69: 664,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      665
    ],
    88: [
      1,
      654
    ],
    89: 652,
    90: [
      1,
      661
    ],
    91: [
      1,
      662
    ],
    92: [
      1,
      653
    ],
    93: [
      1,
      655
    ],
    94: [
      1,
      656
    ],
    95: [
      1,
      657
    ]
  },
  {
    2: [
      1,
      647
    ],
    10: 660,
    14: 640,
    15: 641,
    16: 642,
    17: 643,
    18: 644,
    19: 645,
    20: 646,
    39: [
      1,
      649
    ],
    40: [
      1,
      648
    ],
    41: 1223,
    45: 635,
    46: 636,
    48: [
      1,
      637
    ],
    52: 638,
    53: 639,
    55: [
      1,
      650
    ],
    56: 651,
    59: [
      1,
      658
    ],
    60: [
      1,
      659
    ],
    68: 663,
    69: 664,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      665
    ],
    88: [
      1,
      654
    ],
    89: 652,
    90: [
      1,
      661
    ],
    91: [
      1,
      662
    ],
    92: [
      1,
      653
    ],
    93: [
      1,
      655
    ],
    94: [
      1,
      656
    ],
    95: [
      1,
      657
    ]
  },
  __expand__($VZ, [
      2,
      46
    ], {62:[
      2,
      46
    ]
  }),
  __expand__($VZ, [
      2,
      47
    ], {62:[
      2,
      47
    ]
  }),
  __expand__($VZ, [
      2,
      48
    ], {62:[
      2,
      48
    ]
  }),
  {
    2: [
      1,
      647
    ],
    10: 660,
    14: 640,
    15: 641,
    16: 642,
    17: 643,
    18: 644,
    19: 645,
    20: 646,
    39: [
      1,
      649
    ],
    40: [
      1,
      648
    ],
    45: 1224,
    46: 636,
    48: [
      1,
      637
    ],
    52: 638,
    53: 639,
    55: [
      1,
      650
    ],
    56: 651,
    59: [
      1,
      658
    ],
    60: [
      1,
      659
    ],
    68: 663,
    69: 664,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      665
    ],
    88: [
      1,
      654
    ],
    89: 652,
    90: [
      1,
      661
    ],
    91: [
      1,
      662
    ],
    92: [
      1,
      653
    ],
    93: [
      1,
      655
    ],
    94: [
      1,
      656
    ],
    95: [
      1,
      657
    ]
  },
  __expand__($VZ, [
      2,
      45
    ], {62:[
      2,
      45
    ]
  }),
  __expand__($V_, [
      2,
      105
    ], {62:[
      2,
      105
    ]
  }),
  __expand__($V_, [
      2,
      106
    ], {62:[
      2,
      106
    ]
  }),
  __expand__($V_, [
      2,
      109
    ], {62:[
      2,
      109
    ]
  }),
  __expand__($V_, [
      2,
      107
    ], {62:[
      2,
      107
    ]
  }),
  __expand__($V_, [
      2,
      60
    ], {62:[
      2,
      60
    ]
  }),
  __expand__($V01, [
      2,
      110
    ], {88:[
      2,
      110
    ]
  }),
  __expand__($V_, [
      2,
      116
    ], {62:[
      2,
      116
    ]
  }),
  __expand__($V_, [
      2,
      63
    ], {62:[
      2,
      63
    ]
  }),
  __expand__($V_, [
      2,
      64
    ], {62:[
      2,
      64
    ]
  }),
  __expand__($V_, [
      2,
      61
    ], {62:[
      2,
      61
    ]
  }),
  __expand__($V01, [
      2,
      111
    ], {88:[
      2,
      111
    ]
  }),
  __expand__($V_, [
      2,
      117
    ], {62:[
      2,
      117
    ]
  }),
  __expand__($V_, [
      2,
      62
    ], {62:[
      2,
      62
    ]
  }),
  {
    2: [
      1,
      1229
    ],
    58: 1225,
    63: 1226,
    64: [
      1,
      1227
    ],
    65: [
      1,
      1228
    ]
  },
  __expand__($V_, [
      2,
      108
    ], {62:[
      2,
      108
    ]
  }),
  {
    89: 1230,
    90: [
      1,
      997
    ],
    91: [
      1,
      998
    ]
  },
  {
    89: 1231,
    90: [
      1,
      997
    ],
    91: [
      1,
      998
    ]
  },
  __expand__($V_, [
      2,
      112
    ], {62:[
      2,
      112
    ]
  }),
  __expand__($V_, [
      2,
      113
    ], {62:[
      2,
      113
    ]
  }),
  __expand__($V_, [
      2,
      114
    ], {62:[
      2,
      114
    ]
  }),
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1232,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  {
    62: [
      1,
      1233
    ]
  },
  __expand__($V21, [
      2,
      77
    ], {62:[
      2,
      77
    ]
  }),
  {
    2: [
      1,
      684
    ],
    10: 697,
    14: 677,
    15: 678,
    16: 679,
    17: 680,
    18: 681,
    19: 682,
    20: 683,
    29: 1234,
    39: [
      1,
      686
    ],
    40: [
      1,
      685
    ],
    41: 671,
    45: 672,
    46: 673,
    48: [
      1,
      674
    ],
    52: 675,
    53: 676,
    55: [
      1,
      687
    ],
    56: 688,
    59: [
      1,
      695
    ],
    60: [
      1,
      696
    ],
    68: 700,
    69: 701,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      702
    ],
    88: [
      1,
      691
    ],
    89: 689,
    90: [
      1,
      698
    ],
    91: [
      1,
      699
    ],
    92: [
      1,
      690
    ],
    93: [
      1,
      692
    ],
    94: [
      1,
      693
    ],
    95: [
      1,
      694
    ]
  },
  {
    2: [
      1,
      684
    ],
    10: 697,
    14: 677,
    15: 678,
    16: 679,
    17: 680,
    18: 681,
    19: 682,
    20: 683,
    29: 1235,
    39: [
      1,
      686
    ],
    40: [
      1,
      685
    ],
    41: 671,
    45: 672,
    46: 673,
    48: [
      1,
      674
    ],
    52: 675,
    53: 676,
    55: [
      1,
      687
    ],
    56: 688,
    59: [
      1,
      695
    ],
    60: [
      1,
      696
    ],
    68: 700,
    69: 701,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      702
    ],
    88: [
      1,
      691
    ],
    89: 689,
    90: [
      1,
      698
    ],
    91: [
      1,
      699
    ],
    92: [
      1,
      690
    ],
    93: [
      1,
      692
    ],
    94: [
      1,
      693
    ],
    95: [
      1,
      694
    ]
  },
  {
    2: [
      1,
      684
    ],
    10: 697,
    14: 677,
    15: 678,
    16: 679,
    17: 680,
    18: 681,
    19: 682,
    20: 683,
    39: [
      1,
      686
    ],
    40: [
      1,
      685
    ],
    41: 1236,
    45: 672,
    46: 673,
    48: [
      1,
      674
    ],
    52: 675,
    53: 676,
    55: [
      1,
      687
    ],
    56: 688,
    59: [
      1,
      695
    ],
    60: [
      1,
      696
    ],
    68: 700,
    69: 701,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      702
    ],
    88: [
      1,
      691
    ],
    89: 689,
    90: [
      1,
      698
    ],
    91: [
      1,
      699
    ],
    92: [
      1,
      690
    ],
    93: [
      1,
      692
    ],
    94: [
      1,
      693
    ],
    95: [
      1,
      694
    ]
  },
  {
    2: [
      1,
      684
    ],
    10: 697,
    14: 677,
    15: 678,
    16: 679,
    17: 680,
    18: 681,
    19: 682,
    20: 683,
    39: [
      1,
      686
    ],
    40: [
      1,
      685
    ],
    41: 1237,
    45: 672,
    46: 673,
    48: [
      1,
      674
    ],
    52: 675,
    53: 676,
    55: [
      1,
      687
    ],
    56: 688,
    59: [
      1,
      695
    ],
    60: [
      1,
      696
    ],
    68: 700,
    69: 701,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      702
    ],
    88: [
      1,
      691
    ],
    89: 689,
    90: [
      1,
      698
    ],
    91: [
      1,
      699
    ],
    92: [
      1,
      690
    ],
    93: [
      1,
      692
    ],
    94: [
      1,
      693
    ],
    95: [
      1,
      694
    ]
  },
  {
    2: [
      1,
      684
    ],
    10: 697,
    14: 677,
    15: 678,
    16: 679,
    17: 680,
    18: 681,
    19: 682,
    20: 683,
    39: [
      1,
      686
    ],
    40: [
      1,
      685
    ],
    41: 1238,
    45: 672,
    46: 673,
    48: [
      1,
      674
    ],
    52: 675,
    53: 676,
    55: [
      1,
      687
    ],
    56: 688,
    59: [
      1,
      695
    ],
    60: [
      1,
      696
    ],
    68: 700,
    69: 701,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      702
    ],
    88: [
      1,
      691
    ],
    89: 689,
    90: [
      1,
      698
    ],
    91: [
      1,
      699
    ],
    92: [
      1,
      690
    ],
    93: [
      1,
      692
    ],
    94: [
      1,
      693
    ],
    95: [
      1,
      694
    ]
  },
  __expand__($V51, [
      2,
      46
    ], {62:[
      2,
      46
    ]
  }),
  __expand__($V51, [
      2,
      47
    ], {62:[
      2,
      47
    ]
  }),
  __expand__($V51, [
      2,
      48
    ], {62:[
      2,
      48
    ]
  }),
  {
    2: [
      1,
      684
    ],
    10: 697,
    14: 677,
    15: 678,
    16: 679,
    17: 680,
    18: 681,
    19: 682,
    20: 683,
    39: [
      1,
      686
    ],
    40: [
      1,
      685
    ],
    45: 1239,
    46: 673,
    48: [
      1,
      674
    ],
    52: 675,
    53: 676,
    55: [
      1,
      687
    ],
    56: 688,
    59: [
      1,
      695
    ],
    60: [
      1,
      696
    ],
    68: 700,
    69: 701,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      702
    ],
    88: [
      1,
      691
    ],
    89: 689,
    90: [
      1,
      698
    ],
    91: [
      1,
      699
    ],
    92: [
      1,
      690
    ],
    93: [
      1,
      692
    ],
    94: [
      1,
      693
    ],
    95: [
      1,
      694
    ]
  },
  __expand__($V51, [
      2,
      45
    ], {62:[
      2,
      45
    ]
  }),
  __expand__($V61, [
      2,
      105
    ], {62:[
      2,
      105
    ]
  }),
  __expand__($V61, [
      2,
      106
    ], {62:[
      2,
      106
    ]
  }),
  __expand__($V61, [
      2,
      109
    ], {62:[
      2,
      109
    ]
  }),
  __expand__($V61, [
      2,
      107
    ], {62:[
      2,
      107
    ]
  }),
  __expand__($V61, [
      2,
      60
    ], {62:[
      2,
      60
    ]
  }),
  __expand__($V81, [
      2,
      110
    ], {88:[
      2,
      110
    ]
  }),
  __expand__($V61, [
      2,
      116
    ], {62:[
      2,
      116
    ]
  }),
  __expand__($V61, [
      2,
      63
    ], {62:[
      2,
      63
    ]
  }),
  __expand__($V61, [
      2,
      64
    ], {62:[
      2,
      64
    ]
  }),
  __expand__($V61, [
      2,
      61
    ], {62:[
      2,
      61
    ]
  }),
  __expand__($V81, [
      2,
      111
    ], {88:[
      2,
      111
    ]
  }),
  __expand__($V61, [
      2,
      117
    ], {62:[
      2,
      117
    ]
  }),
  __expand__($V61, [
      2,
      62
    ], {62:[
      2,
      62
    ]
  }),
  {
    2: [
      1,
      1244
    ],
    58: 1240,
    63: 1241,
    64: [
      1,
      1242
    ],
    65: [
      1,
      1243
    ]
  },
  __expand__($V61, [
      2,
      108
    ], {62:[
      2,
      108
    ]
  }),
  {
    89: 1245,
    90: [
      1,
      1030
    ],
    91: [
      1,
      1031
    ]
  },
  {
    89: 1246,
    90: [
      1,
      1030
    ],
    91: [
      1,
      1031
    ]
  },
  __expand__($V61, [
      2,
      112
    ], {62:[
      2,
      112
    ]
  }),
  __expand__($V61, [
      2,
      113
    ], {62:[
      2,
      113
    ]
  }),
  __expand__($V61, [
      2,
      114
    ], {62:[
      2,
      114
    ]
  }),
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1247,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  {
    62: [
      1,
      1248
    ]
  },
  __expand__($Va1, [
      2,
      77
    ], {62:[
      2,
      77
    ]
  }),
  {
    2: [
      1,
      711
    ],
    58: 1249,
    63: 708,
    64: [
      1,
      709
    ],
    65: [
      1,
      710
    ]
  },
  {
    2: [
      1,
      785
    ],
    7: 1250,
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    23: 768,
    26: 769,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1251,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  __expand__($Vk, [
      2,
      67
    ], {62:[
      2,
      67
    ]
  }),
  {
    2: [
      1,
      730
    ],
    58: 1252,
    63: 727,
    64: [
      1,
      728
    ],
    65: [
      1,
      729
    ]
  },
  {
    2: [
      1,
      785
    ],
    7: 1253,
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    23: 768,
    26: 769,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1254,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  __expand__($Vr, [
      2,
      67
    ], {57:[
      2,
      67
    ]
  }),
  {
    2: [
      1,
      746
    ],
    58: 1255,
    63: 743,
    64: [
      1,
      744
    ],
    65: [
      1,
      745
    ]
  },
  {
    2: [
      1,
      785
    ],
    7: 1256,
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    23: 768,
    26: 769,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1257,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  __expand__($Vx, [
      2,
      67
    ], {57:[
      2,
      67
    ]
  }),
  {
    2: [
      1,
      761
    ],
    58: 1258,
    63: 758,
    64: [
      1,
      759
    ],
    65: [
      1,
      760
    ]
  },
  {
    2: [
      1,
      785
    ],
    7: 1259,
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    23: 768,
    26: 769,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1260,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  __expand__($VC, [
      2,
      67
    ], {57:[
      2,
      67
    ]
  }),
  __expand__($VF, [
      2,
      74
    ], {66:[
      2,
      74
    ]
  }),
  {
    2: [
      1,
      785
    ],
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    23: 1261,
    26: 769,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  {
    2: [
      1,
      785
    ],
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    23: 1262,
    26: 769,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  {
    2: [
      1,
      785
    ],
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    26: 1263,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  {
    2: [
      1,
      785
    ],
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    26: 1264,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  {
    2: [
      1,
      785
    ],
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    26: 1265,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  {
    2: [
      1,
      785
    ],
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    26: 1266,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  {
    2: [
      1,
      785
    ],
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    26: 1267,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  {
    2: [
      1,
      1282
    ],
    10: 1295,
    14: 1275,
    15: 1276,
    16: 1277,
    17: 1278,
    18: 1279,
    19: 1280,
    20: 1281,
    29: 1268,
    39: [
      1,
      1284
    ],
    40: [
      1,
      1283
    ],
    41: 1269,
    45: 1270,
    46: 1271,
    48: [
      1,
      1272
    ],
    52: 1273,
    53: 1274,
    55: [
      1,
      1285
    ],
    56: 1286,
    59: [
      1,
      1293
    ],
    60: [
      1,
      1294
    ],
    68: 1298,
    69: 1299,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1300
    ],
    88: [
      1,
      1289
    ],
    89: 1287,
    90: [
      1,
      1296
    ],
    91: [
      1,
      1297
    ],
    92: [
      1,
      1288
    ],
    93: [
      1,
      1290
    ],
    94: [
      1,
      1291
    ],
    95: [
      1,
      1292
    ]
  },
  {
    2: [
      1,
      785
    ],
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    29: 1301,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  {
    2: [
      1,
      785
    ],
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    29: 1302,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  {
    2: [
      1,
      1318
    ],
    10: 1331,
    14: 1311,
    15: 1312,
    16: 1313,
    17: 1314,
    18: 1315,
    19: 1316,
    20: 1317,
    29: 1304,
    32: 1303,
    39: [
      1,
      1320
    ],
    40: [
      1,
      1319
    ],
    41: 1305,
    45: 1306,
    46: 1307,
    48: [
      1,
      1308
    ],
    52: 1309,
    53: 1310,
    55: [
      1,
      1321
    ],
    56: 1322,
    59: [
      1,
      1329
    ],
    60: [
      1,
      1330
    ],
    68: 1334,
    69: 1335,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1336
    ],
    88: [
      1,
      1325
    ],
    89: 1323,
    90: [
      1,
      1332
    ],
    91: [
      1,
      1333
    ],
    92: [
      1,
      1324
    ],
    93: [
      1,
      1326
    ],
    94: [
      1,
      1327
    ],
    95: [
      1,
      1328
    ]
  },
  {
    2: [
      1,
      1318
    ],
    10: 1331,
    14: 1311,
    15: 1312,
    16: 1313,
    17: 1314,
    18: 1315,
    19: 1316,
    20: 1317,
    29: 1304,
    32: 1337,
    39: [
      1,
      1320
    ],
    40: [
      1,
      1319
    ],
    41: 1305,
    45: 1306,
    46: 1307,
    48: [
      1,
      1308
    ],
    52: 1309,
    53: 1310,
    55: [
      1,
      1321
    ],
    56: 1322,
    59: [
      1,
      1329
    ],
    60: [
      1,
      1330
    ],
    68: 1334,
    69: 1335,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1336
    ],
    88: [
      1,
      1325
    ],
    89: 1323,
    90: [
      1,
      1332
    ],
    91: [
      1,
      1333
    ],
    92: [
      1,
      1324
    ],
    93: [
      1,
      1326
    ],
    94: [
      1,
      1327
    ],
    95: [
      1,
      1328
    ]
  },
  {
    2: [
      1,
      1318
    ],
    10: 1331,
    14: 1311,
    15: 1312,
    16: 1313,
    17: 1314,
    18: 1315,
    19: 1316,
    20: 1317,
    29: 1304,
    32: 1338,
    39: [
      1,
      1320
    ],
    40: [
      1,
      1319
    ],
    41: 1305,
    45: 1306,
    46: 1307,
    48: [
      1,
      1308
    ],
    52: 1309,
    53: 1310,
    55: [
      1,
      1321
    ],
    56: 1322,
    59: [
      1,
      1329
    ],
    60: [
      1,
      1330
    ],
    68: 1334,
    69: 1335,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1336
    ],
    88: [
      1,
      1325
    ],
    89: 1323,
    90: [
      1,
      1332
    ],
    91: [
      1,
      1333
    ],
    92: [
      1,
      1324
    ],
    93: [
      1,
      1326
    ],
    94: [
      1,
      1327
    ],
    95: [
      1,
      1328
    ]
  },
  {
    2: [
      1,
      1318
    ],
    10: 1331,
    14: 1311,
    15: 1312,
    16: 1313,
    17: 1314,
    18: 1315,
    19: 1316,
    20: 1317,
    29: 1304,
    32: 1339,
    39: [
      1,
      1320
    ],
    40: [
      1,
      1319
    ],
    41: 1305,
    45: 1306,
    46: 1307,
    48: [
      1,
      1308
    ],
    52: 1309,
    53: 1310,
    55: [
      1,
      1321
    ],
    56: 1322,
    59: [
      1,
      1329
    ],
    60: [
      1,
      1330
    ],
    68: 1334,
    69: 1335,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1336
    ],
    88: [
      1,
      1325
    ],
    89: 1323,
    90: [
      1,
      1332
    ],
    91: [
      1,
      1333
    ],
    92: [
      1,
      1324
    ],
    93: [
      1,
      1326
    ],
    94: [
      1,
      1327
    ],
    95: [
      1,
      1328
    ]
  },
  {
    2: [
      1,
      1355
    ],
    10: 1368,
    14: 1348,
    15: 1349,
    16: 1350,
    17: 1351,
    18: 1352,
    19: 1353,
    20: 1354,
    29: 1341,
    32: 1340,
    39: [
      1,
      1357
    ],
    40: [
      1,
      1356
    ],
    41: 1342,
    45: 1343,
    46: 1344,
    48: [
      1,
      1345
    ],
    52: 1346,
    53: 1347,
    55: [
      1,
      1358
    ],
    56: 1359,
    59: [
      1,
      1366
    ],
    60: [
      1,
      1367
    ],
    68: 1371,
    69: 1372,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1373
    ],
    88: [
      1,
      1362
    ],
    89: 1360,
    90: [
      1,
      1369
    ],
    91: [
      1,
      1370
    ],
    92: [
      1,
      1361
    ],
    93: [
      1,
      1363
    ],
    94: [
      1,
      1364
    ],
    95: [
      1,
      1365
    ]
  },
  {
    2: [
      1,
      785
    ],
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 1374,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  {
    2: [
      1,
      785
    ],
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 1375,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  {
    2: [
      1,
      785
    ],
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 1376,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  __expand__($Vf, [
      2,
      46
    ], {67:[
      2,
      46
    ]
  }),
  __expand__($Vf, [
      2,
      47
    ], {67:[
      2,
      47
    ]
  }),
  __expand__($Vf, [
      2,
      48
    ], {67:[
      2,
      48
    ]
  }),
  {
    2: [
      1,
      785
    ],
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    45: 1377,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  __expand__($Vf, [
      2,
      45
    ], {67:[
      2,
      45
    ]
  }),
  __expand__($Vg, [
      2,
      105
    ], {67:[
      2,
      105
    ]
  }),
  __expand__($Vg, [
      2,
      106
    ], {67:[
      2,
      106
    ]
  }),
  __expand__($Vg, [
      2,
      109
    ], {67:[
      2,
      109
    ]
  }),
  __expand__($Vg, [
      2,
      107
    ], {67:[
      2,
      107
    ]
  }),
  __expand__($Vg, [
      2,
      60
    ], {67:[
      2,
      60
    ]
  }),
  __expand__($Vn1, [
      2,
      110
    ], {88:[
      2,
      110
    ]
  }),
  __expand__($Vg, [
      2,
      116
    ], {67:[
      2,
      116
    ]
  }),
  __expand__($Vg, [
      2,
      63
    ], {67:[
      2,
      63
    ]
  }),
  __expand__($Vg, [
      2,
      64
    ], {67:[
      2,
      64
    ]
  }),
  __expand__($Vg, [
      2,
      61
    ], {67:[
      2,
      61
    ]
  }),
  __expand__($Vn1, [
      2,
      111
    ], {88:[
      2,
      111
    ]
  }),
  __expand__($Vg, [
      2,
      117
    ], {67:[
      2,
      117
    ]
  }),
  __expand__($Vg, [
      2,
      62
    ], {67:[
      2,
      62
    ]
  }),
  {
    2: [
      1,
      1382
    ],
    58: 1378,
    63: 1379,
    64: [
      1,
      1380
    ],
    65: [
      1,
      1381
    ]
  },
  __expand__($Vg, [
      2,
      108
    ], {67:[
      2,
      108
    ]
  }),
  {
    89: 1383,
    90: [
      1,
      1093
    ],
    91: [
      1,
      1094
    ]
  },
  {
    89: 1384,
    90: [
      1,
      1093
    ],
    91: [
      1,
      1094
    ]
  },
  __expand__($Vg, [
      2,
      112
    ], {67:[
      2,
      112
    ]
  }),
  __expand__($Vg, [
      2,
      113
    ], {67:[
      2,
      113
    ]
  }),
  __expand__($Vg, [
      2,
      114
    ], {67:[
      2,
      114
    ]
  }),
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1385,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  {
    62: [
      1,
      1386
    ]
  },
  __expand__($Vk, [
      2,
      77
    ], {67:[
      2,
      77
    ]
  }),
  __expand__($VF, [
      2,
      73
    ], {66:[
      2,
      73
    ]
  }),
  {
    2: [
      1,
      829
    ],
    10: 842,
    14: 822,
    15: 823,
    16: 824,
    17: 825,
    18: 826,
    19: 827,
    20: 828,
    29: 1387,
    39: [
      1,
      831
    ],
    40: [
      1,
      830
    ],
    41: 816,
    45: 817,
    46: 818,
    48: [
      1,
      819
    ],
    52: 820,
    53: 821,
    55: [
      1,
      832
    ],
    56: 833,
    59: [
      1,
      840
    ],
    60: [
      1,
      841
    ],
    68: 845,
    69: 846,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      847
    ],
    88: [
      1,
      836
    ],
    89: 834,
    90: [
      1,
      843
    ],
    91: [
      1,
      844
    ],
    92: [
      1,
      835
    ],
    93: [
      1,
      837
    ],
    94: [
      1,
      838
    ],
    95: [
      1,
      839
    ]
  },
  {
    2: [
      1,
      829
    ],
    10: 842,
    14: 822,
    15: 823,
    16: 824,
    17: 825,
    18: 826,
    19: 827,
    20: 828,
    29: 1388,
    39: [
      1,
      831
    ],
    40: [
      1,
      830
    ],
    41: 816,
    45: 817,
    46: 818,
    48: [
      1,
      819
    ],
    52: 820,
    53: 821,
    55: [
      1,
      832
    ],
    56: 833,
    59: [
      1,
      840
    ],
    60: [
      1,
      841
    ],
    68: 845,
    69: 846,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      847
    ],
    88: [
      1,
      836
    ],
    89: 834,
    90: [
      1,
      843
    ],
    91: [
      1,
      844
    ],
    92: [
      1,
      835
    ],
    93: [
      1,
      837
    ],
    94: [
      1,
      838
    ],
    95: [
      1,
      839
    ]
  },
  {
    2: [
      1,
      829
    ],
    10: 842,
    14: 822,
    15: 823,
    16: 824,
    17: 825,
    18: 826,
    19: 827,
    20: 828,
    39: [
      1,
      831
    ],
    40: [
      1,
      830
    ],
    41: 1389,
    45: 817,
    46: 818,
    48: [
      1,
      819
    ],
    52: 820,
    53: 821,
    55: [
      1,
      832
    ],
    56: 833,
    59: [
      1,
      840
    ],
    60: [
      1,
      841
    ],
    68: 845,
    69: 846,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      847
    ],
    88: [
      1,
      836
    ],
    89: 834,
    90: [
      1,
      843
    ],
    91: [
      1,
      844
    ],
    92: [
      1,
      835
    ],
    93: [
      1,
      837
    ],
    94: [
      1,
      838
    ],
    95: [
      1,
      839
    ]
  },
  {
    2: [
      1,
      829
    ],
    10: 842,
    14: 822,
    15: 823,
    16: 824,
    17: 825,
    18: 826,
    19: 827,
    20: 828,
    39: [
      1,
      831
    ],
    40: [
      1,
      830
    ],
    41: 1390,
    45: 817,
    46: 818,
    48: [
      1,
      819
    ],
    52: 820,
    53: 821,
    55: [
      1,
      832
    ],
    56: 833,
    59: [
      1,
      840
    ],
    60: [
      1,
      841
    ],
    68: 845,
    69: 846,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      847
    ],
    88: [
      1,
      836
    ],
    89: 834,
    90: [
      1,
      843
    ],
    91: [
      1,
      844
    ],
    92: [
      1,
      835
    ],
    93: [
      1,
      837
    ],
    94: [
      1,
      838
    ],
    95: [
      1,
      839
    ]
  },
  {
    2: [
      1,
      829
    ],
    10: 842,
    14: 822,
    15: 823,
    16: 824,
    17: 825,
    18: 826,
    19: 827,
    20: 828,
    39: [
      1,
      831
    ],
    40: [
      1,
      830
    ],
    41: 1391,
    45: 817,
    46: 818,
    48: [
      1,
      819
    ],
    52: 820,
    53: 821,
    55: [
      1,
      832
    ],
    56: 833,
    59: [
      1,
      840
    ],
    60: [
      1,
      841
    ],
    68: 845,
    69: 846,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      847
    ],
    88: [
      1,
      836
    ],
    89: 834,
    90: [
      1,
      843
    ],
    91: [
      1,
      844
    ],
    92: [
      1,
      835
    ],
    93: [
      1,
      837
    ],
    94: [
      1,
      838
    ],
    95: [
      1,
      839
    ]
  },
  __expand__($Vp1, [
      2,
      46
    ], {81:[
      2,
      46
    ]
  }),
  __expand__($Vp1, [
      2,
      47
    ], {81:[
      2,
      47
    ]
  }),
  __expand__($Vp1, [
      2,
      48
    ], {81:[
      2,
      48
    ]
  }),
  {
    2: [
      1,
      829
    ],
    10: 842,
    14: 822,
    15: 823,
    16: 824,
    17: 825,
    18: 826,
    19: 827,
    20: 828,
    39: [
      1,
      831
    ],
    40: [
      1,
      830
    ],
    45: 1392,
    46: 818,
    48: [
      1,
      819
    ],
    52: 820,
    53: 821,
    55: [
      1,
      832
    ],
    56: 833,
    59: [
      1,
      840
    ],
    60: [
      1,
      841
    ],
    68: 845,
    69: 846,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      847
    ],
    88: [
      1,
      836
    ],
    89: 834,
    90: [
      1,
      843
    ],
    91: [
      1,
      844
    ],
    92: [
      1,
      835
    ],
    93: [
      1,
      837
    ],
    94: [
      1,
      838
    ],
    95: [
      1,
      839
    ]
  },
  __expand__($Vp1, [
      2,
      45
    ], {81:[
      2,
      45
    ]
  }),
  __expand__($VS, [
      2,
      105
    ], {81:[
      2,
      105
    ]
  }),
  __expand__($VS, [
      2,
      106
    ], {81:[
      2,
      106
    ]
  }),
  __expand__($VS, [
      2,
      109
    ], {81:[
      2,
      109
    ]
  }),
  __expand__($VS, [
      2,
      107
    ], {81:[
      2,
      107
    ]
  }),
  __expand__($VS, [
      2,
      60
    ], {81:[
      2,
      60
    ]
  }),
  __expand__($Vq1, [
      2,
      110
    ], {88:[
      2,
      110
    ]
  }),
  __expand__($VS, [
      2,
      116
    ], {81:[
      2,
      116
    ]
  }),
  __expand__($VS, [
      2,
      63
    ], {81:[
      2,
      63
    ]
  }),
  __expand__($VS, [
      2,
      64
    ], {81:[
      2,
      64
    ]
  }),
  __expand__($VS, [
      2,
      61
    ], {81:[
      2,
      61
    ]
  }),
  __expand__($Vq1, [
      2,
      111
    ], {88:[
      2,
      111
    ]
  }),
  __expand__($VS, [
      2,
      117
    ], {81:[
      2,
      117
    ]
  }),
  __expand__($VS, [
      2,
      62
    ], {81:[
      2,
      62
    ]
  }),
  {
    2: [
      1,
      1397
    ],
    58: 1393,
    63: 1394,
    64: [
      1,
      1395
    ],
    65: [
      1,
      1396
    ]
  },
  __expand__($VS, [
      2,
      108
    ], {81:[
      2,
      108
    ]
  }),
  {
    89: 1398,
    90: [
      1,
      1127
    ],
    91: [
      1,
      1128
    ]
  },
  {
    89: 1399,
    90: [
      1,
      1127
    ],
    91: [
      1,
      1128
    ]
  },
  __expand__($VS, [
      2,
      112
    ], {81:[
      2,
      112
    ]
  }),
  __expand__($VS, [
      2,
      113
    ], {81:[
      2,
      113
    ]
  }),
  __expand__($VS, [
      2,
      114
    ], {81:[
      2,
      114
    ]
  }),
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1400,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  {
    62: [
      1,
      1401
    ]
  },
  __expand__($Vr1, [
      2,
      77
    ], {81:[
      2,
      77
    ]
  }),
  {
    2: [
      1,
      865
    ],
    10: 878,
    14: 858,
    15: 859,
    16: 860,
    17: 861,
    18: 862,
    19: 863,
    20: 864,
    29: 851,
    32: 1402,
    39: [
      1,
      867
    ],
    40: [
      1,
      866
    ],
    41: 852,
    45: 853,
    46: 854,
    48: [
      1,
      855
    ],
    52: 856,
    53: 857,
    55: [
      1,
      868
    ],
    56: 869,
    59: [
      1,
      876
    ],
    60: [
      1,
      877
    ],
    68: 881,
    69: 882,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      883
    ],
    88: [
      1,
      872
    ],
    89: 870,
    90: [
      1,
      879
    ],
    91: [
      1,
      880
    ],
    92: [
      1,
      871
    ],
    93: [
      1,
      873
    ],
    94: [
      1,
      874
    ],
    95: [
      1,
      875
    ]
  },
  {
    2: [
      1,
      865
    ],
    10: 878,
    14: 858,
    15: 859,
    16: 860,
    17: 861,
    18: 862,
    19: 863,
    20: 864,
    29: 1403,
    39: [
      1,
      867
    ],
    40: [
      1,
      866
    ],
    41: 852,
    45: 853,
    46: 854,
    48: [
      1,
      855
    ],
    52: 856,
    53: 857,
    55: [
      1,
      868
    ],
    56: 869,
    59: [
      1,
      876
    ],
    60: [
      1,
      877
    ],
    68: 881,
    69: 882,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      883
    ],
    88: [
      1,
      872
    ],
    89: 870,
    90: [
      1,
      879
    ],
    91: [
      1,
      880
    ],
    92: [
      1,
      871
    ],
    93: [
      1,
      873
    ],
    94: [
      1,
      874
    ],
    95: [
      1,
      875
    ]
  },
  {
    2: [
      1,
      865
    ],
    10: 878,
    14: 858,
    15: 859,
    16: 860,
    17: 861,
    18: 862,
    19: 863,
    20: 864,
    29: 1404,
    39: [
      1,
      867
    ],
    40: [
      1,
      866
    ],
    41: 852,
    45: 853,
    46: 854,
    48: [
      1,
      855
    ],
    52: 856,
    53: 857,
    55: [
      1,
      868
    ],
    56: 869,
    59: [
      1,
      876
    ],
    60: [
      1,
      877
    ],
    68: 881,
    69: 882,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      883
    ],
    88: [
      1,
      872
    ],
    89: 870,
    90: [
      1,
      879
    ],
    91: [
      1,
      880
    ],
    92: [
      1,
      871
    ],
    93: [
      1,
      873
    ],
    94: [
      1,
      874
    ],
    95: [
      1,
      875
    ]
  },
  {
    2: [
      1,
      865
    ],
    10: 878,
    14: 858,
    15: 859,
    16: 860,
    17: 861,
    18: 862,
    19: 863,
    20: 864,
    39: [
      1,
      867
    ],
    40: [
      1,
      866
    ],
    41: 1405,
    45: 853,
    46: 854,
    48: [
      1,
      855
    ],
    52: 856,
    53: 857,
    55: [
      1,
      868
    ],
    56: 869,
    59: [
      1,
      876
    ],
    60: [
      1,
      877
    ],
    68: 881,
    69: 882,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      883
    ],
    88: [
      1,
      872
    ],
    89: 870,
    90: [
      1,
      879
    ],
    91: [
      1,
      880
    ],
    92: [
      1,
      871
    ],
    93: [
      1,
      873
    ],
    94: [
      1,
      874
    ],
    95: [
      1,
      875
    ]
  },
  {
    2: [
      1,
      865
    ],
    10: 878,
    14: 858,
    15: 859,
    16: 860,
    17: 861,
    18: 862,
    19: 863,
    20: 864,
    39: [
      1,
      867
    ],
    40: [
      1,
      866
    ],
    41: 1406,
    45: 853,
    46: 854,
    48: [
      1,
      855
    ],
    52: 856,
    53: 857,
    55: [
      1,
      868
    ],
    56: 869,
    59: [
      1,
      876
    ],
    60: [
      1,
      877
    ],
    68: 881,
    69: 882,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      883
    ],
    88: [
      1,
      872
    ],
    89: 870,
    90: [
      1,
      879
    ],
    91: [
      1,
      880
    ],
    92: [
      1,
      871
    ],
    93: [
      1,
      873
    ],
    94: [
      1,
      874
    ],
    95: [
      1,
      875
    ]
  },
  {
    2: [
      1,
      865
    ],
    10: 878,
    14: 858,
    15: 859,
    16: 860,
    17: 861,
    18: 862,
    19: 863,
    20: 864,
    39: [
      1,
      867
    ],
    40: [
      1,
      866
    ],
    41: 1407,
    45: 853,
    46: 854,
    48: [
      1,
      855
    ],
    52: 856,
    53: 857,
    55: [
      1,
      868
    ],
    56: 869,
    59: [
      1,
      876
    ],
    60: [
      1,
      877
    ],
    68: 881,
    69: 882,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      883
    ],
    88: [
      1,
      872
    ],
    89: 870,
    90: [
      1,
      879
    ],
    91: [
      1,
      880
    ],
    92: [
      1,
      871
    ],
    93: [
      1,
      873
    ],
    94: [
      1,
      874
    ],
    95: [
      1,
      875
    ]
  },
  __expand__($Vu1, [
      2,
      46
    ], {81:[
      2,
      46
    ]
  }),
  __expand__($Vu1, [
      2,
      47
    ], {81:[
      2,
      47
    ]
  }),
  __expand__($Vu1, [
      2,
      48
    ], {81:[
      2,
      48
    ]
  }),
  {
    2: [
      1,
      865
    ],
    10: 878,
    14: 858,
    15: 859,
    16: 860,
    17: 861,
    18: 862,
    19: 863,
    20: 864,
    39: [
      1,
      867
    ],
    40: [
      1,
      866
    ],
    45: 1408,
    46: 854,
    48: [
      1,
      855
    ],
    52: 856,
    53: 857,
    55: [
      1,
      868
    ],
    56: 869,
    59: [
      1,
      876
    ],
    60: [
      1,
      877
    ],
    68: 881,
    69: 882,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      883
    ],
    88: [
      1,
      872
    ],
    89: 870,
    90: [
      1,
      879
    ],
    91: [
      1,
      880
    ],
    92: [
      1,
      871
    ],
    93: [
      1,
      873
    ],
    94: [
      1,
      874
    ],
    95: [
      1,
      875
    ]
  },
  __expand__($Vu1, [
      2,
      45
    ], {81:[
      2,
      45
    ]
  }),
  __expand__($V$, [
      2,
      105
    ], {81:[
      2,
      105
    ]
  }),
  __expand__($V$, [
      2,
      106
    ], {81:[
      2,
      106
    ]
  }),
  __expand__($V$, [
      2,
      109
    ], {81:[
      2,
      109
    ]
  }),
  __expand__($V$, [
      2,
      107
    ], {81:[
      2,
      107
    ]
  }),
  __expand__($V$, [
      2,
      60
    ], {81:[
      2,
      60
    ]
  }),
  __expand__($Vv1, [
      2,
      110
    ], {88:[
      2,
      110
    ]
  }),
  __expand__($V$, [
      2,
      116
    ], {81:[
      2,
      116
    ]
  }),
  __expand__($V$, [
      2,
      63
    ], {81:[
      2,
      63
    ]
  }),
  __expand__($V$, [
      2,
      64
    ], {81:[
      2,
      64
    ]
  }),
  __expand__($V$, [
      2,
      61
    ], {81:[
      2,
      61
    ]
  }),
  __expand__($Vv1, [
      2,
      111
    ], {88:[
      2,
      111
    ]
  }),
  __expand__($V$, [
      2,
      117
    ], {81:[
      2,
      117
    ]
  }),
  __expand__($V$, [
      2,
      62
    ], {81:[
      2,
      62
    ]
  }),
  {
    2: [
      1,
      1413
    ],
    58: 1409,
    63: 1410,
    64: [
      1,
      1411
    ],
    65: [
      1,
      1412
    ]
  },
  __expand__($V$, [
      2,
      108
    ], {81:[
      2,
      108
    ]
  }),
  {
    89: 1414,
    90: [
      1,
      1161
    ],
    91: [
      1,
      1162
    ]
  },
  {
    89: 1415,
    90: [
      1,
      1161
    ],
    91: [
      1,
      1162
    ]
  },
  __expand__($V$, [
      2,
      112
    ], {81:[
      2,
      112
    ]
  }),
  __expand__($V$, [
      2,
      113
    ], {81:[
      2,
      113
    ]
  }),
  __expand__($V$, [
      2,
      114
    ], {81:[
      2,
      114
    ]
  }),
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1416,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  {
    62: [
      1,
      1417
    ]
  },
  __expand__($Vw1, [
      2,
      77
    ], {81:[
      2,
      77
    ]
  }),
  {
    2: [
      1,
      902
    ],
    10: 915,
    14: 895,
    15: 896,
    16: 897,
    17: 898,
    18: 899,
    19: 900,
    20: 901,
    29: 1418,
    39: [
      1,
      904
    ],
    40: [
      1,
      903
    ],
    41: 889,
    45: 890,
    46: 891,
    48: [
      1,
      892
    ],
    52: 893,
    53: 894,
    55: [
      1,
      905
    ],
    56: 906,
    59: [
      1,
      913
    ],
    60: [
      1,
      914
    ],
    68: 918,
    69: 919,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      920
    ],
    88: [
      1,
      909
    ],
    89: 907,
    90: [
      1,
      916
    ],
    91: [
      1,
      917
    ],
    92: [
      1,
      908
    ],
    93: [
      1,
      910
    ],
    94: [
      1,
      911
    ],
    95: [
      1,
      912
    ]
  },
  {
    2: [
      1,
      902
    ],
    10: 915,
    14: 895,
    15: 896,
    16: 897,
    17: 898,
    18: 899,
    19: 900,
    20: 901,
    29: 1419,
    39: [
      1,
      904
    ],
    40: [
      1,
      903
    ],
    41: 889,
    45: 890,
    46: 891,
    48: [
      1,
      892
    ],
    52: 893,
    53: 894,
    55: [
      1,
      905
    ],
    56: 906,
    59: [
      1,
      913
    ],
    60: [
      1,
      914
    ],
    68: 918,
    69: 919,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      920
    ],
    88: [
      1,
      909
    ],
    89: 907,
    90: [
      1,
      916
    ],
    91: [
      1,
      917
    ],
    92: [
      1,
      908
    ],
    93: [
      1,
      910
    ],
    94: [
      1,
      911
    ],
    95: [
      1,
      912
    ]
  },
  {
    2: [
      1,
      902
    ],
    10: 915,
    14: 895,
    15: 896,
    16: 897,
    17: 898,
    18: 899,
    19: 900,
    20: 901,
    39: [
      1,
      904
    ],
    40: [
      1,
      903
    ],
    41: 1420,
    45: 890,
    46: 891,
    48: [
      1,
      892
    ],
    52: 893,
    53: 894,
    55: [
      1,
      905
    ],
    56: 906,
    59: [
      1,
      913
    ],
    60: [
      1,
      914
    ],
    68: 918,
    69: 919,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      920
    ],
    88: [
      1,
      909
    ],
    89: 907,
    90: [
      1,
      916
    ],
    91: [
      1,
      917
    ],
    92: [
      1,
      908
    ],
    93: [
      1,
      910
    ],
    94: [
      1,
      911
    ],
    95: [
      1,
      912
    ]
  },
  {
    2: [
      1,
      902
    ],
    10: 915,
    14: 895,
    15: 896,
    16: 897,
    17: 898,
    18: 899,
    19: 900,
    20: 901,
    39: [
      1,
      904
    ],
    40: [
      1,
      903
    ],
    41: 1421,
    45: 890,
    46: 891,
    48: [
      1,
      892
    ],
    52: 893,
    53: 894,
    55: [
      1,
      905
    ],
    56: 906,
    59: [
      1,
      913
    ],
    60: [
      1,
      914
    ],
    68: 918,
    69: 919,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      920
    ],
    88: [
      1,
      909
    ],
    89: 907,
    90: [
      1,
      916
    ],
    91: [
      1,
      917
    ],
    92: [
      1,
      908
    ],
    93: [
      1,
      910
    ],
    94: [
      1,
      911
    ],
    95: [
      1,
      912
    ]
  },
  {
    2: [
      1,
      902
    ],
    10: 915,
    14: 895,
    15: 896,
    16: 897,
    17: 898,
    18: 899,
    19: 900,
    20: 901,
    39: [
      1,
      904
    ],
    40: [
      1,
      903
    ],
    41: 1422,
    45: 890,
    46: 891,
    48: [
      1,
      892
    ],
    52: 893,
    53: 894,
    55: [
      1,
      905
    ],
    56: 906,
    59: [
      1,
      913
    ],
    60: [
      1,
      914
    ],
    68: 918,
    69: 919,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      920
    ],
    88: [
      1,
      909
    ],
    89: 907,
    90: [
      1,
      916
    ],
    91: [
      1,
      917
    ],
    92: [
      1,
      908
    ],
    93: [
      1,
      910
    ],
    94: [
      1,
      911
    ],
    95: [
      1,
      912
    ]
  },
  __expand__($Vy1, [
      2,
      46
    ], {81:[
      2,
      46
    ]
  }),
  __expand__($Vy1, [
      2,
      47
    ], {81:[
      2,
      47
    ]
  }),
  __expand__($Vy1, [
      2,
      48
    ], {81:[
      2,
      48
    ]
  }),
  {
    2: [
      1,
      902
    ],
    10: 915,
    14: 895,
    15: 896,
    16: 897,
    17: 898,
    18: 899,
    19: 900,
    20: 901,
    39: [
      1,
      904
    ],
    40: [
      1,
      903
    ],
    45: 1423,
    46: 891,
    48: [
      1,
      892
    ],
    52: 893,
    53: 894,
    55: [
      1,
      905
    ],
    56: 906,
    59: [
      1,
      913
    ],
    60: [
      1,
      914
    ],
    68: 918,
    69: 919,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      920
    ],
    88: [
      1,
      909
    ],
    89: 907,
    90: [
      1,
      916
    ],
    91: [
      1,
      917
    ],
    92: [
      1,
      908
    ],
    93: [
      1,
      910
    ],
    94: [
      1,
      911
    ],
    95: [
      1,
      912
    ]
  },
  __expand__($Vy1, [
      2,
      45
    ], {81:[
      2,
      45
    ]
  }),
  __expand__($V71, [
      2,
      105
    ], {81:[
      2,
      105
    ]
  }),
  __expand__($V71, [
      2,
      106
    ], {81:[
      2,
      106
    ]
  }),
  __expand__($V71, [
      2,
      109
    ], {81:[
      2,
      109
    ]
  }),
  __expand__($V71, [
      2,
      107
    ], {81:[
      2,
      107
    ]
  }),
  __expand__($V71, [
      2,
      60
    ], {81:[
      2,
      60
    ]
  }),
  __expand__($Vz1, [
      2,
      110
    ], {88:[
      2,
      110
    ]
  }),
  __expand__($V71, [
      2,
      116
    ], {81:[
      2,
      116
    ]
  }),
  __expand__($V71, [
      2,
      63
    ], {81:[
      2,
      63
    ]
  }),
  __expand__($V71, [
      2,
      64
    ], {81:[
      2,
      64
    ]
  }),
  __expand__($V71, [
      2,
      61
    ], {81:[
      2,
      61
    ]
  }),
  __expand__($Vz1, [
      2,
      111
    ], {88:[
      2,
      111
    ]
  }),
  __expand__($V71, [
      2,
      117
    ], {81:[
      2,
      117
    ]
  }),
  __expand__($V71, [
      2,
      62
    ], {81:[
      2,
      62
    ]
  }),
  {
    2: [
      1,
      1428
    ],
    58: 1424,
    63: 1425,
    64: [
      1,
      1426
    ],
    65: [
      1,
      1427
    ]
  },
  __expand__($V71, [
      2,
      108
    ], {81:[
      2,
      108
    ]
  }),
  {
    89: 1429,
    90: [
      1,
      1194
    ],
    91: [
      1,
      1195
    ]
  },
  {
    89: 1430,
    90: [
      1,
      1194
    ],
    91: [
      1,
      1195
    ]
  },
  __expand__($V71, [
      2,
      112
    ], {81:[
      2,
      112
    ]
  }),
  __expand__($V71, [
      2,
      113
    ], {81:[
      2,
      113
    ]
  }),
  __expand__($V71, [
      2,
      114
    ], {81:[
      2,
      114
    ]
  }),
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1431,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  {
    62: [
      1,
      1432
    ]
  },
  __expand__($VA1, [
      2,
      77
    ], {81:[
      2,
      77
    ]
  }),
  {
    2: [
      1,
      930
    ],
    58: 1433,
    63: 927,
    64: [
      1,
      928
    ],
    65: [
      1,
      929
    ]
  },
  {
    2: [
      1,
      785
    ],
    7: 1434,
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    23: 768,
    26: 769,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1435,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  __expand__($VN, [
      2,
      67
    ], {81:[
      2,
      67
    ]
  }),
  __expand__($VO, [
      2,
      37
    ], {62:[
      2,
      37
    ]
  }),
  __expand__($VO, [
      2,
      38
    ], {62:[
      2,
      38
    ]
  }),
  __expand__($VD1, [
      2,
      40
    ], {44:[
      1,
      939
    ],62:[
      2,
      40
    ]
  }),
  __expand__($VD1, [
      2,
      41
    ], {44:[
      1,
      939
    ],62:[
      2,
      41
    ]
  }),
  __expand__($VD1, [
      2,
      42
    ], {44:[
      1,
      939
    ],62:[
      2,
      42
    ]
  }),
  __expand__($VE1, [
      2,
      44
    ], {49:[
      1,
      940
    ],50:[
      1,
      941
    ],62:[
      2,
      44
    ]
  }),
  __expand__($VR, [
      2,
      66
    ], {62:[
      2,
      66
    ]
  }),
  __expand__($VS, [
      2,
      70
    ], {57:[
      1,
      1436
    ],66:[
      1,
      1437
    ]
  }),
  __expand__($Vr1, [
      2,
      72
    ], {66:[
      2,
      72
    ]
  }),
  {
    60: [
      1,
      1438
    ]
  },
  __expand__($Vr1, [
      2,
      75
    ], {66:[
      2,
      75
    ]
  }),
  __expand__($VR, [
      2,
      110
    ], {62:[
      2,
      110
    ]
  }),
  __expand__($VR, [
      2,
      111
    ], {62:[
      2,
      111
    ]
  }),
  {
    62: [
      1,
      1439
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($VV, [
      2,
      68
    ], {62:[
      2,
      68
    ]
  }),
  __expand__($VW, [
      2,
      35
    ], {62:[
      2,
      35
    ]
  }),
  __expand__($VX, [
      2,
      37
    ], {62:[
      2,
      37
    ]
  }),
  __expand__($VX, [
      2,
      38
    ], {62:[
      2,
      38
    ]
  }),
  __expand__($VF1, [
      2,
      40
    ], {44:[
      1,
      973
    ],62:[
      2,
      40
    ]
  }),
  __expand__($VF1, [
      2,
      41
    ], {44:[
      1,
      973
    ],62:[
      2,
      41
    ]
  }),
  __expand__($VF1, [
      2,
      42
    ], {44:[
      1,
      973
    ],62:[
      2,
      42
    ]
  }),
  __expand__($VG1, [
      2,
      44
    ], {49:[
      1,
      974
    ],50:[
      1,
      975
    ],62:[
      2,
      44
    ]
  }),
  __expand__($V_, [
      2,
      66
    ], {62:[
      2,
      66
    ]
  }),
  __expand__($V$, [
      2,
      70
    ], {57:[
      1,
      1440
    ],66:[
      1,
      1441
    ]
  }),
  __expand__($Vw1, [
      2,
      72
    ], {66:[
      2,
      72
    ]
  }),
  {
    60: [
      1,
      1442
    ]
  },
  __expand__($Vw1, [
      2,
      75
    ], {66:[
      2,
      75
    ]
  }),
  __expand__($V_, [
      2,
      110
    ], {62:[
      2,
      110
    ]
  }),
  __expand__($V_, [
      2,
      111
    ], {62:[
      2,
      111
    ]
  }),
  {
    62: [
      1,
      1443
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($V21, [
      2,
      68
    ], {62:[
      2,
      68
    ]
  }),
  __expand__($V31, [
      2,
      37
    ], {62:[
      2,
      37
    ]
  }),
  __expand__($V31, [
      2,
      38
    ], {62:[
      2,
      38
    ]
  }),
  __expand__($VH1, [
      2,
      40
    ], {44:[
      1,
      1006
    ],62:[
      2,
      40
    ]
  }),
  __expand__($VH1, [
      2,
      41
    ], {44:[
      1,
      1006
    ],62:[
      2,
      41
    ]
  }),
  __expand__($VH1, [
      2,
      42
    ], {44:[
      1,
      1006
    ],62:[
      2,
      42
    ]
  }),
  __expand__($VI1, [
      2,
      44
    ], {49:[
      1,
      1007
    ],50:[
      1,
      1008
    ],62:[
      2,
      44
    ]
  }),
  __expand__($V61, [
      2,
      66
    ], {62:[
      2,
      66
    ]
  }),
  __expand__($V71, [
      2,
      70
    ], {57:[
      1,
      1444
    ],66:[
      1,
      1445
    ]
  }),
  __expand__($VA1, [
      2,
      72
    ], {66:[
      2,
      72
    ]
  }),
  {
    60: [
      1,
      1446
    ]
  },
  __expand__($VA1, [
      2,
      75
    ], {66:[
      2,
      75
    ]
  }),
  __expand__($V61, [
      2,
      110
    ], {62:[
      2,
      110
    ]
  }),
  __expand__($V61, [
      2,
      111
    ], {62:[
      2,
      111
    ]
  }),
  {
    62: [
      1,
      1447
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($Va1, [
      2,
      68
    ], {62:[
      2,
      68
    ]
  }),
  __expand__($Vg, [
      2,
      71
    ], {62:[
      2,
      71
    ]
  }),
  {
    67: [
      1,
      1448
    ]
  },
  {
    62: [
      1,
      1449
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($Vq, [
      2,
      71
    ], {51:[
      2,
      71
    ]
  }),
  {
    67: [
      1,
      1450
    ]
  },
  {
    62: [
      1,
      1451
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($Vw, [
      2,
      71
    ], {51:[
      2,
      71
    ]
  }),
  {
    67: [
      1,
      1452
    ]
  },
  {
    62: [
      1,
      1453
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($VB, [
      2,
      71
    ], {51:[
      2,
      71
    ]
  }),
  {
    67: [
      1,
      1454
    ]
  },
  {
    62: [
      1,
      1455
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($Va, [
      2,
      21
    ], {67:[
      2,
      21
    ]
  }),
  __expand__($Va, [
      2,
      22
    ], {67:[
      2,
      22
    ]
  }),
  __expand__($Vc, [
      2,
      24
    ], {67:[
      2,
      24
    ]
  }),
  __expand__($Vc, [
      2,
      25
    ], {67:[
      2,
      25
    ]
  }),
  __expand__($Vc, [
      2,
      27
    ], {67:[
      2,
      27
    ]
  }),
  __expand__($Vc, [
      2,
      32
    ], {67:[
      2,
      32
    ]
  }),
  __expand__($Vc, [
      2,
      33
    ], {67:[
      2,
      33
    ]
  }),
  __expand__($Vc, [
      2,
      26
    ], {39:[
      1,
      1456
    ],40:[
      1,
      1457
    ],67:[
      2,
      26
    ]
  }),
  __expand__($VO, [
      2,
      39
    ], {42:[
      1,
      1458
    ],43:[
      1,
      1459
    ],44:[
      1,
      1460
    ],67:[
      2,
      39
    ]
  }),
  __expand__($VP, [
      2,
      43
    ], {49:[
      1,
      1461
    ],50:[
      1,
      1462
    ],51:[
      1,
      1463
    ],67:[
      2,
      43
    ]
  }),
  __expand__($VQ, [
      2,
      49
    ], {47:[
      1,
      1464
    ],67:[
      2,
      49
    ]
  }),
  {
    2: [
      1,
      1282
    ],
    10: 1295,
    14: 1275,
    15: 1276,
    16: 1277,
    17: 1278,
    18: 1279,
    19: 1280,
    20: 1281,
    39: [
      1,
      1284
    ],
    40: [
      1,
      1283
    ],
    45: 1465,
    46: 1271,
    48: [
      1,
      1272
    ],
    52: 1273,
    53: 1274,
    55: [
      1,
      1285
    ],
    56: 1286,
    59: [
      1,
      1293
    ],
    60: [
      1,
      1294
    ],
    68: 1298,
    69: 1299,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1300
    ],
    88: [
      1,
      1289
    ],
    89: 1287,
    90: [
      1,
      1296
    ],
    91: [
      1,
      1297
    ],
    92: [
      1,
      1288
    ],
    93: [
      1,
      1290
    ],
    94: [
      1,
      1291
    ],
    95: [
      1,
      1292
    ]
  },
  __expand__($VR, [
      2,
      50
    ], {67:[
      2,
      50
    ]
  }),
  __expand__($VR, [
      2,
      51
    ], {67:[
      2,
      51
    ]
  }),
  __expand__($VJ1, [
      2,
      52
    ], {85:[
      1,
      1467
    ],86:[
      1,
      1466
    ],87:[
      1,
      1469
    ],88:[
      1,
      1468
    ]
  }),
  __expand__($VR, [
      2,
      53
    ], {67:[
      2,
      53
    ]
  }),
  __expand__($VR, [
      2,
      54
    ], {67:[
      2,
      54
    ]
  }),
  __expand__($VR, [
      2,
      55
    ], {67:[
      2,
      55
    ]
  }),
  __expand__($VR, [
      2,
      56
    ], {67:[
      2,
      56
    ]
  }),
  __expand__($VR, [
      2,
      57
    ], {67:[
      2,
      57
    ]
  }),
  __expand__($VJ1, [
      2,
      58
    ], {55:[
      1,
      131
    ],70:130
  }),
  __expand__($VR, [
      2,
      59
    ], {67:[
      2,
      59
    ]
  }),
  {
    2: [
      1,
      1474
    ],
    10: 1295,
    20: 76,
    53: 1473,
    54: 1470,
    56: 1286,
    59: [
      1,
      1293
    ],
    60: [
      1,
      1294
    ],
    68: 1298,
    69: 1299,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1300
    ],
    89: 1471,
    90: [
      1,
      1296
    ],
    91: [
      1,
      1297
    ],
    92: [
      1,
      1472
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      1474
    ],
    10: 1295,
    20: 76,
    53: 1473,
    54: 1475,
    56: 1286,
    59: [
      1,
      1293
    ],
    60: [
      1,
      1294
    ],
    68: 1298,
    69: 1299,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1300
    ],
    89: 1476,
    90: [
      1,
      1296
    ],
    91: [
      1,
      1297
    ],
    92: [
      1,
      1477
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      1474
    ],
    10: 1295,
    20: 76,
    53: 1473,
    54: 1478,
    56: 1286,
    59: [
      1,
      1293
    ],
    60: [
      1,
      1294
    ],
    68: 1298,
    69: 1299,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1300
    ],
    95: [
      1,
      78
    ]
  },
  __expand__($VR, [
      2,
      65
    ], {57:[
      1,
      1479
    ],67:[
      2,
      65
    ]
  }),
  __expand__($VK1, [
      2,
      112
    ], {88:[
      2,
      112
    ]
  }),
  __expand__($VR, [
      2,
      115
    ], {67:[
      2,
      115
    ]
  }),
  {
    14: 1480,
    39: [
      1,
      1482
    ],
    40: [
      1,
      1481
    ],
    89: 1483,
    90: [
      1,
      1484
    ],
    91: [
      1,
      1485
    ]
  },
  __expand__($VR, [
      2,
      118
    ], {67:[
      2,
      118
    ]
  }),
  __expand__($VR, [
      2,
      119
    ], {67:[
      2,
      119
    ]
  }),
  __expand__($VU, [
      2,
      120
    ], {67:[
      2,
      120
    ]
  }),
  {
    60: [
      1,
      1486
    ]
  },
  {
    2: [
      1,
      169
    ],
    7: 1487,
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    23: 152,
    26: 153,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      150
    ],
    73: [
      1,
      151
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  __expand__($VV, [
      2,
      69
    ], {67:[
      2,
      69
    ]
  }),
  __expand__($VK1, [
      2,
      113
    ], {88:[
      2,
      113
    ]
  }),
  __expand__($VK1, [
      2,
      114
    ], {88:[
      2,
      114
    ]
  }),
  __expand__($VV, [
      2,
      76
    ], {67:[
      2,
      76
    ]
  }),
  {
    68: 1488,
    74: [
      1,
      1300
    ]
  },
  __expand__($VV, [
      2,
      86
    ], {67:[
      2,
      86
    ]
  }),
  __expand__($Vd, [
      2,
      37
    ], {67:[
      2,
      37
    ]
  }),
  __expand__($Vd, [
      2,
      38
    ], {67:[
      2,
      38
    ]
  }),
  __expand__($Vc, [
      2,
      28
    ], {38:[
      1,
      1489
    ],67:[
      2,
      28
    ]
  }),
  __expand__($VW, [
      2,
      36
    ], {39:[
      1,
      1490
    ],40:[
      1,
      1491
    ],67:[
      2,
      36
    ]
  }),
  __expand__($VX, [
      2,
      39
    ], {42:[
      1,
      1492
    ],43:[
      1,
      1493
    ],44:[
      1,
      1494
    ],67:[
      2,
      39
    ]
  }),
  __expand__($VY, [
      2,
      43
    ], {49:[
      1,
      1495
    ],50:[
      1,
      1496
    ],51:[
      1,
      1497
    ],67:[
      2,
      43
    ]
  }),
  __expand__($VZ, [
      2,
      49
    ], {47:[
      1,
      1498
    ],67:[
      2,
      49
    ]
  }),
  {
    2: [
      1,
      1318
    ],
    10: 1331,
    14: 1311,
    15: 1312,
    16: 1313,
    17: 1314,
    18: 1315,
    19: 1316,
    20: 1317,
    39: [
      1,
      1320
    ],
    40: [
      1,
      1319
    ],
    45: 1499,
    46: 1307,
    48: [
      1,
      1308
    ],
    52: 1309,
    53: 1310,
    55: [
      1,
      1321
    ],
    56: 1322,
    59: [
      1,
      1329
    ],
    60: [
      1,
      1330
    ],
    68: 1334,
    69: 1335,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1336
    ],
    88: [
      1,
      1325
    ],
    89: 1323,
    90: [
      1,
      1332
    ],
    91: [
      1,
      1333
    ],
    92: [
      1,
      1324
    ],
    93: [
      1,
      1326
    ],
    94: [
      1,
      1327
    ],
    95: [
      1,
      1328
    ]
  },
  __expand__($V_, [
      2,
      50
    ], {67:[
      2,
      50
    ]
  }),
  __expand__($V_, [
      2,
      51
    ], {67:[
      2,
      51
    ]
  }),
  __expand__($VL1, [
      2,
      52
    ], {85:[
      1,
      1501
    ],86:[
      1,
      1500
    ],87:[
      1,
      1503
    ],88:[
      1,
      1502
    ]
  }),
  __expand__($V_, [
      2,
      53
    ], {67:[
      2,
      53
    ]
  }),
  __expand__($V_, [
      2,
      54
    ], {67:[
      2,
      54
    ]
  }),
  __expand__($V_, [
      2,
      55
    ], {67:[
      2,
      55
    ]
  }),
  __expand__($V_, [
      2,
      56
    ], {67:[
      2,
      56
    ]
  }),
  __expand__($V_, [
      2,
      57
    ], {67:[
      2,
      57
    ]
  }),
  __expand__($VL1, [
      2,
      58
    ], {55:[
      1,
      131
    ],70:130
  }),
  __expand__($V_, [
      2,
      59
    ], {67:[
      2,
      59
    ]
  }),
  {
    2: [
      1,
      1508
    ],
    10: 1331,
    20: 76,
    53: 1507,
    54: 1504,
    56: 1322,
    59: [
      1,
      1329
    ],
    60: [
      1,
      1330
    ],
    68: 1334,
    69: 1335,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1336
    ],
    89: 1505,
    90: [
      1,
      1332
    ],
    91: [
      1,
      1333
    ],
    92: [
      1,
      1506
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      1508
    ],
    10: 1331,
    20: 76,
    53: 1507,
    54: 1509,
    56: 1322,
    59: [
      1,
      1329
    ],
    60: [
      1,
      1330
    ],
    68: 1334,
    69: 1335,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1336
    ],
    89: 1510,
    90: [
      1,
      1332
    ],
    91: [
      1,
      1333
    ],
    92: [
      1,
      1511
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      1508
    ],
    10: 1331,
    20: 76,
    53: 1507,
    54: 1512,
    56: 1322,
    59: [
      1,
      1329
    ],
    60: [
      1,
      1330
    ],
    68: 1334,
    69: 1335,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1336
    ],
    95: [
      1,
      78
    ]
  },
  __expand__($V_, [
      2,
      65
    ], {57:[
      1,
      1513
    ],67:[
      2,
      65
    ]
  }),
  __expand__($VM1, [
      2,
      112
    ], {88:[
      2,
      112
    ]
  }),
  __expand__($V_, [
      2,
      115
    ], {67:[
      2,
      115
    ]
  }),
  {
    14: 1514,
    39: [
      1,
      1516
    ],
    40: [
      1,
      1515
    ],
    89: 1517,
    90: [
      1,
      1518
    ],
    91: [
      1,
      1519
    ]
  },
  __expand__($V_, [
      2,
      118
    ], {67:[
      2,
      118
    ]
  }),
  __expand__($V_, [
      2,
      119
    ], {67:[
      2,
      119
    ]
  }),
  __expand__($V11, [
      2,
      120
    ], {67:[
      2,
      120
    ]
  }),
  {
    60: [
      1,
      1520
    ]
  },
  {
    2: [
      1,
      169
    ],
    7: 1521,
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    23: 152,
    26: 153,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      150
    ],
    73: [
      1,
      151
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  __expand__($V21, [
      2,
      69
    ], {67:[
      2,
      69
    ]
  }),
  __expand__($VM1, [
      2,
      113
    ], {88:[
      2,
      113
    ]
  }),
  __expand__($VM1, [
      2,
      114
    ], {88:[
      2,
      114
    ]
  }),
  __expand__($V21, [
      2,
      76
    ], {67:[
      2,
      76
    ]
  }),
  {
    68: 1522,
    74: [
      1,
      1336
    ]
  },
  __expand__($V21, [
      2,
      86
    ], {67:[
      2,
      86
    ]
  }),
  __expand__($Vc, [
      2,
      29
    ], {38:[
      1,
      1489
    ],67:[
      2,
      29
    ]
  }),
  __expand__($Vc, [
      2,
      30
    ], {38:[
      1,
      1489
    ],67:[
      2,
      30
    ]
  }),
  __expand__($Vc, [
      2,
      31
    ], {38:[
      1,
      1489
    ],67:[
      2,
      31
    ]
  }),
  __expand__($Vb, [
      2,
      35
    ], {67:[
      2,
      35
    ]
  }),
  __expand__($Vb, [
      2,
      36
    ], {39:[
      1,
      1523
    ],40:[
      1,
      1524
    ],67:[
      2,
      36
    ]
  }),
  __expand__($V31, [
      2,
      39
    ], {42:[
      1,
      1525
    ],43:[
      1,
      1526
    ],44:[
      1,
      1527
    ],67:[
      2,
      39
    ]
  }),
  __expand__($V41, [
      2,
      43
    ], {49:[
      1,
      1528
    ],50:[
      1,
      1529
    ],51:[
      1,
      1530
    ],67:[
      2,
      43
    ]
  }),
  __expand__($V51, [
      2,
      49
    ], {47:[
      1,
      1531
    ],67:[
      2,
      49
    ]
  }),
  {
    2: [
      1,
      1355
    ],
    10: 1368,
    14: 1348,
    15: 1349,
    16: 1350,
    17: 1351,
    18: 1352,
    19: 1353,
    20: 1354,
    39: [
      1,
      1357
    ],
    40: [
      1,
      1356
    ],
    45: 1532,
    46: 1344,
    48: [
      1,
      1345
    ],
    52: 1346,
    53: 1347,
    55: [
      1,
      1358
    ],
    56: 1359,
    59: [
      1,
      1366
    ],
    60: [
      1,
      1367
    ],
    68: 1371,
    69: 1372,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1373
    ],
    88: [
      1,
      1362
    ],
    89: 1360,
    90: [
      1,
      1369
    ],
    91: [
      1,
      1370
    ],
    92: [
      1,
      1361
    ],
    93: [
      1,
      1363
    ],
    94: [
      1,
      1364
    ],
    95: [
      1,
      1365
    ]
  },
  __expand__($V61, [
      2,
      50
    ], {67:[
      2,
      50
    ]
  }),
  __expand__($V61, [
      2,
      51
    ], {67:[
      2,
      51
    ]
  }),
  __expand__($VN1, [
      2,
      52
    ], {85:[
      1,
      1534
    ],86:[
      1,
      1533
    ],87:[
      1,
      1536
    ],88:[
      1,
      1535
    ]
  }),
  __expand__($V61, [
      2,
      53
    ], {67:[
      2,
      53
    ]
  }),
  __expand__($V61, [
      2,
      54
    ], {67:[
      2,
      54
    ]
  }),
  __expand__($V61, [
      2,
      55
    ], {67:[
      2,
      55
    ]
  }),
  __expand__($V61, [
      2,
      56
    ], {67:[
      2,
      56
    ]
  }),
  __expand__($V61, [
      2,
      57
    ], {67:[
      2,
      57
    ]
  }),
  __expand__($VN1, [
      2,
      58
    ], {55:[
      1,
      131
    ],70:130
  }),
  __expand__($V61, [
      2,
      59
    ], {67:[
      2,
      59
    ]
  }),
  {
    2: [
      1,
      1541
    ],
    10: 1368,
    20: 76,
    53: 1540,
    54: 1537,
    56: 1359,
    59: [
      1,
      1366
    ],
    60: [
      1,
      1367
    ],
    68: 1371,
    69: 1372,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1373
    ],
    89: 1538,
    90: [
      1,
      1369
    ],
    91: [
      1,
      1370
    ],
    92: [
      1,
      1539
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      1541
    ],
    10: 1368,
    20: 76,
    53: 1540,
    54: 1542,
    56: 1359,
    59: [
      1,
      1366
    ],
    60: [
      1,
      1367
    ],
    68: 1371,
    69: 1372,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1373
    ],
    89: 1543,
    90: [
      1,
      1369
    ],
    91: [
      1,
      1370
    ],
    92: [
      1,
      1544
    ],
    95: [
      1,
      78
    ]
  },
  {
    2: [
      1,
      1541
    ],
    10: 1368,
    20: 76,
    53: 1540,
    54: 1545,
    56: 1359,
    59: [
      1,
      1366
    ],
    60: [
      1,
      1367
    ],
    68: 1371,
    69: 1372,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1373
    ],
    95: [
      1,
      78
    ]
  },
  __expand__($V61, [
      2,
      65
    ], {57:[
      1,
      1546
    ],67:[
      2,
      65
    ]
  }),
  __expand__($VO1, [
      2,
      112
    ], {88:[
      2,
      112
    ]
  }),
  __expand__($V61, [
      2,
      115
    ], {67:[
      2,
      115
    ]
  }),
  {
    14: 1547,
    39: [
      1,
      1549
    ],
    40: [
      1,
      1548
    ],
    89: 1550,
    90: [
      1,
      1551
    ],
    91: [
      1,
      1552
    ]
  },
  __expand__($V61, [
      2,
      118
    ], {67:[
      2,
      118
    ]
  }),
  __expand__($V61, [
      2,
      119
    ], {67:[
      2,
      119
    ]
  }),
  __expand__($V91, [
      2,
      120
    ], {67:[
      2,
      120
    ]
  }),
  {
    60: [
      1,
      1553
    ]
  },
  {
    2: [
      1,
      169
    ],
    7: 1554,
    10: 182,
    14: 162,
    15: 163,
    16: 164,
    17: 165,
    18: 166,
    19: 167,
    20: 168,
    23: 152,
    26: 153,
    29: 154,
    32: 155,
    39: [
      1,
      171
    ],
    40: [
      1,
      170
    ],
    41: 156,
    45: 157,
    46: 158,
    48: [
      1,
      159
    ],
    52: 160,
    53: 161,
    55: [
      1,
      172
    ],
    56: 173,
    59: [
      1,
      180
    ],
    60: [
      1,
      181
    ],
    68: 185,
    69: 186,
    71: [
      1,
      150
    ],
    73: [
      1,
      151
    ],
    74: [
      1,
      187
    ],
    88: [
      1,
      176
    ],
    89: 174,
    90: [
      1,
      183
    ],
    91: [
      1,
      184
    ],
    92: [
      1,
      175
    ],
    93: [
      1,
      177
    ],
    94: [
      1,
      178
    ],
    95: [
      1,
      179
    ]
  },
  __expand__($Va1, [
      2,
      69
    ], {67:[
      2,
      69
    ]
  }),
  __expand__($VO1, [
      2,
      113
    ], {88:[
      2,
      113
    ]
  }),
  __expand__($VO1, [
      2,
      114
    ], {88:[
      2,
      114
    ]
  }),
  __expand__($Va1, [
      2,
      76
    ], {67:[
      2,
      76
    ]
  }),
  {
    68: 1555,
    74: [
      1,
      1373
    ]
  },
  __expand__($Va1, [
      2,
      86
    ], {67:[
      2,
      86
    ]
  }),
  __expand__($Vb1, [
      2,
      40
    ], {44:[
      1,
      1069
    ],67:[
      2,
      40
    ]
  }),
  __expand__($Vb1, [
      2,
      41
    ], {44:[
      1,
      1069
    ],67:[
      2,
      41
    ]
  }),
  __expand__($Vb1, [
      2,
      42
    ], {44:[
      1,
      1069
    ],67:[
      2,
      42
    ]
  }),
  __expand__($Vc1, [
      2,
      44
    ], {49:[
      1,
      1070
    ],50:[
      1,
      1071
    ],67:[
      2,
      44
    ]
  }),
  __expand__($Vg, [
      2,
      66
    ], {67:[
      2,
      66
    ]
  }),
  __expand__($Vg, [
      2,
      70
    ], {57:[
      1,
      1556
    ],66:[
      1,
      1557
    ],67:[
      2,
      70
    ]
  }),
  __expand__($VP1, [
      2,
      72
    ], {67:[
      2,
      72
    ]
  }),
  {
    60: [
      1,
      1558
    ]
  },
  __expand__($VP1, [
      2,
      75
    ], {67:[
      2,
      75
    ]
  }),
  __expand__($Vg, [
      2,
      110
    ], {67:[
      2,
      110
    ]
  }),
  __expand__($Vg, [
      2,
      111
    ], {67:[
      2,
      111
    ]
  }),
  {
    62: [
      1,
      1559
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($Vk, [
      2,
      68
    ], {67:[
      2,
      68
    ]
  }),
  __expand__($Vo1, [
      2,
      37
    ], {81:[
      2,
      37
    ]
  }),
  __expand__($Vo1, [
      2,
      38
    ], {81:[
      2,
      38
    ]
  }),
  __expand__($VQ1, [
      2,
      40
    ], {44:[
      1,
      1103
    ],81:[
      2,
      40
    ]
  }),
  __expand__($VQ1, [
      2,
      41
    ], {44:[
      1,
      1103
    ],81:[
      2,
      41
    ]
  }),
  __expand__($VQ1, [
      2,
      42
    ], {44:[
      1,
      1103
    ],81:[
      2,
      42
    ]
  }),
  __expand__([6,24,25,27,28,31,37,39,40,42,43,44,51,62], [
      2,
      44
    ], {49:[
      1,
      1104
    ],50:[
      1,
      1105
    ],81:[
      2,
      44
    ]
  }),
  __expand__($VS, [
      2,
      66
    ], {81:[
      2,
      66
    ]
  }),
  __expand__($VS, [
      2,
      70
    ], {57:[
      1,
      1560
    ],66:[
      1,
      1561
    ],81:[
      2,
      70
    ]
  }),
  __expand__($VR1, [
      2,
      72
    ], {81:[
      2,
      72
    ]
  }),
  {
    60: [
      1,
      1562
    ]
  },
  __expand__($VR1, [
      2,
      75
    ], {81:[
      2,
      75
    ]
  }),
  __expand__($VS, [
      2,
      110
    ], {81:[
      2,
      110
    ]
  }),
  __expand__($VS, [
      2,
      111
    ], {81:[
      2,
      111
    ]
  }),
  {
    62: [
      1,
      1563
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($Vr1, [
      2,
      68
    ], {81:[
      2,
      68
    ]
  }),
  __expand__($Vs1, [
      2,
      35
    ], {81:[
      2,
      35
    ]
  }),
  __expand__($Vt1, [
      2,
      37
    ], {81:[
      2,
      37
    ]
  }),
  __expand__($Vt1, [
      2,
      38
    ], {81:[
      2,
      38
    ]
  }),
  __expand__($VS1, [
      2,
      40
    ], {44:[
      1,
      1137
    ],81:[
      2,
      40
    ]
  }),
  __expand__($VS1, [
      2,
      41
    ], {44:[
      1,
      1137
    ],81:[
      2,
      41
    ]
  }),
  __expand__($VS1, [
      2,
      42
    ], {44:[
      1,
      1137
    ],81:[
      2,
      42
    ]
  }),
  __expand__([6,24,25,27,28,31,37,38,39,40,42,43,44,51,62], [
      2,
      44
    ], {49:[
      1,
      1138
    ],50:[
      1,
      1139
    ],81:[
      2,
      44
    ]
  }),
  __expand__($V$, [
      2,
      66
    ], {81:[
      2,
      66
    ]
  }),
  __expand__($V$, [
      2,
      70
    ], {57:[
      1,
      1564
    ],66:[
      1,
      1565
    ],81:[
      2,
      70
    ]
  }),
  __expand__($VT1, [
      2,
      72
    ], {81:[
      2,
      72
    ]
  }),
  {
    60: [
      1,
      1566
    ]
  },
  __expand__($VT1, [
      2,
      75
    ], {81:[
      2,
      75
    ]
  }),
  __expand__($V$, [
      2,
      110
    ], {81:[
      2,
      110
    ]
  }),
  __expand__($V$, [
      2,
      111
    ], {81:[
      2,
      111
    ]
  }),
  {
    62: [
      1,
      1567
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($Vw1, [
      2,
      68
    ], {81:[
      2,
      68
    ]
  }),
  __expand__($Vx1, [
      2,
      37
    ], {81:[
      2,
      37
    ]
  }),
  __expand__($Vx1, [
      2,
      38
    ], {81:[
      2,
      38
    ]
  }),
  __expand__($VU1, [
      2,
      40
    ], {44:[
      1,
      1170
    ],81:[
      2,
      40
    ]
  }),
  __expand__($VU1, [
      2,
      41
    ], {44:[
      1,
      1170
    ],81:[
      2,
      41
    ]
  }),
  __expand__($VU1, [
      2,
      42
    ], {44:[
      1,
      1170
    ],81:[
      2,
      42
    ]
  }),
  __expand__([6,24,25,27,28,31,33,34,35,36,37,38,39,40,42,43,44,51,62], [
      2,
      44
    ], {49:[
      1,
      1171
    ],50:[
      1,
      1172
    ],81:[
      2,
      44
    ]
  }),
  __expand__($V71, [
      2,
      66
    ], {81:[
      2,
      66
    ]
  }),
  __expand__($V71, [
      2,
      70
    ], {57:[
      1,
      1568
    ],66:[
      1,
      1569
    ],81:[
      2,
      70
    ]
  }),
  __expand__($VV1, [
      2,
      72
    ], {81:[
      2,
      72
    ]
  }),
  {
    60: [
      1,
      1570
    ]
  },
  __expand__($VV1, [
      2,
      75
    ], {81:[
      2,
      75
    ]
  }),
  __expand__($V71, [
      2,
      110
    ], {81:[
      2,
      110
    ]
  }),
  __expand__($V71, [
      2,
      111
    ], {81:[
      2,
      111
    ]
  }),
  {
    62: [
      1,
      1571
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($VA1, [
      2,
      68
    ], {81:[
      2,
      68
    ]
  }),
  __expand__($Vh, [
      2,
      71
    ], {81:[
      2,
      71
    ]
  }),
  {
    67: [
      1,
      1572
    ]
  },
  {
    62: [
      1,
      1573
    ],
    81: [
      1,
      539
    ]
  },
  {
    2: [
      1,
      1213
    ],
    58: 1574,
    63: 1210,
    64: [
      1,
      1211
    ],
    65: [
      1,
      1212
    ]
  },
  {
    2: [
      1,
      785
    ],
    7: 1575,
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    23: 768,
    26: 769,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1576,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  __expand__($VV, [
      2,
      67
    ], {62:[
      2,
      67
    ]
  }),
  {
    2: [
      1,
      1229
    ],
    58: 1577,
    63: 1226,
    64: [
      1,
      1227
    ],
    65: [
      1,
      1228
    ]
  },
  {
    2: [
      1,
      785
    ],
    7: 1578,
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    23: 768,
    26: 769,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1579,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  __expand__($V21, [
      2,
      67
    ], {62:[
      2,
      67
    ]
  }),
  {
    2: [
      1,
      1244
    ],
    58: 1580,
    63: 1241,
    64: [
      1,
      1242
    ],
    65: [
      1,
      1243
    ]
  },
  {
    2: [
      1,
      785
    ],
    7: 1581,
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    23: 768,
    26: 769,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1582,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  __expand__($Va1, [
      2,
      67
    ], {62:[
      2,
      67
    ]
  }),
  __expand__($VN, [
      2,
      74
    ], {66:[
      2,
      74
    ]
  }),
  __expand__($VN, [
      2,
      73
    ], {66:[
      2,
      73
    ]
  }),
  __expand__($Vf1, [
      2,
      74
    ], {66:[
      2,
      74
    ]
  }),
  __expand__($Vf1, [
      2,
      73
    ], {66:[
      2,
      73
    ]
  }),
  __expand__($Vi1, [
      2,
      74
    ], {66:[
      2,
      74
    ]
  }),
  __expand__($Vi1, [
      2,
      73
    ], {66:[
      2,
      73
    ]
  }),
  __expand__($Vl1, [
      2,
      74
    ], {66:[
      2,
      74
    ]
  }),
  __expand__($Vl1, [
      2,
      73
    ], {66:[
      2,
      73
    ]
  }),
  {
    2: [
      1,
      1282
    ],
    10: 1295,
    14: 1275,
    15: 1276,
    16: 1277,
    17: 1278,
    18: 1279,
    19: 1280,
    20: 1281,
    29: 1583,
    39: [
      1,
      1284
    ],
    40: [
      1,
      1283
    ],
    41: 1269,
    45: 1270,
    46: 1271,
    48: [
      1,
      1272
    ],
    52: 1273,
    53: 1274,
    55: [
      1,
      1285
    ],
    56: 1286,
    59: [
      1,
      1293
    ],
    60: [
      1,
      1294
    ],
    68: 1298,
    69: 1299,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1300
    ],
    88: [
      1,
      1289
    ],
    89: 1287,
    90: [
      1,
      1296
    ],
    91: [
      1,
      1297
    ],
    92: [
      1,
      1288
    ],
    93: [
      1,
      1290
    ],
    94: [
      1,
      1291
    ],
    95: [
      1,
      1292
    ]
  },
  {
    2: [
      1,
      1282
    ],
    10: 1295,
    14: 1275,
    15: 1276,
    16: 1277,
    17: 1278,
    18: 1279,
    19: 1280,
    20: 1281,
    29: 1584,
    39: [
      1,
      1284
    ],
    40: [
      1,
      1283
    ],
    41: 1269,
    45: 1270,
    46: 1271,
    48: [
      1,
      1272
    ],
    52: 1273,
    53: 1274,
    55: [
      1,
      1285
    ],
    56: 1286,
    59: [
      1,
      1293
    ],
    60: [
      1,
      1294
    ],
    68: 1298,
    69: 1299,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1300
    ],
    88: [
      1,
      1289
    ],
    89: 1287,
    90: [
      1,
      1296
    ],
    91: [
      1,
      1297
    ],
    92: [
      1,
      1288
    ],
    93: [
      1,
      1290
    ],
    94: [
      1,
      1291
    ],
    95: [
      1,
      1292
    ]
  },
  {
    2: [
      1,
      1282
    ],
    10: 1295,
    14: 1275,
    15: 1276,
    16: 1277,
    17: 1278,
    18: 1279,
    19: 1280,
    20: 1281,
    39: [
      1,
      1284
    ],
    40: [
      1,
      1283
    ],
    41: 1585,
    45: 1270,
    46: 1271,
    48: [
      1,
      1272
    ],
    52: 1273,
    53: 1274,
    55: [
      1,
      1285
    ],
    56: 1286,
    59: [
      1,
      1293
    ],
    60: [
      1,
      1294
    ],
    68: 1298,
    69: 1299,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1300
    ],
    88: [
      1,
      1289
    ],
    89: 1287,
    90: [
      1,
      1296
    ],
    91: [
      1,
      1297
    ],
    92: [
      1,
      1288
    ],
    93: [
      1,
      1290
    ],
    94: [
      1,
      1291
    ],
    95: [
      1,
      1292
    ]
  },
  {
    2: [
      1,
      1282
    ],
    10: 1295,
    14: 1275,
    15: 1276,
    16: 1277,
    17: 1278,
    18: 1279,
    19: 1280,
    20: 1281,
    39: [
      1,
      1284
    ],
    40: [
      1,
      1283
    ],
    41: 1586,
    45: 1270,
    46: 1271,
    48: [
      1,
      1272
    ],
    52: 1273,
    53: 1274,
    55: [
      1,
      1285
    ],
    56: 1286,
    59: [
      1,
      1293
    ],
    60: [
      1,
      1294
    ],
    68: 1298,
    69: 1299,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1300
    ],
    88: [
      1,
      1289
    ],
    89: 1287,
    90: [
      1,
      1296
    ],
    91: [
      1,
      1297
    ],
    92: [
      1,
      1288
    ],
    93: [
      1,
      1290
    ],
    94: [
      1,
      1291
    ],
    95: [
      1,
      1292
    ]
  },
  {
    2: [
      1,
      1282
    ],
    10: 1295,
    14: 1275,
    15: 1276,
    16: 1277,
    17: 1278,
    18: 1279,
    19: 1280,
    20: 1281,
    39: [
      1,
      1284
    ],
    40: [
      1,
      1283
    ],
    41: 1587,
    45: 1270,
    46: 1271,
    48: [
      1,
      1272
    ],
    52: 1273,
    53: 1274,
    55: [
      1,
      1285
    ],
    56: 1286,
    59: [
      1,
      1293
    ],
    60: [
      1,
      1294
    ],
    68: 1298,
    69: 1299,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1300
    ],
    88: [
      1,
      1289
    ],
    89: 1287,
    90: [
      1,
      1296
    ],
    91: [
      1,
      1297
    ],
    92: [
      1,
      1288
    ],
    93: [
      1,
      1290
    ],
    94: [
      1,
      1291
    ],
    95: [
      1,
      1292
    ]
  },
  __expand__($VQ, [
      2,
      46
    ], {67:[
      2,
      46
    ]
  }),
  __expand__($VQ, [
      2,
      47
    ], {67:[
      2,
      47
    ]
  }),
  __expand__($VQ, [
      2,
      48
    ], {67:[
      2,
      48
    ]
  }),
  {
    2: [
      1,
      1282
    ],
    10: 1295,
    14: 1275,
    15: 1276,
    16: 1277,
    17: 1278,
    18: 1279,
    19: 1280,
    20: 1281,
    39: [
      1,
      1284
    ],
    40: [
      1,
      1283
    ],
    45: 1588,
    46: 1271,
    48: [
      1,
      1272
    ],
    52: 1273,
    53: 1274,
    55: [
      1,
      1285
    ],
    56: 1286,
    59: [
      1,
      1293
    ],
    60: [
      1,
      1294
    ],
    68: 1298,
    69: 1299,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1300
    ],
    88: [
      1,
      1289
    ],
    89: 1287,
    90: [
      1,
      1296
    ],
    91: [
      1,
      1297
    ],
    92: [
      1,
      1288
    ],
    93: [
      1,
      1290
    ],
    94: [
      1,
      1291
    ],
    95: [
      1,
      1292
    ]
  },
  __expand__($VQ, [
      2,
      45
    ], {67:[
      2,
      45
    ]
  }),
  __expand__($VR, [
      2,
      105
    ], {67:[
      2,
      105
    ]
  }),
  __expand__($VR, [
      2,
      106
    ], {67:[
      2,
      106
    ]
  }),
  __expand__($VR, [
      2,
      109
    ], {67:[
      2,
      109
    ]
  }),
  __expand__($VR, [
      2,
      107
    ], {67:[
      2,
      107
    ]
  }),
  __expand__($VR, [
      2,
      60
    ], {67:[
      2,
      60
    ]
  }),
  __expand__($VK1, [
      2,
      110
    ], {88:[
      2,
      110
    ]
  }),
  __expand__($VR, [
      2,
      116
    ], {67:[
      2,
      116
    ]
  }),
  __expand__($VR, [
      2,
      63
    ], {67:[
      2,
      63
    ]
  }),
  __expand__($VR, [
      2,
      64
    ], {67:[
      2,
      64
    ]
  }),
  __expand__($VR, [
      2,
      61
    ], {67:[
      2,
      61
    ]
  }),
  __expand__($VK1, [
      2,
      111
    ], {88:[
      2,
      111
    ]
  }),
  __expand__($VR, [
      2,
      117
    ], {67:[
      2,
      117
    ]
  }),
  __expand__($VR, [
      2,
      62
    ], {67:[
      2,
      62
    ]
  }),
  {
    2: [
      1,
      1593
    ],
    58: 1589,
    63: 1590,
    64: [
      1,
      1591
    ],
    65: [
      1,
      1592
    ]
  },
  __expand__($VR, [
      2,
      108
    ], {67:[
      2,
      108
    ]
  }),
  {
    89: 1594,
    90: [
      1,
      1484
    ],
    91: [
      1,
      1485
    ]
  },
  {
    89: 1595,
    90: [
      1,
      1484
    ],
    91: [
      1,
      1485
    ]
  },
  __expand__($VR, [
      2,
      112
    ], {67:[
      2,
      112
    ]
  }),
  __expand__($VR, [
      2,
      113
    ], {67:[
      2,
      113
    ]
  }),
  __expand__($VR, [
      2,
      114
    ], {67:[
      2,
      114
    ]
  }),
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1596,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  {
    62: [
      1,
      1597
    ]
  },
  __expand__($VV, [
      2,
      77
    ], {67:[
      2,
      77
    ]
  }),
  {
    2: [
      1,
      1318
    ],
    10: 1331,
    14: 1311,
    15: 1312,
    16: 1313,
    17: 1314,
    18: 1315,
    19: 1316,
    20: 1317,
    29: 1304,
    32: 1598,
    39: [
      1,
      1320
    ],
    40: [
      1,
      1319
    ],
    41: 1305,
    45: 1306,
    46: 1307,
    48: [
      1,
      1308
    ],
    52: 1309,
    53: 1310,
    55: [
      1,
      1321
    ],
    56: 1322,
    59: [
      1,
      1329
    ],
    60: [
      1,
      1330
    ],
    68: 1334,
    69: 1335,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1336
    ],
    88: [
      1,
      1325
    ],
    89: 1323,
    90: [
      1,
      1332
    ],
    91: [
      1,
      1333
    ],
    92: [
      1,
      1324
    ],
    93: [
      1,
      1326
    ],
    94: [
      1,
      1327
    ],
    95: [
      1,
      1328
    ]
  },
  {
    2: [
      1,
      1318
    ],
    10: 1331,
    14: 1311,
    15: 1312,
    16: 1313,
    17: 1314,
    18: 1315,
    19: 1316,
    20: 1317,
    29: 1599,
    39: [
      1,
      1320
    ],
    40: [
      1,
      1319
    ],
    41: 1305,
    45: 1306,
    46: 1307,
    48: [
      1,
      1308
    ],
    52: 1309,
    53: 1310,
    55: [
      1,
      1321
    ],
    56: 1322,
    59: [
      1,
      1329
    ],
    60: [
      1,
      1330
    ],
    68: 1334,
    69: 1335,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1336
    ],
    88: [
      1,
      1325
    ],
    89: 1323,
    90: [
      1,
      1332
    ],
    91: [
      1,
      1333
    ],
    92: [
      1,
      1324
    ],
    93: [
      1,
      1326
    ],
    94: [
      1,
      1327
    ],
    95: [
      1,
      1328
    ]
  },
  {
    2: [
      1,
      1318
    ],
    10: 1331,
    14: 1311,
    15: 1312,
    16: 1313,
    17: 1314,
    18: 1315,
    19: 1316,
    20: 1317,
    29: 1600,
    39: [
      1,
      1320
    ],
    40: [
      1,
      1319
    ],
    41: 1305,
    45: 1306,
    46: 1307,
    48: [
      1,
      1308
    ],
    52: 1309,
    53: 1310,
    55: [
      1,
      1321
    ],
    56: 1322,
    59: [
      1,
      1329
    ],
    60: [
      1,
      1330
    ],
    68: 1334,
    69: 1335,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1336
    ],
    88: [
      1,
      1325
    ],
    89: 1323,
    90: [
      1,
      1332
    ],
    91: [
      1,
      1333
    ],
    92: [
      1,
      1324
    ],
    93: [
      1,
      1326
    ],
    94: [
      1,
      1327
    ],
    95: [
      1,
      1328
    ]
  },
  {
    2: [
      1,
      1318
    ],
    10: 1331,
    14: 1311,
    15: 1312,
    16: 1313,
    17: 1314,
    18: 1315,
    19: 1316,
    20: 1317,
    39: [
      1,
      1320
    ],
    40: [
      1,
      1319
    ],
    41: 1601,
    45: 1306,
    46: 1307,
    48: [
      1,
      1308
    ],
    52: 1309,
    53: 1310,
    55: [
      1,
      1321
    ],
    56: 1322,
    59: [
      1,
      1329
    ],
    60: [
      1,
      1330
    ],
    68: 1334,
    69: 1335,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1336
    ],
    88: [
      1,
      1325
    ],
    89: 1323,
    90: [
      1,
      1332
    ],
    91: [
      1,
      1333
    ],
    92: [
      1,
      1324
    ],
    93: [
      1,
      1326
    ],
    94: [
      1,
      1327
    ],
    95: [
      1,
      1328
    ]
  },
  {
    2: [
      1,
      1318
    ],
    10: 1331,
    14: 1311,
    15: 1312,
    16: 1313,
    17: 1314,
    18: 1315,
    19: 1316,
    20: 1317,
    39: [
      1,
      1320
    ],
    40: [
      1,
      1319
    ],
    41: 1602,
    45: 1306,
    46: 1307,
    48: [
      1,
      1308
    ],
    52: 1309,
    53: 1310,
    55: [
      1,
      1321
    ],
    56: 1322,
    59: [
      1,
      1329
    ],
    60: [
      1,
      1330
    ],
    68: 1334,
    69: 1335,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1336
    ],
    88: [
      1,
      1325
    ],
    89: 1323,
    90: [
      1,
      1332
    ],
    91: [
      1,
      1333
    ],
    92: [
      1,
      1324
    ],
    93: [
      1,
      1326
    ],
    94: [
      1,
      1327
    ],
    95: [
      1,
      1328
    ]
  },
  {
    2: [
      1,
      1318
    ],
    10: 1331,
    14: 1311,
    15: 1312,
    16: 1313,
    17: 1314,
    18: 1315,
    19: 1316,
    20: 1317,
    39: [
      1,
      1320
    ],
    40: [
      1,
      1319
    ],
    41: 1603,
    45: 1306,
    46: 1307,
    48: [
      1,
      1308
    ],
    52: 1309,
    53: 1310,
    55: [
      1,
      1321
    ],
    56: 1322,
    59: [
      1,
      1329
    ],
    60: [
      1,
      1330
    ],
    68: 1334,
    69: 1335,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1336
    ],
    88: [
      1,
      1325
    ],
    89: 1323,
    90: [
      1,
      1332
    ],
    91: [
      1,
      1333
    ],
    92: [
      1,
      1324
    ],
    93: [
      1,
      1326
    ],
    94: [
      1,
      1327
    ],
    95: [
      1,
      1328
    ]
  },
  __expand__($VZ, [
      2,
      46
    ], {67:[
      2,
      46
    ]
  }),
  __expand__($VZ, [
      2,
      47
    ], {67:[
      2,
      47
    ]
  }),
  __expand__($VZ, [
      2,
      48
    ], {67:[
      2,
      48
    ]
  }),
  {
    2: [
      1,
      1318
    ],
    10: 1331,
    14: 1311,
    15: 1312,
    16: 1313,
    17: 1314,
    18: 1315,
    19: 1316,
    20: 1317,
    39: [
      1,
      1320
    ],
    40: [
      1,
      1319
    ],
    45: 1604,
    46: 1307,
    48: [
      1,
      1308
    ],
    52: 1309,
    53: 1310,
    55: [
      1,
      1321
    ],
    56: 1322,
    59: [
      1,
      1329
    ],
    60: [
      1,
      1330
    ],
    68: 1334,
    69: 1335,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1336
    ],
    88: [
      1,
      1325
    ],
    89: 1323,
    90: [
      1,
      1332
    ],
    91: [
      1,
      1333
    ],
    92: [
      1,
      1324
    ],
    93: [
      1,
      1326
    ],
    94: [
      1,
      1327
    ],
    95: [
      1,
      1328
    ]
  },
  __expand__($VZ, [
      2,
      45
    ], {67:[
      2,
      45
    ]
  }),
  __expand__($V_, [
      2,
      105
    ], {67:[
      2,
      105
    ]
  }),
  __expand__($V_, [
      2,
      106
    ], {67:[
      2,
      106
    ]
  }),
  __expand__($V_, [
      2,
      109
    ], {67:[
      2,
      109
    ]
  }),
  __expand__($V_, [
      2,
      107
    ], {67:[
      2,
      107
    ]
  }),
  __expand__($V_, [
      2,
      60
    ], {67:[
      2,
      60
    ]
  }),
  __expand__($VM1, [
      2,
      110
    ], {88:[
      2,
      110
    ]
  }),
  __expand__($V_, [
      2,
      116
    ], {67:[
      2,
      116
    ]
  }),
  __expand__($V_, [
      2,
      63
    ], {67:[
      2,
      63
    ]
  }),
  __expand__($V_, [
      2,
      64
    ], {67:[
      2,
      64
    ]
  }),
  __expand__($V_, [
      2,
      61
    ], {67:[
      2,
      61
    ]
  }),
  __expand__($VM1, [
      2,
      111
    ], {88:[
      2,
      111
    ]
  }),
  __expand__($V_, [
      2,
      117
    ], {67:[
      2,
      117
    ]
  }),
  __expand__($V_, [
      2,
      62
    ], {67:[
      2,
      62
    ]
  }),
  {
    2: [
      1,
      1609
    ],
    58: 1605,
    63: 1606,
    64: [
      1,
      1607
    ],
    65: [
      1,
      1608
    ]
  },
  __expand__($V_, [
      2,
      108
    ], {67:[
      2,
      108
    ]
  }),
  {
    89: 1610,
    90: [
      1,
      1518
    ],
    91: [
      1,
      1519
    ]
  },
  {
    89: 1611,
    90: [
      1,
      1518
    ],
    91: [
      1,
      1519
    ]
  },
  __expand__($V_, [
      2,
      112
    ], {67:[
      2,
      112
    ]
  }),
  __expand__($V_, [
      2,
      113
    ], {67:[
      2,
      113
    ]
  }),
  __expand__($V_, [
      2,
      114
    ], {67:[
      2,
      114
    ]
  }),
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1612,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  {
    62: [
      1,
      1613
    ]
  },
  __expand__($V21, [
      2,
      77
    ], {67:[
      2,
      77
    ]
  }),
  {
    2: [
      1,
      1355
    ],
    10: 1368,
    14: 1348,
    15: 1349,
    16: 1350,
    17: 1351,
    18: 1352,
    19: 1353,
    20: 1354,
    29: 1614,
    39: [
      1,
      1357
    ],
    40: [
      1,
      1356
    ],
    41: 1342,
    45: 1343,
    46: 1344,
    48: [
      1,
      1345
    ],
    52: 1346,
    53: 1347,
    55: [
      1,
      1358
    ],
    56: 1359,
    59: [
      1,
      1366
    ],
    60: [
      1,
      1367
    ],
    68: 1371,
    69: 1372,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1373
    ],
    88: [
      1,
      1362
    ],
    89: 1360,
    90: [
      1,
      1369
    ],
    91: [
      1,
      1370
    ],
    92: [
      1,
      1361
    ],
    93: [
      1,
      1363
    ],
    94: [
      1,
      1364
    ],
    95: [
      1,
      1365
    ]
  },
  {
    2: [
      1,
      1355
    ],
    10: 1368,
    14: 1348,
    15: 1349,
    16: 1350,
    17: 1351,
    18: 1352,
    19: 1353,
    20: 1354,
    29: 1615,
    39: [
      1,
      1357
    ],
    40: [
      1,
      1356
    ],
    41: 1342,
    45: 1343,
    46: 1344,
    48: [
      1,
      1345
    ],
    52: 1346,
    53: 1347,
    55: [
      1,
      1358
    ],
    56: 1359,
    59: [
      1,
      1366
    ],
    60: [
      1,
      1367
    ],
    68: 1371,
    69: 1372,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1373
    ],
    88: [
      1,
      1362
    ],
    89: 1360,
    90: [
      1,
      1369
    ],
    91: [
      1,
      1370
    ],
    92: [
      1,
      1361
    ],
    93: [
      1,
      1363
    ],
    94: [
      1,
      1364
    ],
    95: [
      1,
      1365
    ]
  },
  {
    2: [
      1,
      1355
    ],
    10: 1368,
    14: 1348,
    15: 1349,
    16: 1350,
    17: 1351,
    18: 1352,
    19: 1353,
    20: 1354,
    39: [
      1,
      1357
    ],
    40: [
      1,
      1356
    ],
    41: 1616,
    45: 1343,
    46: 1344,
    48: [
      1,
      1345
    ],
    52: 1346,
    53: 1347,
    55: [
      1,
      1358
    ],
    56: 1359,
    59: [
      1,
      1366
    ],
    60: [
      1,
      1367
    ],
    68: 1371,
    69: 1372,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1373
    ],
    88: [
      1,
      1362
    ],
    89: 1360,
    90: [
      1,
      1369
    ],
    91: [
      1,
      1370
    ],
    92: [
      1,
      1361
    ],
    93: [
      1,
      1363
    ],
    94: [
      1,
      1364
    ],
    95: [
      1,
      1365
    ]
  },
  {
    2: [
      1,
      1355
    ],
    10: 1368,
    14: 1348,
    15: 1349,
    16: 1350,
    17: 1351,
    18: 1352,
    19: 1353,
    20: 1354,
    39: [
      1,
      1357
    ],
    40: [
      1,
      1356
    ],
    41: 1617,
    45: 1343,
    46: 1344,
    48: [
      1,
      1345
    ],
    52: 1346,
    53: 1347,
    55: [
      1,
      1358
    ],
    56: 1359,
    59: [
      1,
      1366
    ],
    60: [
      1,
      1367
    ],
    68: 1371,
    69: 1372,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1373
    ],
    88: [
      1,
      1362
    ],
    89: 1360,
    90: [
      1,
      1369
    ],
    91: [
      1,
      1370
    ],
    92: [
      1,
      1361
    ],
    93: [
      1,
      1363
    ],
    94: [
      1,
      1364
    ],
    95: [
      1,
      1365
    ]
  },
  {
    2: [
      1,
      1355
    ],
    10: 1368,
    14: 1348,
    15: 1349,
    16: 1350,
    17: 1351,
    18: 1352,
    19: 1353,
    20: 1354,
    39: [
      1,
      1357
    ],
    40: [
      1,
      1356
    ],
    41: 1618,
    45: 1343,
    46: 1344,
    48: [
      1,
      1345
    ],
    52: 1346,
    53: 1347,
    55: [
      1,
      1358
    ],
    56: 1359,
    59: [
      1,
      1366
    ],
    60: [
      1,
      1367
    ],
    68: 1371,
    69: 1372,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1373
    ],
    88: [
      1,
      1362
    ],
    89: 1360,
    90: [
      1,
      1369
    ],
    91: [
      1,
      1370
    ],
    92: [
      1,
      1361
    ],
    93: [
      1,
      1363
    ],
    94: [
      1,
      1364
    ],
    95: [
      1,
      1365
    ]
  },
  __expand__($V51, [
      2,
      46
    ], {67:[
      2,
      46
    ]
  }),
  __expand__($V51, [
      2,
      47
    ], {67:[
      2,
      47
    ]
  }),
  __expand__($V51, [
      2,
      48
    ], {67:[
      2,
      48
    ]
  }),
  {
    2: [
      1,
      1355
    ],
    10: 1368,
    14: 1348,
    15: 1349,
    16: 1350,
    17: 1351,
    18: 1352,
    19: 1353,
    20: 1354,
    39: [
      1,
      1357
    ],
    40: [
      1,
      1356
    ],
    45: 1619,
    46: 1344,
    48: [
      1,
      1345
    ],
    52: 1346,
    53: 1347,
    55: [
      1,
      1358
    ],
    56: 1359,
    59: [
      1,
      1366
    ],
    60: [
      1,
      1367
    ],
    68: 1371,
    69: 1372,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      1373
    ],
    88: [
      1,
      1362
    ],
    89: 1360,
    90: [
      1,
      1369
    ],
    91: [
      1,
      1370
    ],
    92: [
      1,
      1361
    ],
    93: [
      1,
      1363
    ],
    94: [
      1,
      1364
    ],
    95: [
      1,
      1365
    ]
  },
  __expand__($V51, [
      2,
      45
    ], {67:[
      2,
      45
    ]
  }),
  __expand__($V61, [
      2,
      105
    ], {67:[
      2,
      105
    ]
  }),
  __expand__($V61, [
      2,
      106
    ], {67:[
      2,
      106
    ]
  }),
  __expand__($V61, [
      2,
      109
    ], {67:[
      2,
      109
    ]
  }),
  __expand__($V61, [
      2,
      107
    ], {67:[
      2,
      107
    ]
  }),
  __expand__($V61, [
      2,
      60
    ], {67:[
      2,
      60
    ]
  }),
  __expand__($VO1, [
      2,
      110
    ], {88:[
      2,
      110
    ]
  }),
  __expand__($V61, [
      2,
      116
    ], {67:[
      2,
      116
    ]
  }),
  __expand__($V61, [
      2,
      63
    ], {67:[
      2,
      63
    ]
  }),
  __expand__($V61, [
      2,
      64
    ], {67:[
      2,
      64
    ]
  }),
  __expand__($V61, [
      2,
      61
    ], {67:[
      2,
      61
    ]
  }),
  __expand__($VO1, [
      2,
      111
    ], {88:[
      2,
      111
    ]
  }),
  __expand__($V61, [
      2,
      117
    ], {67:[
      2,
      117
    ]
  }),
  __expand__($V61, [
      2,
      62
    ], {67:[
      2,
      62
    ]
  }),
  {
    2: [
      1,
      1624
    ],
    58: 1620,
    63: 1621,
    64: [
      1,
      1622
    ],
    65: [
      1,
      1623
    ]
  },
  __expand__($V61, [
      2,
      108
    ], {67:[
      2,
      108
    ]
  }),
  {
    89: 1625,
    90: [
      1,
      1551
    ],
    91: [
      1,
      1552
    ]
  },
  {
    89: 1626,
    90: [
      1,
      1551
    ],
    91: [
      1,
      1552
    ]
  },
  __expand__($V61, [
      2,
      112
    ], {67:[
      2,
      112
    ]
  }),
  __expand__($V61, [
      2,
      113
    ], {67:[
      2,
      113
    ]
  }),
  __expand__($V61, [
      2,
      114
    ], {67:[
      2,
      114
    ]
  }),
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1627,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  {
    62: [
      1,
      1628
    ]
  },
  __expand__($Va1, [
      2,
      77
    ], {67:[
      2,
      77
    ]
  }),
  {
    2: [
      1,
      1382
    ],
    58: 1629,
    63: 1379,
    64: [
      1,
      1380
    ],
    65: [
      1,
      1381
    ]
  },
  {
    2: [
      1,
      785
    ],
    7: 1630,
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    23: 768,
    26: 769,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1631,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  __expand__($Vk, [
      2,
      67
    ], {67:[
      2,
      67
    ]
  }),
  {
    2: [
      1,
      1397
    ],
    58: 1632,
    63: 1394,
    64: [
      1,
      1395
    ],
    65: [
      1,
      1396
    ]
  },
  {
    2: [
      1,
      785
    ],
    7: 1633,
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    23: 768,
    26: 769,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1634,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  __expand__($Vr1, [
      2,
      67
    ], {81:[
      2,
      67
    ]
  }),
  {
    2: [
      1,
      1413
    ],
    58: 1635,
    63: 1410,
    64: [
      1,
      1411
    ],
    65: [
      1,
      1412
    ]
  },
  {
    2: [
      1,
      785
    ],
    7: 1636,
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    23: 768,
    26: 769,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1637,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  __expand__($Vw1, [
      2,
      67
    ], {81:[
      2,
      67
    ]
  }),
  {
    2: [
      1,
      1428
    ],
    58: 1638,
    63: 1425,
    64: [
      1,
      1426
    ],
    65: [
      1,
      1427
    ]
  },
  {
    2: [
      1,
      785
    ],
    7: 1639,
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    23: 768,
    26: 769,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1640,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  __expand__($VA1, [
      2,
      67
    ], {81:[
      2,
      67
    ]
  }),
  __expand__($VC1, [
      2,
      74
    ], {81:[
      2,
      74
    ]
  }),
  __expand__($VC1, [
      2,
      73
    ], {81:[
      2,
      73
    ]
  }),
  __expand__($VR, [
      2,
      71
    ], {62:[
      2,
      71
    ]
  }),
  {
    67: [
      1,
      1641
    ]
  },
  {
    62: [
      1,
      1642
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($V_, [
      2,
      71
    ], {62:[
      2,
      71
    ]
  }),
  {
    67: [
      1,
      1643
    ]
  },
  {
    62: [
      1,
      1644
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($V61, [
      2,
      71
    ], {62:[
      2,
      71
    ]
  }),
  {
    67: [
      1,
      1645
    ]
  },
  {
    62: [
      1,
      1646
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($VO, [
      2,
      37
    ], {67:[
      2,
      37
    ]
  }),
  __expand__($VO, [
      2,
      38
    ], {67:[
      2,
      38
    ]
  }),
  __expand__($VD1, [
      2,
      40
    ], {44:[
      1,
      1460
    ],67:[
      2,
      40
    ]
  }),
  __expand__($VD1, [
      2,
      41
    ], {44:[
      1,
      1460
    ],67:[
      2,
      41
    ]
  }),
  __expand__($VD1, [
      2,
      42
    ], {44:[
      1,
      1460
    ],67:[
      2,
      42
    ]
  }),
  __expand__($VE1, [
      2,
      44
    ], {49:[
      1,
      1461
    ],50:[
      1,
      1462
    ],67:[
      2,
      44
    ]
  }),
  __expand__($VR, [
      2,
      66
    ], {67:[
      2,
      66
    ]
  }),
  __expand__($VR, [
      2,
      70
    ], {57:[
      1,
      1647
    ],66:[
      1,
      1648
    ],67:[
      2,
      70
    ]
  }),
  __expand__($VW1, [
      2,
      72
    ], {67:[
      2,
      72
    ]
  }),
  {
    60: [
      1,
      1649
    ]
  },
  __expand__($VW1, [
      2,
      75
    ], {67:[
      2,
      75
    ]
  }),
  __expand__($VR, [
      2,
      110
    ], {67:[
      2,
      110
    ]
  }),
  __expand__($VR, [
      2,
      111
    ], {67:[
      2,
      111
    ]
  }),
  {
    62: [
      1,
      1650
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($VV, [
      2,
      68
    ], {67:[
      2,
      68
    ]
  }),
  __expand__($VW, [
      2,
      35
    ], {67:[
      2,
      35
    ]
  }),
  __expand__($VX, [
      2,
      37
    ], {67:[
      2,
      37
    ]
  }),
  __expand__($VX, [
      2,
      38
    ], {67:[
      2,
      38
    ]
  }),
  __expand__($VF1, [
      2,
      40
    ], {44:[
      1,
      1494
    ],67:[
      2,
      40
    ]
  }),
  __expand__($VF1, [
      2,
      41
    ], {44:[
      1,
      1494
    ],67:[
      2,
      41
    ]
  }),
  __expand__($VF1, [
      2,
      42
    ], {44:[
      1,
      1494
    ],67:[
      2,
      42
    ]
  }),
  __expand__($VG1, [
      2,
      44
    ], {49:[
      1,
      1495
    ],50:[
      1,
      1496
    ],67:[
      2,
      44
    ]
  }),
  __expand__($V_, [
      2,
      66
    ], {67:[
      2,
      66
    ]
  }),
  __expand__($V_, [
      2,
      70
    ], {57:[
      1,
      1651
    ],66:[
      1,
      1652
    ],67:[
      2,
      70
    ]
  }),
  __expand__($VX1, [
      2,
      72
    ], {67:[
      2,
      72
    ]
  }),
  {
    60: [
      1,
      1653
    ]
  },
  __expand__($VX1, [
      2,
      75
    ], {67:[
      2,
      75
    ]
  }),
  __expand__($V_, [
      2,
      110
    ], {67:[
      2,
      110
    ]
  }),
  __expand__($V_, [
      2,
      111
    ], {67:[
      2,
      111
    ]
  }),
  {
    62: [
      1,
      1654
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($V21, [
      2,
      68
    ], {67:[
      2,
      68
    ]
  }),
  __expand__($V31, [
      2,
      37
    ], {67:[
      2,
      37
    ]
  }),
  __expand__($V31, [
      2,
      38
    ], {67:[
      2,
      38
    ]
  }),
  __expand__($VH1, [
      2,
      40
    ], {44:[
      1,
      1527
    ],67:[
      2,
      40
    ]
  }),
  __expand__($VH1, [
      2,
      41
    ], {44:[
      1,
      1527
    ],67:[
      2,
      41
    ]
  }),
  __expand__($VH1, [
      2,
      42
    ], {44:[
      1,
      1527
    ],67:[
      2,
      42
    ]
  }),
  __expand__($VI1, [
      2,
      44
    ], {49:[
      1,
      1528
    ],50:[
      1,
      1529
    ],67:[
      2,
      44
    ]
  }),
  __expand__($V61, [
      2,
      66
    ], {67:[
      2,
      66
    ]
  }),
  __expand__($V61, [
      2,
      70
    ], {57:[
      1,
      1655
    ],66:[
      1,
      1656
    ],67:[
      2,
      70
    ]
  }),
  __expand__($VY1, [
      2,
      72
    ], {67:[
      2,
      72
    ]
  }),
  {
    60: [
      1,
      1657
    ]
  },
  __expand__($VY1, [
      2,
      75
    ], {67:[
      2,
      75
    ]
  }),
  __expand__($V61, [
      2,
      110
    ], {67:[
      2,
      110
    ]
  }),
  __expand__($V61, [
      2,
      111
    ], {67:[
      2,
      111
    ]
  }),
  {
    62: [
      1,
      1658
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($Va1, [
      2,
      68
    ], {67:[
      2,
      68
    ]
  }),
  __expand__($Vg, [
      2,
      71
    ], {67:[
      2,
      71
    ]
  }),
  {
    67: [
      1,
      1659
    ]
  },
  {
    62: [
      1,
      1660
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($VS, [
      2,
      71
    ], {81:[
      2,
      71
    ]
  }),
  {
    67: [
      1,
      1661
    ]
  },
  {
    62: [
      1,
      1662
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($V$, [
      2,
      71
    ], {81:[
      2,
      71
    ]
  }),
  {
    67: [
      1,
      1663
    ]
  },
  {
    62: [
      1,
      1664
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($V71, [
      2,
      71
    ], {81:[
      2,
      71
    ]
  }),
  {
    67: [
      1,
      1665
    ]
  },
  {
    62: [
      1,
      1666
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($Vr1, [
      2,
      74
    ], {66:[
      2,
      74
    ]
  }),
  __expand__($Vr1, [
      2,
      73
    ], {66:[
      2,
      73
    ]
  }),
  __expand__($Vw1, [
      2,
      74
    ], {66:[
      2,
      74
    ]
  }),
  __expand__($Vw1, [
      2,
      73
    ], {66:[
      2,
      73
    ]
  }),
  __expand__($VA1, [
      2,
      74
    ], {66:[
      2,
      74
    ]
  }),
  __expand__($VA1, [
      2,
      73
    ], {66:[
      2,
      73
    ]
  }),
  {
    2: [
      1,
      1593
    ],
    58: 1667,
    63: 1590,
    64: [
      1,
      1591
    ],
    65: [
      1,
      1592
    ]
  },
  {
    2: [
      1,
      785
    ],
    7: 1668,
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    23: 768,
    26: 769,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1669,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  __expand__($VV, [
      2,
      67
    ], {67:[
      2,
      67
    ]
  }),
  {
    2: [
      1,
      1609
    ],
    58: 1670,
    63: 1606,
    64: [
      1,
      1607
    ],
    65: [
      1,
      1608
    ]
  },
  {
    2: [
      1,
      785
    ],
    7: 1671,
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    23: 768,
    26: 769,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1672,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  __expand__($V21, [
      2,
      67
    ], {67:[
      2,
      67
    ]
  }),
  {
    2: [
      1,
      1624
    ],
    58: 1673,
    63: 1621,
    64: [
      1,
      1622
    ],
    65: [
      1,
      1623
    ]
  },
  {
    2: [
      1,
      785
    ],
    7: 1674,
    10: 798,
    14: 778,
    15: 779,
    16: 780,
    17: 781,
    18: 782,
    19: 783,
    20: 784,
    23: 768,
    26: 769,
    29: 770,
    32: 771,
    39: [
      1,
      787
    ],
    40: [
      1,
      786
    ],
    41: 772,
    45: 773,
    46: 774,
    48: [
      1,
      775
    ],
    52: 776,
    53: 777,
    55: [
      1,
      788
    ],
    56: 789,
    59: [
      1,
      796
    ],
    60: [
      1,
      797
    ],
    68: 801,
    69: 802,
    71: [
      1,
      69
    ],
    73: [
      1,
      70
    ],
    74: [
      1,
      803
    ],
    88: [
      1,
      792
    ],
    89: 790,
    90: [
      1,
      799
    ],
    91: [
      1,
      800
    ],
    92: [
      1,
      791
    ],
    93: [
      1,
      793
    ],
    94: [
      1,
      794
    ],
    95: [
      1,
      795
    ]
  },
  __expand__($V9, [
      2,
      100
    ], {84:335,7:336,12:337,23:338,76:339,26:340,82:341,77:342,29:343,32:344,41:347,45:348,46:349,52:351,53:352,14:353,15:354,16:355,17:356,18:357,19:358,20:359,56:364,89:365,10:373,68:376,69:377,61:1675,2:[
      1,
      360
    ],39:[
      1,
      362
    ],40:[
      1,
      361
    ],48:[
      1,
      350
    ],55:[
      1,
      363
    ],59:[
      1,
      371
    ],60:[
      1,
      372
    ],71:[
      1,
      69
    ],73:[
      1,
      70
    ],74:[
      1,
      378
    ],78:[
      1,
      346
    ],83:[
      1,
      345
    ],88:[
      1,
      367
    ],90:[
      1,
      374
    ],91:[
      1,
      375
    ],92:[
      1,
      366
    ],93:[
      1,
      368
    ],94:[
      1,
      369
    ],95:[
      1,
      370
    ]
  }),
  __expand__($Va1, [
      2,
      67
    ], {67:[
      2,
      67
    ]
  }),
  __expand__($VP1, [
      2,
      74
    ], {67:[
      2,
      74
    ]
  }),
  __expand__($VP1, [
      2,
      73
    ], {67:[
      2,
      73
    ]
  }),
  __expand__($VR1, [
      2,
      74
    ], {81:[
      2,
      74
    ]
  }),
  __expand__($VR1, [
      2,
      73
    ], {81:[
      2,
      73
    ]
  }),
  __expand__($VT1, [
      2,
      74
    ], {81:[
      2,
      74
    ]
  }),
  __expand__($VT1, [
      2,
      73
    ], {81:[
      2,
      73
    ]
  }),
  __expand__($VV1, [
      2,
      74
    ], {81:[
      2,
      74
    ]
  }),
  __expand__($VV1, [
      2,
      73
    ], {81:[
      2,
      73
    ]
  }),
  __expand__($VR, [
      2,
      71
    ], {67:[
      2,
      71
    ]
  }),
  {
    67: [
      1,
      1676
    ]
  },
  {
    62: [
      1,
      1677
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($V_, [
      2,
      71
    ], {67:[
      2,
      71
    ]
  }),
  {
    67: [
      1,
      1678
    ]
  },
  {
    62: [
      1,
      1679
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($V61, [
      2,
      71
    ], {67:[
      2,
      71
    ]
  }),
  {
    67: [
      1,
      1680
    ]
  },
  {
    62: [
      1,
      1681
    ],
    81: [
      1,
      539
    ]
  },
  __expand__($VW1, [
      2,
      74
    ], {67:[
      2,
      74
    ]
  }),
  __expand__($VW1, [
      2,
      73
    ], {67:[
      2,
      73
    ]
  }),
  __expand__($VX1, [
      2,
      74
    ], {67:[
      2,
      74
    ]
  }),
  __expand__($VX1, [
      2,
      73
    ], {67:[
      2,
      73
    ]
  }),
  __expand__($VY1, [
      2,
      74
    ], {67:[
      2,
      74
    ]
  }),
  __expand__($VY1, [
      2,
      73
    ], {67:[
      2,
      73
    ]
  })
],
defaultActions: {
  30: [
    2,
    1
  ],
  31: [
    2,
    2
  ],
  78: [
    2,
    120
  ],
  130: [
    2,
    78
  ],
  131: [
    2,
    85
  ],
  189: [
    2,
    81
  ],
  190: [
    2,
    84
  ],
  191: [
    2,
    82
  ],
  588: [
    2,
    79
  ],
  589: [
    2,
    80
  ]
},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new this.JisonParserError(str, hash);
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],

        vstack = [null],    // semantic value stack
        lstack = [],        // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,     // (only used when the grammar contains error recovery rules)
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState = {
      yy: {}
    };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc === 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    }

    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

    function lex() {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol;
    var preErrorSymbol = null;
    var state, action, a, r;
    var yyval = {};
    var p, len, this_production, lstack_begin, lstack_end, newState;
    var expected = [];
    var retval = false;

    if (this.pre_parse) {
        this.pre_parse.call(this, sharedState.yy);
    }
    if (sharedState.yy.pre_parse) {
        sharedState.yy.pre_parse.call(this, sharedState.yy);
    }

    // Return the rule stack depth where the nearest error rule can be found.
    // Return FALSE when no error recovery rule was found.
    function locateNearestErrorRecoveryRule(state) {
        var stack_probe = stack.length - 1;
        var depth = 0;

        // try to recover from error
        for (;;) {
            // check for error recovery rule in this state
            if ((TERROR.toString()) in table[state]) {
                return depth;
            }
            if (state === 0 || stack_probe < 2) {
                return false; // No suitable error recovery rule available.
            }
            stack_probe -= 2; // popStack(1): [symbol, action]
            state = stack[stack_probe];
            ++depth;
        }
    }


    function collect_expected_token_set(state) {
        var tokenset = [];
        for (var p in table[state]) {
            if (p > TERROR) {
                if (self.terminal_descriptions_ && self.terminal_descriptions_[p]) {
                    tokenset.push(self.terminal_descriptions_[p]);
                }
                else if (self.terminals_[p]) {
                    tokenset.push("'" + self.terminals_[p] + "'");
                }
            }
        }
        return tokenset;
    }

    try {
        for (;;) {
            // retrieve state number from top of stack
            state = stack[stack.length - 1];

            // use default actions if available
            if (this.defaultActions[state]) {
                action = this.defaultActions[state];
            } else {
                if (symbol === null || typeof symbol === 'undefined') {
                    symbol = lex();
                }
                // read action for current state and first input
                action = table[state] && table[state][symbol];
            }

            // handle parse error
            if (typeof action === 'undefined' || !action.length || !action[0]) {
                var error_rule_depth;
                var errStr = '';

                if (!recovering) {
                    // first see if there's any chance at hitting an error recovery rule:
                    error_rule_depth = locateNearestErrorRecoveryRule(state);

                    // Report error
                    expected = collect_expected_token_set(state);
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' +
                                 (symbol === EOF ? 'end of input' :
                                  ("'" + (this.terminals_[symbol] || symbol) + "'"));
                    }
                    a = this.parseError(errStr, p = {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        token_id: symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected,
                        recoverable: (error_rule_depth !== false),
                        state_stack: stack
                    });
                    if (!p.recoverable) {
                        retval = a;
                        break;
                    }
                } else if (preErrorSymbol !== EOF) {
                    error_rule_depth = locateNearestErrorRecoveryRule(state);
                }

                // just recovered from another error
                if (recovering === 3) {
                    if (symbol === EOF || preErrorSymbol === EOF) {
                        retval = this.parseError(errStr || 'Parsing halted while starting to recover from another error.', {
                            text: lexer.match,
                            token: this.terminals_[symbol] || symbol,
                            token_id: symbol,
                            line: lexer.yylineno,
                            loc: yyloc,
                            expected: expected,
                            recoverable: false,
                            state_stack: stack
                        });
                        break;
                    }

                    // discard current lookahead and grab another
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    symbol = lex();
                }

                // try to recover from error
                if (error_rule_depth === false) {
                    retval = this.parseError(errStr || 'Parsing halted. No suitable error recovery rule available.', {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        token_id,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected,
                        recoverable: false,
                        state_stack: stack
                    });
                    break;
                }
                popStack(error_rule_depth);

                preErrorSymbol = (symbol === TERROR ? null : symbol); // save the lookahead token
                symbol = TERROR;         // insert generic error symbol as new lookahead
                state = stack[stack.length - 1];
                action = table[state] && table[state][TERROR];
                recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
            }


            // this shouldn't happen, unless resolve defaults are off
            if (action[0] instanceof Array && action.length > 1) {
                retval = this.parseError('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    token_id: symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: false,
                    state_stack: stack
                });
                break;
            }

            switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution / no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                continue;

            case 2:
                // reduce
                //this.reductionCount++;

                this_production = this.productions_[action[1]];
                len = this_production[1];
                lstack_end = lstack.length;
                lstack_begin = lstack_end - (len || 1);
                lstack_end--;

                // perform semantic action
                yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack_begin].first_line,
                    last_line: lstack[lstack_end].last_line,
                    first_column: lstack[lstack_begin].first_column,
                    last_column: lstack[lstack_end].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack_begin].range[0], lstack[lstack_end].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack, stack].concat(args));

                if (typeof r !== 'undefined') {
                    retval = r;
                    break;
                }

                // pop off stack
                if (len) {
                    popStack(len);
                }

                stack.push(this_production[0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                stack.push(newState);
                continue;

            case 3:
                // accept
                retval = true;
                break;
            }

            // break out of loop: we accept or fail with error
            break;
        }
    } finally {
        var rv;

        if (sharedState.yy.post_parse) {
            rv = sharedState.yy.post_parse.call(this, sharedState.yy, retval);
            if (typeof rv !== 'undefined') retval = rv;
        }
        if (this.post_parse) {
            rv = this.post_parse.call(this, sharedState.yy, retval);
            if (typeof rv !== 'undefined') retval = rv;
        }
    }

    return retval;
}
};

    /*
     * This chunk is included in the parser code, before the lexer definition section and after the parser has been defined.
     *
     * WARNING:
     *
     * Meanwhile, keep in mind that all the parser actions, which will execute inside the `parser.performAction()` function,
     * will have a `this` pointing to `$$`.
     *
     * If you want to access the lexer and/or parser, these are accessible inside the parser rule action code via
     * the `yy.lexer` and `yy.parser` dereferences respectively.
     */

    //console.log("parser object definition: ", this);











/*
 * This chunk is included in the parser object code,
 * following the 'init' code block that may be set in `%{ ... %}` at the top of this
 * grammar definition file.
 */



parser.createRangeFromRange = function (rangeref) {
    return {
        rangeRef: [rangeLabelWithDollarToRowColWorkbook(rangeref)],
        locInfo: null,
        consumeCount: 0
    };
};

parser.createRangeFromCell = function (cellref) {
    var coord = cellLabelWithDollarToRowColWorkbook(cellref);
    assert(coord);
    return {
        rangeRef: [{
            row: coord.row,
            row2: coord.row,
            col: coord.col,
            col2: coord.col,
            workbookIndex: coord.workbookIndex
        }],
        locInfo: null,
        consumeCount: 0
    };
};

parser.updateRangeLocationInfo = function (range, locInfo, consumeCount) {
    if (!range.locInfo) {
        range.locInfo = locInfo;
        assert(range.consumeCount === 0);
    } else {
        if (range.locInfo.last_line < locInfo.last_line || (range.locInfo.last_line === locInfo.last_line && range.locInfo.last_column < locInfo.last_column)) {
            range.locInfo.last_line = locInfo.last_line;
            range.locInfo.last_column = locInfo.last_column;
            if (locInfo.range) {
                assert(range.locInfo.range);
                assert(range.locInfo.range[1] <= locInfo.range[1]);
                assert(range.locInfo.range[1] <= locInfo.range[0]);
                range.locInfo.range[1] = locInfo.range[1];
            }
        }
        if (range.locInfo.first_line > locInfo.first_line || (range.locInfo.first_line === locInfo.first_line && range.locInfo.first_column > locInfo.first_column)) {
            range.locInfo.first_line = locInfo.first_line;
            range.locInfo.first_column = locInfo.first_column;
            if (locInfo.range) {
                assert(range.locInfo.range);
                assert(range.locInfo.range[0] <= locInfo.range[0]);
                assert(range.locInfo.range[1] <= locInfo.range[0]);
                range.locInfo.range[0] = locInfo.range[0];
            }
        }
    }
    range.consumeCount += consumeCount;
};

parser.mergeRanges = function (range1, range2) {
    assert(range1);
    assert(range2);
    range1.rangeRef = range1.rangeRef.concat(range2.rangeRef);
    this.updateRangeLocationInfo(range1, range2.locInfo, range2.consumeCount);
    return range1;
};

//e.g., gets {B4:A2,C7} and returns the values of [A2,B2,A3,B3,A4,B4,C7]
//e.g., Revenues[2011]:Revenues[2014], transforms into an array Cell IDs (e.g., [A2,B2,C2,D2]) and returns the values of the cells in the array
//
//Note: user can type B4:A2
parser.getArrayValueOfCellRangeSpec = function (rangeSpec) {
    // In order to prevent double references in the range spec to be executed twice or more, we first collect
    // the set of referenced cells:
    var collection = new Uint8ClampedArray(MAX_GRID_ROW * MAX_GRID_COL);
    var rangesize = 0;
    for (var k = 0, len = rangeSpec.length; k < len; k++) {
        var spec = rangeSpec[k];
        rangesize += (spec.row2 - spec.row + 1) * (spec.col2 + spec.col + 1);
    }
    var values = new Array(rangesize);
    var valindex = 0;
    for (var k = 0, len = rangeSpec.length; k < len; k++) {
        var spec = rangeSpec[k];
        //create the array of cells
        for (var i = spec.row; i <= spec.row2; i++) {
            var rowstep = i * MAX_GRID_COL;
            for (var j = spec.col; j <= spec.col2; j++) {
                var cellRef = j + rowstep;
                if (!collection[cellRef]) {
                    collection[cellRef] = 1;
                    spec.workbookIndex = spec.workbookIndex || getImplicitWBIdx();
                    assert(spec.workbookIndex);
                    var label = rowColumnWorkbookToWBCellId(i, j, spec.workbookIndex);
                    values[valindex++] = getCellValueFromGraph(label);
                }
            }
        }
    }
    // and redimension the array once so that the receiver gets a nice, clean, array of cell values.
    values.length = valindex;
    return values;
};






/*
 * Return TRUE if all AST nodes in the arglist collection (an array) are constants.
 *
 * Otherwise return FALSE.
 */
parser.isEntireArgListConstant = function (arglist) {
    var i, l = arglist.length;
    for (i = 0; i < l; l++) {
        if (!arglist[i].constant) {
            return false;
        }
    }
    return true;
};


/*
 * Return the UNIT of the arglist collective: when all have the same UNIT, it is that.
 *
 * Otherwise it is `FU_ANY` as we cannot say how these AST nodes combine (`SUM`/`AVG`/`MULTIPLY`/...).
 */
parser.determineArgListUnit = function (arglist) {
    var i, u, l = arglist.length;
    if (!l) {
        return FU_ANY;
    }
    u = arglist[0].unit;
    for (i = 1; i < l; l++) {
        if (arglist[i].unit != u) {
            return FU_ANY;
        }
    }
    return u;
};


/*
 * Decode cell references such as `A5` when these are entered in input fields, etc.
 *
 * This performs a regular parse and then makes sure that the parsed 'formula' is actually
 * a single, valid, cell reference and returns the corresponding AST object.
 *
 * When the entered content is NOT a valid cell reference, an exception (error message) is thrown.
 */
parser.parseCellReference = function (input) {
    this.parse_mode = FPM_CELLREF;
    var ast;

    try {
        ast = this.parse(input);
    }
    finally {
        this.parse_mode = FPM_FORMULA;
    }

    if (typeof ast !== "undefined" && ast.opcode == FKW_CELLREF) {
        return ast;
    }

    throw new Error(input + " is not a valid cell reference");
};


/*
 * Decode cell range references such as `A5:C7` when these are entered in input fields, etc.
 *
 * This performs a regular parse and then makes sure that the parsed 'formula' is actually
 * a single, valid, range reference and returns the corresponding AST object.
 *
 * When the entered content is NOT a valid range reference, an exception (error message) is thrown.
 */
parser.parseRangeReference = function (input) {
    this.parse_mode = FPM_RANGEREF;
    var ast;

    try {
        ast = this.parse(input);
    }
    finally {
        this.parse_mode = FPM_FORMULA;
    }

    if (typeof ast !== "undefined" && ast.opcode == FKW_RANGEREF) {
        return ast;
    }

    throw new Error(input + " is not a valid range reference");
};


/*
 * Decode the input expression and 'fold' it into a single value, i.e. calculate its present value.
 *
 * This performs a regular parse and then makes sure that the parsed 'formula' is 'folded'
 * into a single (numeric / string / boolean) value and returns the corresponding AST object.
 *
 * When the entered content is NOT a valid immediate value expression, an exception (error message) is thrown.
 */
parser.parseValue = function (input) {
    this.parse_mode = FPM_IMMEDIATE_VALUE;
    var ast;

    try {
        ast = this.parse(input);
    }
    finally {
        this.parse_mode = FPM_FORMULA;
    }

    if (typeof ast !== "undefined" && ast.opcode == FKW_VALUE) {
        return ast;
    }

    throw new Error(input + " is not a valid value expression");
};


/*
 * Remove duplicated quotes (of the form `quote_str + quote_str`, e.g. `""`) from the input string.
 */
parser.dedupQuotedString = function (str, quote_str) {
    return str.replace(quote_str + quote_str, quote_str);
};


// Would it be a viable basic column identifier?
parser.isValidColumnID = function (s) {
    var col;
    var match;

    if (s.length <= MAX_GRID_COL_ID_LENGTH) {
        s = s.toUpperCase();
        match = s.match(/^[A-Z]+$/);
        if (match) {
            // check if this is a legal column id:
            col = colLetterToNumber(s);
            assert(col === false || assertGraphCol(col));
            if (col) {
                return col;
            }
        }
    }
    return false;
};


// Would it be a viable basic row identifier?
parser.isValidRowID = function (s) {
    var row;
    var match;

    if (s.length <= MAX_GRID_ROW_ID_LENGTH) {
        s = s.toUpperCase();
        match = s.match(/^[0-9]+$/);
        if (match) {
            // check if this is a legal column id:
            row = Number(s);
            if (row >= 1 && row <= MAX_GRID_ROW) {
                return row;
            }
        }
    }
    return false;
};




// Would it be a viable cell reference?
parser.isValidCellRef = function (s) {
    var rv = cellLabelWithDollarToRowColWorkbook(s, {
        fireEventOnError: false
    });
    return rv;
};




// Would it be a viable cell range reference?
parser.isValidCellRange = function (s) {
    var rv = rangeLabelWithDollarToRowColWorkbook(s, {
        fireEventOnError: false
    });
    return rv;
};



/*
 * Return the definition structure for the given symbol name, or FALSE when the symbol is unknown.
 *
 * The definition structure contains these elements:
 *
 * - token
 * - defined_value
 */

parser.getSymbol4Function = function (name) {
    name = name.toUpperCase();
    assert(this._symbol2token_lookup_table);
    assert(this._symbol2token_lookup_table.functions);
    var rv = this._symbol2token_lookup_table.functions[name];
    if (rv && rv.quality < vUserPreferences.quality) {
        return false;
    }
    return rv || false;
};

parser.getSymbol4DefinedConstant = function (name, mandatory_category_bits) {
    mandatory_category_bits |= 0;
    name = name.toUpperCase();
    assert(this._symbol2token_lookup_table);
    assert(this._symbol2token_lookup_table.constants);
    var rv = this._symbol2token_lookup_table.constants[name];
    if (rv && rv.quality < vUserPreferences.quality) {
        return false;
    }
    if (rv && (rv.category & mandatory_category_bits) !== mandatory_category_bits) {
        return false;
    }
    return rv || false;
};

parser.getSymbol4Currency = function (name) {
    name = name.toUpperCase();
    assert(this._symbol2token_lookup_table);
    assert(this._symbol2token_lookup_table.currencies);
    var rv = this._symbol2token_lookup_table.currencies[name];
    if (rv && rv.quality < vUserPreferences.quality) {
        return false;
    }
    /*
     * output structure:
     *
     * - notation: FKA constant
     * - prefix:   string (optional; required for currencies which are not hard-coded FKA notation constants)
     */
    return rv || false;
};

parser.getJSONfilterSymbol = function (name) {
    name = name.toUpperCase();
    assert(this._symbol2token_lookup_table);
    assert(this._symbol2token_lookup_table.json_filter_functions);
    var rv = this._symbol2token_lookup_table.json_filter_functions[name];
    return rv || false;
};

parser.getSymbol4RowOrColumnName = function (name) {
    var rv = this.getSymbol4RowName(name);
    if (!rv) {
        rv = this.getSymbol4ColumnName(name);
        if (rv) {
            assert(rv.col >= 1);
            assert(rv.provides === NRA_COLUMN);
            return rv;
        }
        return false;
    } else {
        assert(rv.row >= 1);
        assert(rv.provides === NRA_ROW);
        return rv;
    }
};

parser.getSymbol4RowName = function (name) {
    var rv = vGraph.getRowOfLabel(name);
    if (rv) {
        return {
            row: rv,
            provides: NRA_ROW
        };
    }
    return false;
};

parser.getSymbol4ColumnName = function (name) {
    var rv = vGraph.getColOfLabel(name);
    if (rv) {
        return {
            col: rv,
            provides: NRA_COLUMN
        };
    }
    return false;
};

parser.getSymbol4CellRef = function (name) {
    var rv = vGraph.getCellOfLabel(name);
    if (rv) {
        return {
            col: rv.col,
            row: rv.row,
            provides: NRA_COLUMN | NRA_ROW
        };
    }
    return false;
};


/*
 * Initialize the symbol lookup tables.
 */
parser.initSymbolTable = function (custom_symbols) {
    this._symbol2token_lookup_table = {
        functions: {},                  // hash table ~ dictionary
        constants: {},                  // hash table ~ dictionary
        currencies: {},                 // hash table ~ dictionary
        json_filter_functions: {}       // hash table ~ dictionary
    };

    // first set up the default symbols: constants, etc.; once that is done, register the custom symbols:
    this.addSymbols(get_predefined_formula_constants(), FSC_PREDEFINED_CONSTANT);
    this.addSymbols(get_predefined_formula_currencies(), FSC_CURRENCY);
    this.addSymbols(get_predefined_formula_functions(), FSC_FUNCTION);

    return this.addSymbols(custom_symbols);
};


/*
 * Register one or more symbols in the symbol lookup tables:
 */
parser.addSymbols = function (symbols, default_category) {
    var s, category, name, done, node, alts, k;

    for (var i = 0, len = symbols.length; i < len; i++) {
        s = symbols[i];

        // ignore symbols which are not enabled / suitable for the current quality level:
        if (s.quality < vUserPreferences.quality) {
            continue;
        }

        category = s.category || default_category;
        done = 0;
        if (category & FSC_FUNCTION) {
            alts = s.alts || [];
            alts.push(String(s.name).toUpperCase());
            for (k in alts) {
                this._symbol2token_lookup_table.functions[alts[k]] = s;
            }
            ++done;
        }
        if (category & FSC_PREDEFINED_CONSTANT) {
            alts = s.alts || [];
            alts.push(String(s.name).toUpperCase());
            for (k in alts) {
                this._symbol2token_lookup_table.constants[alts[k]] = s;
            }
            ++done;
        }
        if (category & FSC_CURRENCY) {
            alts = s.alts || [];
            alts.push(String(s.name).toUpperCase());
            for (k in alts) {
                this._symbol2token_lookup_table.currencies[alts[k]] = s;
            }
            ++done;
        }
        if (category & FSC_CELL_LABEL) {
            vGraph.setCellLabel(s.col, s.row, s.name);
            ++done;
        }
        if (category & FSC_COLUMN_LABEL) {
            vGraph.setColLabel(s.col, s.name);
            ++done;
        }
        if (category & FSC_ROW_LABEL) {
            vGraph.setRowLabel(s.row, s.name);
            ++done;
        }
        if (category & FSC_JSON_FILTER_FUNCTION) {
            alts = s.alts || [];
            alts.push(String(s.name).toUpperCase());
            for (k in alts) {
                this._symbol2token_lookup_table.json_filter_functions[alts[k]] = s;
            }
            ++done;
        }
        if (category & FSC_CELL_VALUE_PRESET) {
            // WARNING: this category is really here to assist the unit tests; in actual use, this is never expected to be invoked!
            node = vGraph.createBlankNode(s.row, s.col);
//            node.formula = "" + s.value;
            node.value = s.value;
            vProject.addNode(node, node.value);
            ++done;
        }
        if (!done) {
            //console.log("symbol [" + s.name + "] does not belong in any category: ", i, s, category);
            throw new Error("symbol [" + s.name + "] does not belong in any category");
        }
    }
    return this;
};




/*
 * Store the current comment which has terminated and needs to be stored until the next token is produced by the lexer.
 */
parser.pushComment = function () {
    var lexer = this.lexer;

    // a la pastInput():
    var past = lexer.matched.substr(0, this.matched.length - this.match.length);
    var startloc = lexer.inline_comment_start_yylloc.ranges[1]; // pick the offset beyond the comment-start marker!
    past = past.substr(startloc);
    // strip surrounding whitespace:
    // http://jsperf.com/javascript-trim-string/2
    past = past.trim();

    var node = new Visyond.FormulaParser.inlineComment(FKW_INLINE_COMMENT, lexer.inline_comment_start_yylloc, past);
    this.comments.push(node);
    return this;
};


/*
 * Return the array of comments when there are any, otherwise return FALSE.
 *
 * Also empty the comment store.
 */
parser.popComments = function () {
    var rv = this.comments;
    this.clearComments();
    if (typeof rv !== "undefined" && rv.length > 0) {
        return rv;
    } else {
        return false;
    }
};


/*
 * Clear / (re-)initialize the comments' store.
 */
parser.clearComments = function () {
    this.comments = [];
    return this;
};


/*
 * Return the index to the next available slot in the comment store.
 *
 * Consequently returns 0 when the comment store is empty.
 */
parser.getNextCommentIndex = function () {
    var rv = this.comments;
    if (typeof rv !== "undefined" && rv.length > 0) {
        return rv.length;
    } else {
        return 0;
    }
};


parser.pre_parse = function (yy) {
    //console.log("parser init", this, arguments);

    /*
     * The 'init phase' is always invoked for every parse invocation.
     *
     * At this point in time, nothing has happened yet: no token has
     * been lexed, no real statement has been parsed yet.
     *
     * Incidentally, we also use this moment in time to reset the
     * 'inline comments' monitor: depending on the `options.inline_comments_mode`
     * setting do we allow inline comments
     *
     *  - always,
     *  - only after the "=" starting the formula, or
     *  - never
     *
     * The grammar has been constructed such that this rule can be
     * resolved without any look-ahead, thanks to a 'default action'.
     */
    //yy.lexer.options.backtrack_lexer = true;
    //yy.lexer.options.ranges = true;             // required for the inline comments to work as the start location is tracked via the `yylloc.range[]`
    yy.lexer.options.inline_comment_mode = yy.inline_comment_mode | 0;

    if (yy.lexer.options.inline_comment_mode < 2) {
        yy.lexer.inline_comments_monitor = 0; // for `mode=1` comment support will be enabled as soon as we encounter a `=`
    } else {
        yy.lexer.inline_comments_monitor = yy.lexer.options.inline_comment_mode + 1;
    }

    // and make sure the comments store is prepped:
    yy.parser.clearComments();

    // and init the symbol tables if the caller didn't do so already (we do this in order to prevent undesirable crashes)
    if (typeof yy.parser._symbol2token_lookup_table === "undefined") {
        yy.parser.initSymbolTable([]);
    }

    /*
     * Depending on parser mode we must push a 'magick marker' into the lexer stream
     * which is a hack offering a working alternative to having the parser generator
     * support multiple %start rules.
     */
    yy.lexer.pushState('PARSE_MODE_DETECTION');
    switch (yy.parser.parser_mode) {
    default:
        break;

    case FPM_CELLREF:
        yy.lexer.unput("\u0001");
        break;

    case FPM_RANGEREF:
        yy.lexer.unput("\u0002");
        break;

    case FPM_IMMEDIATE_VALUE:
        yy.lexer.unput("\u0003");
        break;
    }
};







// Return FALSE on success, return object containing both index number of argument which mismatched the spec + minimal error report
//
// break_on_severity_level: when set, it determines whether this validation function will break on the first WARNING (-1/false) or ERROR (+1/true)
parser.passingArgumentSetValidation = function (opcode, args_array, break_on_severity_level) {
    // opcode is a reference to the object

    break_on_severity_level |= 0;
    break_on_severity_level--;          // FALSE --> -1 // TRUE --> 0

    // console.log("opcode.parameter_set_definition from passingArgumentSetValidation: ",opcode.parameter_set_definition);
    // console.log("args_array from passingArgumentSetValidation: ",args_array);

    var arg_def_set = opcode.parameter_set_definition;
    var alen, dlen, ai, di, dt, at, i;
    var basic_type, dotdotdot, coerce;
    var oki;

    alen = args_array.length;
    dlen = arg_def_set.length;

    // example: [FAX_NUMBER | FAX_COERCE | FAX_DOTDOTDOT]

    // check each incoming argument against the function interface specification:
    di = 0;
    for (ai = 0; ai < alen; ai++) {
        if (di >= dlen) {
            // We ran out of argument specs early: apparently we received more function arguments than is legally allowed!
            return {
                severity: 1,         // ERROR > 0
                index: ai,
                spec_index: di,
                spec_bits: null,
                is_user_failure: true,
                message: "Argument #" + (ai + 1) + " is superfluous and ignored by the function"
            };
        }
        dt = arg_def_set[di]; // FAX_... bits defining the expected argument type.
        // extract basic type and option bits:
        basic_type = (dt & FAX_ANY);
        optional = (dt & FAX_OPTIONAL);
        dotdotdot = (dt & FAX_DOTDOTDOT);
        coerce = (dt & FAX_COERCE);

        at = typeof args_array[ai];
        // TODO: fix this code so it works out for COUNTIF() et al: those have FAX_DOTDOTDOT followed by 'trailing' argument(s) in the spec!
        /*
         * Nasty: two ways to invoke COUNTIF() et al as Excel formula expressions:
         *
         * **Edit: NOT TRUE -- > EXCEL DOES NOT ALLOW TO INVOKE THEM LIKE THE BELOW, ONLY RANGE AND CONDITION**
         *
         * =COUNTIF(A1, A2, A3, A4, A5, ">0");
         * -->
         * =COUNTIF(1, 2, 3, 4, 5, ">0");
         * i.e. args_array.length = 6
         *
         * =COUNTIF(A1:A5, ">0");
         * -->
         * =COUNTIF([1, 2, 3, 4, 5], ">0");
         * i.e. args_array.length = 2
         */

        di++;

        if (dotdotdot) {
            // when the spec announces it expects an arbitrary number of arguments like this one,
            // we do NOT increment the spec index as the next argument must be matched against the same
            // spec entry.
            di--;
        }

        if (optional) {
            // argument is allowed to not be present, i.e. may be undefined/empty. E.g. 2nd arg for "IF(cond,,false_value)"
            if (at === 'undefined') {
                continue;
            }
        }
        // when the spec announces the argument will be coerced to some type(s), we currently accept ANYTHING!
        if (coerce) {
            continue;
        }
        // when the argument may be anything, we're down with that too!
        if (basic_type === FAX_ANY) {
            continue;
        }

        // basic_type is a bitfield itself, so check argument type against the bits:
        switch (at) {
        case 'undefined':
            // that's unexpected: we only get here when the argument is NOT OPTIONAL.
            // ... and 'undefined' is NOT identical to 'empty' ...
            return {
                severity: 1,         // ERROR > 0
                index: ai,
                spec_index: di,
                spec_bits: dt,
                is_user_failure: false,
                message: "Argument #" + (ai + 1) + " is unexpectedly empty/undefined; was expecting " + parser.describeFAXbits(dt)
            };

        case 'boolean':
            if (!(basic_type & FAX_BOOLEAN)) {
                oki = {
                    severity: -1,         // WARNING < 0
                    index: ai,
                    spec_index: di,
                    spec_bits: dt,
                    is_user_failure: false,
                    message: "Argument #" + (ai + 1) + " is a boolean, which will not be coerced; was expecting " + parser.describeFAXbits(dt)
                };
                if (break_on_severity_level <= oki.severity) return oki;
            }
            continue;

        case 'string':
            if (!(basic_type & FAX_STRING)) {
                // When we don't accept a string input, we may still accept something similar: a DATE
                // (Side note: we 'know' that FAX_COMPLEX_NUMBER = FAX_STRING so we don't go and check for FAX_COMPLEX_NUMBER separately here!)
                if (!(basic_type & FAX_DATE)) {
                    oki = {
                        severity: -1,         // WARNING < 0
                        index: ai,
                        spec_index: di,
                        spec_bits: dt,
                        is_user_failure: false,
                        message: "Argument #" + (ai + 1) + " is a string, which will not be coerced; was expecting " + parser.describeFAXbits(dt)
                    };
                    if (break_on_severity_level <= oki.severity) return oki;
                }
                // When we allow a date, we now assume ANY string will correctly coerce into a valid date.
                // We do know this is a very fast and off-handed (and WRONG) approach, but we want speed over accuracy for now...
            }
            continue;

        case 'number':
            if (!(basic_type & FAX_NUMBER)) {
                // When we don't accept a numeric input, we may still accept something similar: a DATE
                if (!(basic_type & FAX_DATE)) {
                    oki = {
                        severity: -1,         // WARNING < 0
                        index: ai,
                        spec_index: di,
                        spec_bits: dt,
                        is_user_failure: false,
                        message: "Argument #" + (ai + 1) + " is a number, which will not be coerced; was expecting " + parser.describeFAXbits(dt)
                    };
                    if (break_on_severity_level <= oki.severity) return oki;
                }
                // When we allow a date, we now assume ANY number will correctly coerce into a valid date.
                // We do know this is a very fast and off-handed (and WRONG) approach, but we want speed over accuracy for now...
            }
            continue;

        default:
            // If the given argument is an array or NULL we arrive here.
            // NULL **MAY** be a result from an earlier parse error (#VALUE or some such, maybe?)
            // so we need to differentiate between NULL and 'the rest of 'em':
            if (args_array[ai] === null) {
                // This is pretty darn illegal as it's the same to us as 'undefined':
                return {
                    severity: 1,         // ERROR > 0
                    index: ai,
                    spec_index: di,
                    spec_bits: dt,
                    is_user_failure: false,
                    message: "Argument #" + (ai + 1) + " is null/empty/undefined; was expecting " + parser.describeFAXbits(dt)
                };
            }
            // 'the rest of 'em': RANGEREF, CELLREF, etc. will only show up as-is in the AST grammar; 
            // here they have been 'expanded' in value arrays already.
            // For simplicity, we simply accept any of those when the function argument is an array/object/non-basic-JS-type:
            if (!(basic_type & (FAX_DATASET | FAX_COLREF | FAX_ROWREF | FAX_CELLREF | FAX_RANGEREF))) {
                oki = {
                    severity: -1,         // WARNING < 0
                    index: ai,
                    spec_index: di,
                    spec_bits: dt,
                    is_user_failure: false,
                    message: "Argument #" + (ai + 1) + " is of incorrect type; was expecting " + parser.describeFAXbits(dt)
                };
                if (break_on_severity_level <= oki.severity) return oki;
            }
            continue;
        }
    }

    if (di < dlen) {
        // Fewer arguments were passed than strictly required. Or is it? (FAX_OPTIONAL / FAX_DOTDOTDOT)
        //
        // It is only OKAY when
        // - ALL missing arguments are FAX_OPTIONAL
        // - this argument is FAX_DOTDOTDOT **AND** no further 'trailing' arguments are expected (COUNTIF()!!!)

        dt = arg_def_set[di]; // FAX_... bits defining the expected argument type.
        // extract basic type and option bits:
        basic_type = (dt & FAX_ANY);
        optional = (dt & FAX_OPTIONAL);
        dotdotdot = (dt & FAX_DOTDOTDOT);
        coerce = (dt & FAX_COERCE);

        if (optional) {
            // We MAY omit this argument, but then we should also be allowed to omit the subsequent ones,
            // otherwise this FAX_OPTIONAL would've been caught inside the for() loop above!
            for (i = di + 1; i < dlen; i++) {
                if (!(arg_def_set[i] & FAX_OPTIONAL)) {
                    // any NON-optional argument following us means we are at fault already!
                    return {
                        severity: 1,         // ERROR > 0
                        index: ai,
                        spec_index: i,
                        spec_bits: arg_def_set[i],
                        is_user_failure: true,
                        message: "Incorrect number of arguments; you did not specify a required argument"
                    };
                }
            }
            // It turns out this argument and all following it are optional, so we're good to go!
        } else if (dotdotdot) {
            // no more /specified/ arguments after this one allowed, because we don't have any more to offer!
            if (di + 1 < dlen) {
                return {
                    severity: 1,         // ERROR > 0
                    index: ai,
                    spec_index: di,
                    spec_bits: dt,
                    is_user_failure: true,
                    message: "Incorrect number of arguments; you did not specify the trailing arguments"
                };
            }
            // We're the last spec entry, so we're good to go!
        } else {
            // We have checked all given function arguments, yet still have some unmatched argument specs, which are NON-OPTIONAL.
            // This means the user didn't provide all the required arguments!
            return {
                severity: 1,         // ERROR > 0
                index: ai,
                spec_index: di,
                spec_bits: dt,
                is_user_failure: true,
                message: "Incorrect number of arguments; you did not specify one or more required arguments"
            };
        }
    }

    return false;
};


parser.describeFAXbits = function (t) {
    var s, b, d, c, o;

    t |= 0;
    b = (t & FAX_ANY);
    o = (t & FAX_OPTIONAL);
    c = (t & FAX_COERCE);
    d = (t & FAX_DOTDOTDOT);

    if (b === FAX_ANY) {
        s = "(anything)";
    } else {
        assert(b != 0);
        s = "(";
        if (b & FAX_NUMBER) {
            s += "number";
        }

        // tricky: we 'know' the FAX_COMPLEX_NUMBER only shows up in the spec when it is FAX_NUMBER | FAX_COMPLEX_NUMBER, i.e. FAX_NUMBER | FAX_STRING:
        if ((FAX_NUMBER | FAX_STRING | FAX_COMPLEX_NUMBER) === (b & (FAX_NUMBER | FAX_STRING | FAX_COMPLEX_NUMBER))) {
            if (s) s += ",";
            s += "complex";
        }

        if (b & FAX_DATE) {
            if (s) s += ",";
            s += "date";
        }
        if (b & FAX_BOOLEAN) {
            if (s) s += ",";
            s += "boolean";
        }
        if (b & FAX_STRING) {
            if (s) s += ",";
            s += "string";
        }
        if (b & FAX_DATASET) {
            if (s) s += ",";
            s += "dataset";
        }
        if (b & FAX_COLREF) {
            if (s) s += ",";
            s += "columnREF";
        }
        if (b & FAX_ROWREF) {
            if (s) s += ",";
            s += "rowREF";
        }
        if (b & FAX_CELLREF) {
            if (s) s += ",";
            s += "cellREF";
        }
        if (b & FAX_RANGEREF) {
            if (s) s += ",";
            s += "rangeREF";
        }

        s += ")";
    }

    if (c) {
        s += "*";
    }

    if (d) {
        s += "...";
    }

    if (o) {
        s = "[" + s + "]";
    }

    return s;
};

/* generated by jison-lex 0.3.4-107 */
var lexer = (function () {
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript
function JisonLexerError(msg, hash) {
    this.message = msg;
    this.hash = hash;
    var stacktrace = (new Error(msg)).stack;
    if (stacktrace) {
      this.stack = stacktrace;
    }
}
JisonLexerError.prototype = Object.create(Error.prototype);
JisonLexerError.prototype.constructor = JisonLexerError;
JisonLexerError.prototype.name = 'JisonLexerError';

var lexer = ({

EOF:1,

ERROR:2,

parseError:function parseError(str, hash) {
        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {
            return this.yy.parser.parseError(str, hash) || this.ERROR;
        } else {
            throw new this.JisonLexerError(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this._signaled_error_token = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        if (!this._input) {
            this.done = true;
            return null;
        }
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        // Count the linenumber up when we hit the LF (or a stand-alone CR).
        // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
        // and we advance immediately past the LF as well, returning both together as if
        // it was all a single 'character' only.
        var slice_len = 1;
        var lines = false;
        if (ch === '\n') {
            lines = true;
        } else if (ch === '\r') {
            lines = true;
            var ch2 = this._input[1];
            if (ch2 === '\n') {
                slice_len++;
                ch += ch2;
                this.yytext += ch2;
                this.yyleng++;
                this.offset++;
                this.match += ch2;
                this.matched += ch2;
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }
            }
        }
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(slice_len);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yyleng - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - len);
        this.matched = this.matched.substr(0, this.matched.length - len);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }

        this.yylloc.last_line = this.yylineno + 1;
        this.yylloc.last_column = (lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                + oldLines[oldLines.length - lines.length].length - lines[0].length :
                this.yylloc.first_column - len);

        if (this.options.ranges) {
            this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng - len;
        }
        this.yyleng = this.yyleng;
        this.done = false;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            // when the parseError() call returns, we MUST ensure that the error is registered.
            // We accomplish this by signaling an 'error' token to be produced for the current
            // .lex() run.
            this._signaled_error_token = (this.parseError('Lexical error on line ' + (this.yylineno + 1) + ': You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: this.match,
                token: null,
                line: this.yylineno,
                loc: this.yylloc,
                lexer: this
            }) || this.ERROR);
        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// return (part of the) already matched input, i.e. for error messages
pastInput:function (maxSize) {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        if (maxSize < 0)
            maxSize = past.length;
        else if (!maxSize)
            maxSize = 20;
        return (past.length > maxSize ? '...' + past.substr(-maxSize) : past);
    },

// return (part of the) upcoming input, i.e. for error messages
upcomingInput:function (maxSize) {
        var next = this.match;
        if (maxSize < 0)
            maxSize = next.length + this._input.length;
        else if (!maxSize)
            maxSize = 20;
        if (next.length < maxSize) {
            next += this._input.substr(0, maxSize - next.length);
        }
        return (next.length > maxSize ? next.substr(0, maxSize) + '...' : next);
    },

// return a string which displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput().replace(/\s/g, ' ');
        var c = new Array(pre.length + 1).join('-');
        return pre + this.upcomingInput().replace(/\s/g, ' ') + '\n' + c + '^';
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yyleng;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset + this.yyleng];
        }
        this.offset += this.yyleng;
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        } else if (this._signaled_error_token) {
            // produce one 'error' token as .parseError() in reject() did not guarantee a failure signal by throwing an exception!
            token = this._signaled_error_token;
            this._signaled_error_token = false;
            return token;
        }
        return false;
    },

// return next match in input
next:function () {
        function clear() {
            this.yytext = '';
            this.yyleng = 0;
            this.match = '';
            this.matches = false;
            this._more = false;
            this._backtrack = false;
        }

        if (this.done) {
            clear.call(this);
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            clear.call(this);
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === '') {
            clear.call(this);
            this.done = true;
            return this.EOF;
        } else {
            token = this.parseError('Lexical error on line ' + (this.yylineno + 1) + ': Unrecognized text.\n' + this.showPosition(), {
                text: this.match + this._input,
                token: null,
                line: this.yylineno,
                loc: this.yylloc,
                lexer: this
            }) || this.ERROR;
            if (token === this.ERROR) {
                // we can try to recover from a lexer error that parseError() did not 'recover' for us, by moving forward at least one character at a time:
                if (!this.match.length) {
                    this.input();
                }
            }
            return token;
        }
    },

// return next match that has a token
lex:function lex() {
        var r;
        // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
        if (typeof this.options.pre_lex === 'function') {
            r = this.options.pre_lex.call(this);
        }
        while (!r) {
            r = this.next();
        }
        if (typeof this.options.post_lex === 'function') {
            // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.options.post_lex.call(this, r) || r;
        }
        return r;
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions['INITIAL'].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return 'INITIAL';
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {
  backtrack_lexer: true
},
JisonLexerError: JisonLexerError,
performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {

    /*
     * This chunk is included in the lexer action code at the very start of that method.
     *
     * `YY_START` is defined then, `YYSTATE` is not! `yy` and `yy_` are also available here.
     */
    var s, s2, s3;
    var rv, rv2, e_offset, col, row, len, value;
    var match, match2;

    //console.log("lexer action: ", yy, yy_, this, yy_.yytext, YY_START, $avoiding_name_collisions);

    var parser = yy.parser;

var YYSTATE = YY_START;
switch($avoiding_name_collisions) {
case 0 : 
/*! Conditions:: PARSE_MODE_DETECTION */ 
/*! Rule::       \u0001 */ 
 
            this.popState();
            return 9;
         
break;
case 1 : 
/*! Conditions:: PARSE_MODE_DETECTION */ 
/*! Rule::       \u0002 */ 
 
            this.popState();
            return 11;
         
break;
case 2 : 
/*! Conditions:: PARSE_MODE_DETECTION */ 
/*! Rule::       \u0003 */ 
 
            this.popState();
            return 13;
         
break;
case 3 : 
/*! Conditions:: PARSE_MODE_DETECTION */ 
/*! Rule::       . */ 
 
            this.popState();
            /*
             * When we did not observe one of the special character codes at the forefront of our
             * input stream then we will parsing the entire input in the default mode, i.e. as a formula.
             *
             * Therefore, let the previous lexer state (should be `INITIAL`) process this bit instead;
             * do not consume the matched input.
             *
             * **WARNING**: you might think this would be easily accomplished using the lexer.reject()
             * call like this:
             *
             *     this.reject();
             *
             * but `reject()` only works as expected _as long as you do NOT switch lexer states_!
             *
             * Some understanding of the lexer internals is required here: when you call `reject()`, the
             * lexer will simply test the input against the next regex in the current set. The key here
             * is _the current set_: when the lexer is required to produce a token, it will construct
             * a _regex set_ given the _current lexer state_.
             *
             * What we need here is the lexer retrying matching the same input after we changed the
             * lexer state above when we called:
             *
             *     this.popState();
             *
             * The way to accomplish this is to 'push back' the matched content into the input buffer using
             * `.unput()` and then signal the lexer that we matched nothing by returning no token at all:
             *
             *      return false;
             *
             * That `return false` will make sure the lexer considers this action as 'complete' (by
             * us `return`ing from the lexer), while the boolean `false` tells the lexer it will need
             * to run another round in order to provide its caller with a 'real' lexed token.
             *
             *
             * ### For the technically inquisitive
             *
             * The crux is us employing the side effects of the jison lexer engine,
             * more specifically this bit, where I'd like you to take notice of
             * the recursive nature of the `.lex()` method in here, plus the fact that `.next()`
             * will call `._currentRules()` each time it is invoked (while this is a very much
             * reduced and somewhat paraphrased extract of the original):
             *
             *      // generated by jison-lex...
             *      parser.lexer = {
             *          ...,
             *          next: function () {
             *              ...
             *              var match, token, rule_under_test;
             *              var rules = this._currentRules();
             *              for (var i = 0; i < rules.length; i++) {
             *                  rule_under_test = this.rules[rules[i]];
             *                  match = this._input.match(rule_under_test);
             *                  ...
             *                  if (match) {
             *                      // exec the matching lexer action code:
             *                      token = this.test_match(match, rule_under_test);
             *
             *                      // stay in this loop when .reject() was called,
             *                      // otherwise we'll run with this match:
             *                      if (!this.rejected) break;
             *                  }
             *              }
             *              if (match) {
             *                  ...
             *                  if (token !== false) {
             *                      return token;
             *                  }
             *                  // else: this is a lexer rule which consumes input
             *                  //       without producing a token (e.g. whitespace)
             *                  return false;
             *              }
             *              ...
             *          },
             *
             *          // return next match that has a token
             *          lex: function lex() {
             *              var r = this.next();
             *              if (r) {
             *                  return r;
             *              } else {
             *                  return this.lex();
             *              }
             *          },
             *
             *          // produce the lexer rule set which is active
             *          // for the currently active lexer condition state
             *          _currentRules: function _currentRules() {
             *              ...
             *              return this.conditions[...].rules;
             *          },
             *
             *          ...
             *
             *          conditions: {
             *              "PARSE_MODE_DETECTION": {
             *                  rules: [
             *                      0, 1, 2, 3, 4
             *                  ],
             *                  inclusive: false
             *              },
             *              ...
             *              "INITIAL": {
             *                  rules: [
             *                      5, 6, 7, 8, 9,
             *                      ...
             *                  ],
             *                  inclusive: true
             *              }
             *          }
             *      };
             *
             */
            this.unput(this.matches[0]);
            return false;
         
break;
case 4 : 
/*! Conditions:: PARSE_MODE_DETECTION */ 
/*! Rule::       $ */ 
 
            this.popState();
            // let the previous lexer state process that EOF for real...
            return false;
         
break;
case 5 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {DOTTED_ID}(\s*\() */ 
 
            /*
             * All functions and constants are alphanumeric strings.
             * Rather than attempting to match each using a separate
             * regex (and explode the generated lexer), we have this
             * regex as a basic 'catch-all', where we feed the matched
             * input to a symbol table lookup which should be able
             * to produce the proper token code for us!
             *
             * This technique is used extensively in the new AST grammar
             * and the basic idea has been backported (in a somewhat
             * hacky manner) to this grammar. We re-use the code
             * details from the AST grammar to make jison do our bidding.
             */
            // console.log("looking up function identifier token (+ look-ahead) in symbol table: ", yy_.yytext, this, this.matches);
            /*
             * **WARNING**: take heed of the comment in formula-AST.jison regarding the `ID` and `WORD`
             * lexer regex 'macros' and JISON's behaviour regarding those!
             *
             * Hence we should be able to pick up the `(` at the end at `this.matches[3]`!
             */
            this.unput(this.matches[2]);
            s = this.matches[1];
            rv = parser.getSymbol4Function(s);
            /*
             * play nasty: produce a token ID for all functions which we support directly
             * and produce a FUNCTION token (with attribute) for everyone else.
             */
            if (rv) {
                yy_.yytext = {
                    opcode: rv,
                    text: s
                };

                return 59;
            }

            // DRY: and go test the next rule(s) on the same content:
            this.reject();
         
break;
case 6 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       (?:[A-Za-z{[{UNICODE_LETTER}]}0-9][A-Za-z{[{UNICODE_LETTER}]}0-9 \\\/,.:-]+)(?=\s*$) */ 
 
            // TODO: parse as date (+ optional timestamp): if it is A-okay, then we have a hit.
            // 
            // Else: reject.

            // DRY: and go test the next rule(s) on the same content:
            this.reject();
         
break;
case 7 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?\$[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\[\$[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\][:]{WORKBOOK_PREFIX}?\$[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\[\$[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\] */ 
  if (parser.isValidCellRange(yy_.yytext)) { return 83; } else { this.reject(); }  
break;
case 8 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?\$[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\[\$[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\][:]{WORKBOOK_PREFIX}?\$[A-Za-z{[{UNICODE_LETTER}]}]+\$[0-9]+ */ 
  if (parser.isValidCellRange(yy_.yytext)) { return 83; } else { this.reject(); }  
break;
case 9 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?\$[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\[\$[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\] */ 
  if (parser.isValidCellRef(yy_.yytext)) { return 74; } else { this.reject(); }  
break;
case 10 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\[\$[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\][:]{WORKBOOK_PREFIX}?[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\[\$[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\] */ 
  if (parser.isValidCellRange(yy_.yytext)) { return 83; } else { this.reject(); }  
break;
case 11 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\[\$[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\][:]{WORKBOOK_PREFIX}?\$[A-Za-z{[{UNICODE_LETTER}]}]+[0-9]+ */ 
  if (parser.isValidCellRange(yy_.yytext)) { return 83; } else { this.reject(); }  
break;
case 12 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\[\$[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\] */ 
  if (parser.isValidCellRef(yy_.yytext)) { return 74; } else { this.reject(); }  
break;
case 13 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?\$[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\[[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\][:]{WORKBOOK_PREFIX}?\$[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\[[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\] */ 
  if (parser.isValidCellRange(yy_.yytext)) { return 83; } else { this.reject(); }  
break;
case 14 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?\$[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\[[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\][:]{WORKBOOK_PREFIX}?[A-Za-z{[{UNICODE_LETTER}]}]+\$[0-9]+ */ 
  if (parser.isValidCellRange(yy_.yytext)) { return 83; } else { this.reject(); }  
break;
case 15 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?\$[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\[[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\] */ 
  if (parser.isValidCellRef(yy_.yytext)) { return 74; } else { this.reject(); }  
break;
case 16 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\[[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\][:]{WORKBOOK_PREFIX}?[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\[[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\] */ 
  if (parser.isValidCellRange(yy_.yytext)) { return 83; } else { this.reject(); }  
break;
case 17 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\[[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\][:]{WORKBOOK_PREFIX}?[A-Za-z{[{UNICODE_LETTER}]}]+[0-9]+ */ 
  if (parser.isValidCellRange(yy_.yytext)) { return 83; } else { this.reject(); }  
break;
case 18 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\[[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\] */ 
  if (parser.isValidCellRef(yy_.yytext)) { return 74; } else { this.reject(); }  
break;
case 19 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?\$[A-Za-z{[{UNICODE_LETTER}]}]+\$[0-9]+[:]{WORKBOOK_PREFIX}?\$[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\[\$[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\] */ 
  if (parser.isValidCellRange(yy_.yytext)) { return 83; } else { this.reject(); }  
break;
case 20 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?\$[A-Za-z{[{UNICODE_LETTER}]}]+\$[0-9]+[:]{WORKBOOK_PREFIX}?\$[A-Za-z{[{UNICODE_LETTER}]}]+\$[0-9]+ */ 
  if (parser.isValidCellRange(yy_.yytext)) { return 83; } else { this.reject(); }  
break;
case 21 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?\$[A-Za-z{[{UNICODE_LETTER}]}]+\$[0-9]+ */ 
  if (parser.isValidCellRef(yy_.yytext)) { return 74; } else { this.reject(); }  
break;
case 22 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?\$[A-Za-z{[{UNICODE_LETTER}]}]+[0-9]+[:]{WORKBOOK_PREFIX}?[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\[\$[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\] */ 
  if (parser.isValidCellRange(yy_.yytext)) { return 83; } else { this.reject(); }  
break;
case 23 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?\$[A-Za-z{[{UNICODE_LETTER}]}]+[0-9]+[:]{WORKBOOK_PREFIX}?\$[A-Za-z{[{UNICODE_LETTER}]}]+[0-9]+ */ 
  if (parser.isValidCellRange(yy_.yytext)) { return 83; } else { this.reject(); }  
break;
case 24 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?\$[A-Za-z{[{UNICODE_LETTER}]}]+[0-9]+ */ 
  if (parser.isValidCellRef(yy_.yytext)) { return 74; } else { this.reject(); }  
break;
case 25 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?[A-Za-z{[{UNICODE_LETTER}]}]+\$[0-9]+[:]{WORKBOOK_PREFIX}?\$[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\[[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\] */ 
  if (parser.isValidCellRange(yy_.yytext)) { return 83; } else { this.reject(); }  
break;
case 26 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?[A-Za-z{[{UNICODE_LETTER}]}]+\$[0-9]+[:]{WORKBOOK_PREFIX}?[A-Za-z{[{UNICODE_LETTER}]}]+\$[0-9]+ */ 
  if (parser.isValidCellRange(yy_.yytext)) { return 83; } else { this.reject(); }  
break;
case 27 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?[A-Za-z{[{UNICODE_LETTER}]}]+\$[0-9]+ */ 
  if (parser.isValidCellRef(yy_.yytext)) { return 74; } else { this.reject(); }  
break;
case 28 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?[A-Za-z{[{UNICODE_LETTER}]}]+[0-9]+[:]{WORKBOOK_PREFIX}?[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\[[A-Za-z{[{UNICODE_LETTER}]}0-9 _]+\] */ 
  if (parser.isValidCellRange(yy_.yytext)) { return 83; } else { this.reject(); }  
break;
case 29 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?[A-Za-z{[{UNICODE_LETTER}]}]+[0-9]+[:]{WORKBOOK_PREFIX}?[A-Za-z{[{UNICODE_LETTER}]}]+[0-9]+ */ 
  if (parser.isValidCellRange(yy_.yytext)) { return 83; } else { this.reject(); }  
break;
case 30 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WORKBOOK_PREFIX}?[A-Za-z{[{UNICODE_LETTER}]}]+[0-9]+ */ 
  if (parser.isValidCellRef(yy_.yytext)) { return 74; } else { this.reject(); }  
break;
case 31 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       (?:[0-9]+(?:\.[0-9]+)?|\.[0-9]+)[kKmMgG]|[0-9]+[kKmMgG][0-9]+ */ 
 
            /*
             * Numbers with Kilo, Mega or Giga, including **resistor notation**, i.e. `1K5`.
             *
             * Keep in mind that certain locations in a formula do accept 'labels'
             * which can look **exactly** like 'numbers' for pathologically-named
             * row/column labels, e.g. `2K12`.
             *
             * We use the parser to disambiguate between the two when the lexer rules
             * above haven't already dealt with this condition.
             */

            s = yy_.yytext;
            rv = s.match(/^([^kKmMgG]+)([kKmMgG])([^kKmMgG]*)$/);
            //console.log("parsing 'resistor notation' value: ", rv, s);
            switch (rv[2].toUpperCase()) {
            case "K":
                rv2 = 1E3;
                break;

            case "M":
                rv2 = 1E6;
                break;

            case "G":
                rv2 = 1E9;
                break;

            default:
                rv2 = 1;
                break;
            }
            if (rv[3].length > 0) {
                rv[1] = rv[1] + "." + rv[3];
            }
            s2 = Number(rv[1]) * rv2;

            yy_.yytext = s2;

            // since these numbers cannot 'pose' as ROW numbers, we need not check for `INTEGER_NUMBER` suitability:
            return 90;
         
break;
case 32 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       (?:[0-9]+(?:\.[0-9]+)?|\.[0-9]+)(?:[eE][+-]?[0-9]+)? */ 
 
            /*
             * Any numbers, including those in 'scientific notation', i.e. `1E5`
             *
             * Keep in mind that certain locations in a formula do accept 'labels'
             * which can look **exactly** like 'numbers' for pathologically-named
             * row / column labels, e.g. `2012`.
             *
             * We use the parser to disambiguate between the two when the lexer rules
             * above haven't already dealt with this condition.
             */

            s = yy_.yytext;
            // http://jsperf.com/number-vs-plus-vs-toint-vs-tofloat/26 --> parseFloat()
            s2 = parseFloat(s);

            yy_.yytext = s2;

            // for a number to be a floating point number, it must have a dot or an E part or be too large / small to be an integer
            if (parseInt(s, 10) !== s2) {
                return 90;
            }
            // else:
            return 91;
         
break;
case 33 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       [%](?=\s*([^0-9A-Za-z{[{UNICODE_LETTER}]}_\(\s]|$)) */ 
 
            yy_.yytext = '%';
            return 86;
         
break;
case 34 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \S{1,3} */ 
 
            /*
             * Check if the matched string STARTS WITH an operator in the list below.
             *
             * On the first pass, a hash table is created (and cached) to speed up matching.
             */
            if (!this.__operator_hash_table) {
                var definition_table = [
                    {
                        name: "$",
                        lexer_opcode: FKA_FIXED_ROW_OR_COLUMN_MARKER,
                        produce: function () {
                            return '$';
                        }
                    },
                    {
                        name: ":",
                        lexer_opcode: FKA_RANGE_MARKER,
                        produce: function () {
                            return ':';
                        }
                    },
                    {
                        name: "...",                   /* .. and ... equal : */
                        lexer_opcode: FKA_RANGE_MARKER,
                        produce: function () {
                            return ':';
                        }
                    },
                    {
                        name: "..",                    /* .. and ... equal : */
                        lexer_opcode: FKA_RANGE_MARKER,
                        produce: function () {
                            return ':';
                        }
                    },
                    {
                        name: ",",
                        lexer_opcode: FKA_COMMA,
                        produce: function () {
                            return 81;
                        }
                    },
                    {
                        name: "/*",
                        produce: function (loc) {
                            // set the end-of-comment marker for this comment and switch to parsing the comment
                            if (this.options.inline_comment_mode < this.inline_comments_monitor) {
                                this.inline_comment_end_markers = ["*/"];
                                this.inline_comment_start_yylloc = parser.deepCopy(loc);
                                this.pushState('INLINE_COMMENT');
                                return false;
                            }
                            // no dice, try another!
                            this.reject();
                        }
                    },
                    {
                        name: "(*",
                        produce: function (loc) {
                            // set the end-of-comment marker for this comment and switch to parsing the comment
                            if (this.options.inline_comment_mode < this.inline_comments_monitor) {
                                this.inline_comment_end_markers = ["*)"];
                                this.inline_comment_start_yylloc = parser.deepCopy(loc);
                                this.pushState('INLINE_COMMENT');
                                return false;
                            }
                            // no dice, try another!
                            this.reject();
                        }
                    },
                    {
                        name: "{*",
                        produce: function (loc) {
                            // set the end-of-comment marker for this comment and switch to parsing the comment
                            if (this.options.inline_comment_mode < this.inline_comments_monitor) {
                                this.inline_comment_end_markers = ["*}"];
                                this.inline_comment_start_yylloc = parser.deepCopy(loc);
                                this.pushState('INLINE_COMMENT');
                                return false;
                            }
                            // no dice, try another!
                            this.reject();
                        }
                    },
                    {
                        name: "#",
                        produce: function (loc) {
                            // set the end-of-comment marker for this comment and switch to parsing the comment
                            if (this.options.inline_comment_mode < this.inline_comments_monitor) {
                                this.inline_comment_end_markers = ["#"];
                                this.inline_comment_start_yylloc = parser.deepCopy(loc);
                                this.pushState('INLINE_COMMENT');
                                return false;
                            }
                            // no dice, try another!
                            this.reject();
                        }
                    },
                    {
                        name: "\u203c",                                  /* ‼ */
                        produce: function (loc) {
                            // set the end-of-comment marker for this comment and switch to parsing the comment
                            if (this.options.inline_comment_mode < this.inline_comments_monitor) {
                                this.inline_comment_end_markers = ["!!", "\u203c" /* ‼ */];
                                this.inline_comment_start_yylloc = parser.deepCopy(loc);
                                this.pushState('INLINE_COMMENT');
                                return false;
                            }
                            // no dice, try another!
                            this.reject();
                        }
                    },
                    {
                        name: "\u2590",                                  /* ▐ */
                        produce: function (loc) {
                            // set the end-of-comment marker for this comment and switch to parsing the comment
                            if (this.options.inline_comment_mode < this.inline_comments_monitor) {
                                this.inline_comment_end_markers = ["\u258c" /* ▌ */, "\u2590" /* ▐ */];
                                this.inline_comment_start_yylloc = parser.deepCopy(loc);
                                this.pushState('INLINE_COMMENT');
                                return false;
                            }
                            // no dice, try another!
                            this.reject();
                        }
                    },
                    {
                        name: "&&",
                        opcode: FKW_BOOLEAN_AND_OPERATOR | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            return 24;
                        }
                    },
                    {
                        name: "||",
                        opcode: FKW_BOOLEAN_OR_OPERATOR | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            return 25;
                        }
                    },
                    {
                        name: "&",
                        opcode: FKW_STRING_CONCATENATION_OPERATOR | FT_STRING | FU_STRING,
                        produce: function () {
                            return 38;
                        }
                    },
                    {
                        name: "<=",
                        opcode: FKW_LESS_OR_EQUAL | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            return 34;
                        }
                    },
                    {
                        name: ">=",
                        opcode: FKW_GREATER_OR_EQUAL | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            return 33;
                        }
                    },
                    {
                        name: "<>",
                        opcode: FKW_NOT_EQUAL | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            return 27;
                        }
                    },
                    {
                        name: "!=",
                        opcode: FKW_NOT_EQUAL | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            return 27;
                        }
                    },
                    {
                        name: "!==",
                        opcode: FKW_NOT_IDENTICAL | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            return 28;
                        }
                    },
                    {
                        name: "<",
                        opcode: FKW_LESS_THAN | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            return 36;
                        }
                    },
                    {
                        name: ">",
                        opcode: FKW_GREATER_THAN | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            return 35;
                        }
                    },
                    {
                        name: "===",
                        opcode: FKW_IS_IDENTICAL | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            return 31;
                        }
                    },
                    {
                        name: "==",
                        opcode: FKW_EQUAL | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            return 37;
                        }
                    },
                    {
                        name: "=",
                        opcode: FKW_EQUAL | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            // This MAY be the `=` starting a formula: mark the event for the inline comments:
                            if (this.options.inline_comment_mode > 0) {
                                if (!this.inline_comments_monitor) {
                                    this.inline_comments_monitor = this.options.inline_comment_mode + 1;
                                }
                            }
                            return 6;
                        }
                    },
                    {
                        name: "**",
                        opcode: FKW_POWER | FT_NUMBER | FU_ANY,
                        produce: function () {
                            return 47;
                        }
                    },
                    {
                        name: "*",
                        opcode: FKW_MULTIPLY | FT_NUMBER | FU_DERIVED,
                        produce: function () {
                            return 42;
                        }
                    },
                    {
                        name: "/",
                        opcode: FKW_DIVIDE | FT_NUMBER | FU_DERIVED,
                        produce: function () {
                            return 43;
                        }
                    },
                    {
                        name: "-",
                        opcode: FKW_SUBTRACT | FT_NUMBER | FU_DERIVED,
                        produce: function () {
                            return 40;
                        }
                    },
                    {
                        name: "+",
                        opcode: FKW_ADD | FT_NUMBER | FU_DERIVED,
                        produce: function () {
                            return 39;
                        }
                    },
                    {
                        name: "^",
                        opcode: FKW_POWER | FT_NUMBER | FU_ANY,
                        produce: function () {
                            return 47;
                        }
                    },
                    {
                        name: "%",
                        opcode: FKW_MODULO_OPERATOR,
                        produce: function () {
                            return 44;
                        }
                    },
                    {
                        name: "\u2030",
                        opcode: FKW_PROMILAGE_OPERATOR,
                        produce: function () {
                            return 85;                 /* ‰ */
                        }
                    },
                    {
                        name: "\u221a",
                        opcode: FKW_SQRT_OPERATOR | FT_NUMBER | FU_ANY,
                        produce: function () {
                            return 48;                     /* √ */
                        }
                    },
                    {
                        name: "\u2248",
                        opcode: FKW_ALMOST_EQUAL | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            return 30;                      /* ≈ */
                        }
                    },
                    {
                        name: "\u2260",
                        opcode: FKW_NOT_EQUAL | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            return 27;                         /* ≠ */
                        }
                    },
                    {
                        name: "\u2264",
                        opcode: FKW_LESS_OR_EQUAL | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            return 34;                     /* ≤ */
                        }
                    },
                    {
                        name: "\u2265",
                        opcode: FKW_GREATER_OR_EQUAL | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            return 33;                  /* ≥ */
                        }
                    },
                    {
                        name: "\u2212",
                        opcode: FKW_SUBTRACT | FT_NUMBER | FU_DERIVED,
                        produce: function () {
                            return 40;                                 /* − */
                        }
                    },
                    {
                        name: "\u2013",
                        opcode: FKW_SUBTRACT | FT_NUMBER | FU_DERIVED,
                        produce: function () {
                            return 40;                                 /* – */
                        }
                    },
                    {
                        name: "\u2012",
                        opcode: FKW_SUBTRACT | FT_NUMBER | FU_DERIVED,
                        produce: function () {
                            return 40;                                 /* ‒ */
                        }
                    },
                    {
                        name: "\u2014",
                        opcode: FKW_SUBTRACT | FT_NUMBER | FU_DERIVED,
                        produce: function () {
                            return 40;                                 /* — */
                        }
                    },
                    {
                        name: "\u2215",
                        opcode: FKW_DIVIDE | FT_NUMBER | FU_DERIVED,
                        produce: function () {
                            return 43;                                 /* ∕ */
                        }
                    },
                    {
                        name: "\u2044",
                        opcode: FKW_DIVIDE | FT_NUMBER | FU_DERIVED,
                        produce: function () {
                            return 43;                                 /* ⁄ */
                        }
                    },
                    {
                        name: "\u2219",
                        opcode: FKW_MULTIPLY | FT_NUMBER | FU_DERIVED,
                        produce: function () {
                            return 42;                                 /* ∙ */
                        }
                    },
                    {
                        name: "\u2022",
                        opcode: FKW_MULTIPLY | FT_NUMBER | FU_DERIVED,
                        produce: function () {
                            return 42;                                 /* • */
                        }
                    },
                    {
                        name: "\u2261",
                        opcode: FKW_IS_IDENTICAL | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            return 31;                      /* ≡ */
                        }
                    },
                    {
                        name: "\u2310",
                        opcode: FKW_BOOLEAN_NOT_OPERATOR | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            return 55;                                 /* ⌐ */
                        }
                    },
                    {
                        name: "\u00ac",
                        opcode: FKW_BOOLEAN_NOT_OPERATOR | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            return 55;                                 /* ¬ */
                        }
                    },
                    {
                        name: "!",
                        opcode: FKW_BOOLEAN_NOT_OPERATOR | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            return 55;
                        }
                    },
                    {
                        name: "\u2229",
                        opcode: FKW_BOOLEAN_AND_OPERATOR | FT_BOOLEAN | FU_DERIVED,
                        produce: function () {
                            return 24;              /* ∩ */
                        }
                    },
                    {
                        name: "\u00f7",
                        opcode: FKW_DIVIDE | FT_NUMBER | FU_DERIVED,
                        produce: function () {
                            return 43;                                 /* ÷ */
                        }
                    },
                    {
                        name: "\u00d7",
                        opcode: FKW_MULTIPLY | FT_NUMBER | FU_DERIVED,
                        produce: function () {
                            return 42;                                 /* × */
                        }
                    },
                    {
                        name: "\u00b7",
                        opcode: FKW_MULTIPLY | FT_NUMBER | FU_DERIVED,
                        produce: function () {
                            return 42;                                 /* · */
                        }
                    },
                    {
                        name: "\u2219",
                        opcode: FKW_MULTIPLY | FT_NUMBER | FU_DERIVED,
                        produce: function () {
                            return 42;                                 /* ∙ */
                        }
                    },
                    {
                        name: "\u00b0",
                        opcode: FKW_DEGREES_OPERATOR,
                        produce: function () {
                            return 87;                  /* ° */
                        }
                    },
                    {
                        name: "\u00b2",
                        opcode: FKW_SQUARE_OPERATOR | FT_NUMBER | FU_DERIVED,
                        produce: function () {
                            return 49;                   /* ² */
                        }
                    },
                    {
                        name: "\u00b3",
                        opcode: FKW_CUBE_OPERATOR | FT_NUMBER | FU_DERIVED,
                        produce: function () {
                            return 50;                     /* ³ */
                        }
                    },
                    {
                        /*
                         * This token is an alternative notation which does not require the curly braces around
                         * a 'fragmented range reference', e.g. `{A1, A2, A3, B1}` is equivalent to `A1 ○ A2 ○ A3 ○ B1`
                         * which could also be written as `A1:A3 ○ B1`
                         */
                        name: "\u25cb",
                        opcode: FKW_ARRAY_CONCATENATION_OPERATOR,
                        produce: function () {
                            return 75;      /* ○ */
                        }
                    },
                    {
                        /*
                         * This token is an alternative notation which does not require the curly braces around
                         * a 'fragmented range reference', e.g. `{A1, A2, A3, B1}` is equivalent to `A1 ○ A2 ○ A3 ○ B1`
                         * which could also be written as `A1:A3 ○ B1`
                         */
                        name: "\u25e6",
                        opcode: FKW_ARRAY_CONCATENATION_OPERATOR,
                        produce: function () {
                            return 75;      /* ◦ */
                        }
                    },
                    {
                        name: "@",
                        opcode: FKW_DATA_MARKER,
                        produce: function () {
                            return '@';
                        }
                    },
                    {
                        name: "?",
                        opcode: FKW_TOPS20_HELP_REQUEST,
                        produce: function () {
                            return 51;             // most probably TOPS20-style help request
                        }
                    },
                    {
                        name: ".",
                        opcode: FKW_DOT,
                        produce: function () {
                            // switch lexer modes RIGHT NOW: next up is the `json_filter_expression` rule!
                            assert(this.topState() !== 'JSON_FILTERING');
                            //this.pushState('JSON_FILTERING'); Fixed #880 

                            return 57;
                        }
                    }
                ];
                var k, d, tlen, ht;

                ht = [{}, {}, {}, {}];
                for (var k = 0, tlen = definition_table.length; k < tlen; k++) {
                    d = definition_table[k];
                    assert(d.name);
                    ht[d.name.length][d.name] = d;
                }

                this.__operator_hash_table = ht;
            }

            var s1 = false, s2 = false, s3 = false;

            s = yy_.yytext;
            switch (s.length) {
            case 3:
                s3 = s;
                s = s.substr(0, 2);
                // fall through
            case 2:
                s2 = s;
                s = s.substr(0, 1);
                // fall through
            case 1:
                s1 = s;
                break;
            default:
                assert(0, "should never get here");
                break;
            }

            // reset `s`:
            s = yy_.yytext;

            // now find matches in the operator lookup table, largest match first:
            rv = this.__operator_hash_table[3][s3] || this.__operator_hash_table[2][s2] || this.__operator_hash_table[1][s1];
            if (rv) {
                // push the remainder back into the buffer before we continue:
                if (s.length > rv.name.length) {
                    this.unput(s.substr(rv.name.length));
                }

                if (rv.opcode) {
                    yy_.yytext = rv.name;
                } else if (rv.lexer_opcode) {
                    yy_.yytext = rv.name;
                }
                return rv.produce.call(this, yy_.yylloc, yy_.yytext);
            }

            /* This may be a single Unicode character representing some constant or currency */
            if (s.length > 1) {
                this.unput(s.substr(1));
            }
            s = s1;

            rv = parser.getSymbol4Currency(s);
            if (rv) {
                yy_.yytext = s;
                return 88;
            }

            // no dice, now see if this is a predefined constant
            rv = parser.getSymbol4DefinedConstant(s);
            if (rv) {
                yy_.yytext = rv.value;
                switch (rv.attributes & OPCODE_MASK_FOR_FT_VALUE_TYPE) {
                default:
                    return 92;

                case FT_BOOLEAN:
                    if (rv.value)
                        return 93;
                    else
                        return 94;

                case FT_STRING:
                    return 95;
                }
            }

            // when we don't have a match at all, we leave it to the other rules to hit something:
            this.reject();
         
break;
case 41 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \u2039([^\u203a]*)\u203a */ 
                                                   /* ‹string› */
            s = this.matches[1];
            yy_.yytext = s;
            return 95;
         
break;
case 42 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \u201c([^\u201d]*)\u201d */ 
                                                   /* “string” */
            s = this.matches[1];
            yy_.yytext = s;
            return 95;
         
break;
case 43 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \u00ab([^\u00bb]*)\u00bb */ 
                                                   /* «string» */
            s = this.matches[1];
            yy_.yytext = s;
            return 95;
         
break;
case 44 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       '(.*)$ */ 
 
            // This lexer rule should only accept Excel string values, i.e. non-formula entities
            // which start with a quote.
            //
            // TODO: later on make the lexer smarter (and a bit faster) by using lexer states
            // instead of this hack which checks the location info to recognize whether this is
            // the very first token we encounter: only when it is does this special situation apply.
            var pos = this.offset - yy_.yyleng;
            if (pos > 0) {
                this.reject();
            } else {
                s = this.matches[1];
                // s2 = parser.dedupQuotedString(s, "'");  -- Excel does not 'deduplicate' quotes in literal string values like these.

                yy_.yytext = s;
                // In MS Excel you can force any (entire!) formula or other input to be parsed as a string by prefixing it with a single "'" single quote.
                return 22;
            }
         
break;
case 45 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       "(.*)$ */ 
 
            // This lexer rule should only accept Excel string values, i.e. non-formula entities
            // which start with a quote.
            //
            // TODO: later on make the lexer smarter (and a bit faster) by using lexer states
            // instead of this hack which checks the location info to recognize whether this is
            // the very first token we encounter: only when it is does this special situation apply.
            var pos = this.offset - yy_.yyleng;
            if (pos > 0) {
                this.reject();
            } else {
                s = this.matches[1];
                // s2 = parser.dedupQuotedString(s, '"');  -- Excel does not 'deduplicate' quotes in literal string values like these.

                yy_.yytext = s;
                // In MS Excel you can force any (entire!) formula or other input to be parsed as a string by prefixing it with a single "'" single quote.
                return 22;
            }
         
break;
case 46 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       '([^']*(?:''[^']*)*)'{TOKEN_SENTINEL} */ 
 
            this.unput(this.matches[2]);

            s = this.matches[1];
            s2 = parser.dedupQuotedString(s, "'");
            yy_.yytext = s2;
            return 95;
         
break;
case 47 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       "([^"]*(?:""[^"]*)*)"{TOKEN_SENTINEL} */ 
 
            this.unput(this.matches[2]);

            s = this.matches[1];
            s2 = parser.dedupQuotedString(s, '"');
            yy_.yytext = s2;
            return 95;
         
break;
case 48 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \s+ */ 
 /*: skip whitespace */ 
break;
case 50 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {DOTTED_WORDS} */ 
 
            rv = yy.parser.parseError("Don't know what to do with this: it's unsupported input.", {
                text: yy_.yytext,
                //token: $error,
                line: yy_.yylloc,
                loc: yy_.yylloc,
                outer_loc: yy_.yylloc,
                expected: [],
                recoverable: false
            });
            assert(rv === null);
            return 2;
         
break;
case 51 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       . */ 
 
            rv = yy.parser.parseError("Don't know what to do with this: it's unsupported input.", {
                text: yy_.yytext,
                //token: $error,
                line: yy_.yylloc,
                loc: yy_.yylloc,
                outer_loc: yy_.yylloc,
                expected: [],
                recoverable: false
            });
            assert(rv === null);
            return 2;
         
break;
case 52 : 
/*! Conditions:: INLINE_COMMENT */ 
/*! Rule::       [^/\*\)\}#!\u203c\u258c\u2590]+ */ 
                                                   /* * / ) | # ! ‼ ▌ ▐ */
            /* keep it all; we haven't hit an end-of-comment marker starting character yet! */
            this.more();
         
break;
case 53 : 
/*! Conditions:: INLINE_COMMENT */ 
/*! Rule::       . */ 
 
            for (rv = 0, len = this.inline_comment_end_markers.length; rv < len; rv++) {
                s2 = this.inline_comment_end_markers[rv];
                if (s2[0] === this.matches[0]) {
                    // we got a POTENTIAL MATCH; let's see if we need more:
                    if (s2.length > 1) {
                        // when yes, test the next rule!
                        this.reject();
                        return false;
                    } else {
                        /*
                        * Full match! end of comment reached.
                        *
                        * Remove this last bit from the parsed text and strip leading / trailing whitespace.
                        *
                        * > ### Notes
                        * >
                        * > Since returning actual tokens for any inline comments would
                        * > break the LALR(1) grammar most severely, we concatenate
                        * > comments and attach them to the next token.
                        * >
                        * > Since the 'next token' MAY be `EOF`, we need the parser
                        * > to check if there's any leech called `comment` hanging
                        * > off that EOF it might've got dropped in the in-box...
                        */
                        parser.pushComment();
                        this.popState();
                        return false;
                    }
                }
            }
            // collect input until we hit something we know:
            this.more();
         
break;
case 54 : 
/*! Conditions:: INLINE_COMMENT */ 
/*! Rule::       .. */ 
 
            /*
             * We only hit this rule when the previous one was `reject()`-ed
             * as that rule will match anything that's the start of this one.
             *
             * Hence we know we have a partial match on a comment terminator,
             * but we need to make sure.
             *
             * We also know that our longest 'end markers' are 2 characters wide,
             * so this solution is sufficient and complete.
             *
             * Now all we have to do is scan the longer-than-1-character
             * comment markers against what we've got here and if there's
             * NO MATCH, we need to keep in mind that nasty people can write
             * comments like `{***}` and we have a hit on `**}` so we may only
             * consume one character here in that case.
             */
            for (rv = 0, len = this.inline_comment_end_markers.length; rv < len; rv++) {
                s2 = this.inline_comment_end_markers[rv];
                if (s2 === this.matches[0]) {
                    /*
                     * Full match! end of comment reached.
                     *
                     * Remove this last bit from the parsed text and strip leading/trailing whitespace.
                     *
                     * Since returning actual tokens for any inline comments would
                     * break the LALR(1) grammar most severely, we concatenate
                     * comments and attach them to the next token.
                     *
                     * Since the 'next token' MAY be `EOF`, we need the parser
                     * to check if there's any leech called `comment` hanging
                     * of that EOF it might've got dropped in the in-box...
                     */
                    parser.pushComment();
                    this.popState();
                    return false;
                }
            }
            // we may only consume a single character, so we `unput()` the last one:
            this.less(1);

            // collect input until we hit something we know:
            this.more();
         
break;
case 55 : 
/*! Conditions:: INLINE_COMMENT */ 
/*! Rule::       $ */ 
 
            parser.pushComment();

            rv = yy.parser.parseError("Unterminated inline comment.", {
                text: yy_.yytext,
                //token: $error,
                line: yy_.yylloc,
                loc: yy_.yylloc,
                outer_loc: yy_.yylloc,
                expected: [],
                recoverable: false
            });
            assert(rv === null);
            return 2;
         
break;
default:
  return this.simpleCaseActionClusters[$avoiding_name_collisions];
}
},
simpleCaseActionClusters: {

  /*! Conditions:: INITIAL */ 
  /*! Rule::       \( */ 
   35 : 60,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \) */ 
   36 : 62,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \{ */ 
   37 : 78,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \} */ 
   38 : 80,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \[ */ 
   39 : 66,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \] */ 
   40 : 67,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       $ */ 
   49 : 5
},
rules: [
/^(?:\u0001)/,
/^(?:\u0002)/,
/^(?:\u0003)/,
/^(?:.)/,
/^(?:$)/,
/^(?:([A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я_](?:[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9_.]*[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9_])?)(\s*\())/,
/^(?:(?:[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9][A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 \\\/,.:-]+)(?=\s*$))/,
/^(?:([0-9]+[!])?\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\[\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\][:]([0-9]+[!])?\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\[\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\])/,
/^(?:([0-9]+[!])?\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\[\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\][:]([0-9]+[!])?\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я]+\$[0-9]+)/,
/^(?:([0-9]+[!])?\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\[\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\])/,
/^(?:([0-9]+[!])?[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\[\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\][:]([0-9]+[!])?[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\[\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\])/,
/^(?:([0-9]+[!])?[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\[\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\][:]([0-9]+[!])?\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я]+[0-9]+)/,
/^(?:([0-9]+[!])?[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\[\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\])/,
/^(?:([0-9]+[!])?\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\[[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\][:]([0-9]+[!])?\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\[[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\])/,
/^(?:([0-9]+[!])?\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\[[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\][:]([0-9]+[!])?[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я]+\$[0-9]+)/,
/^(?:([0-9]+[!])?\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\[[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\])/,
/^(?:([0-9]+[!])?[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\[[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\][:]([0-9]+[!])?[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\[[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\])/,
/^(?:([0-9]+[!])?[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\[[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\][:]([0-9]+[!])?[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я]+[0-9]+)/,
/^(?:([0-9]+[!])?[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\[[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\])/,
/^(?:([0-9]+[!])?\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я]+\$[0-9]+[:]([0-9]+[!])?\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\[\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\])/,
/^(?:([0-9]+[!])?\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я]+\$[0-9]+[:]([0-9]+[!])?\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я]+\$[0-9]+)/,
/^(?:([0-9]+[!])?\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я]+\$[0-9]+)/,
/^(?:([0-9]+[!])?\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я]+[0-9]+[:]([0-9]+[!])?[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\[\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\])/,
/^(?:([0-9]+[!])?\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я]+[0-9]+[:]([0-9]+[!])?\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я]+[0-9]+)/,
/^(?:([0-9]+[!])?\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я]+[0-9]+)/,
/^(?:([0-9]+[!])?[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я]+\$[0-9]+[:]([0-9]+[!])?\$[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\[[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\])/,
/^(?:([0-9]+[!])?[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я]+\$[0-9]+[:]([0-9]+[!])?[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я]+\$[0-9]+)/,
/^(?:([0-9]+[!])?[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я]+\$[0-9]+)/,
/^(?:([0-9]+[!])?[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я]+[0-9]+[:]([0-9]+[!])?[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\[[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9 _]+\])/,
/^(?:([0-9]+[!])?[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я]+[0-9]+[:]([0-9]+[!])?[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я]+[0-9]+)/,
/^(?:([0-9]+[!])?[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я]+[0-9]+)/,
/^(?:(?:[0-9]+(?:\.[0-9]+)?|\.[0-9]+)[kKmMgG]|[0-9]+[kKmMgG][0-9]+)/,
/^(?:(?:[0-9]+(?:\.[0-9]+)?|\.[0-9]+)(?:[eE][+-]?[0-9]+)?)/,
/^(?:[%](?=\s*([^0-9A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я_\(\s]|$)))/,
/^(?:\S{1,3})/,
/^(?:\()/,
/^(?:\))/,
/^(?:\{)/,
/^(?:\})/,
/^(?:\[)/,
/^(?:\])/,
/^(?:\u2039([^\u203a]*)\u203a)/,
/^(?:\u201c([^\u201d]*)\u201d)/,
/^(?:\u00ab([^\u00bb]*)\u00bb)/,
/^(?:'(.*)$)/,
/^(?:"(.*)$)/,
/^(?:'([^']*(?:''[^']*)*)'(\s*(?:$|[^\s\.A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9_\(\[\{\$\@\!\'\"])))/,
/^(?:"([^"]*(?:""[^"]*)*)"(\s*(?:$|[^\s\.A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9_\(\[\{\$\@\!\'\"])))/,
/^(?:\s+)/,
/^(?:$)/,
/^(?:([A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9_](?:[\sA-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9_.]*[A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜА-Яа-я0-9_])?))/,
/^(?:.)/,
/^(?:[^\/\*\)\}#!\u203c\u258c\u2590]+)/,
/^(?:.)/,
/^(?:..)/,
/^(?:$)/
],
conditions: {
  "PARSE_MODE_DETECTION": {
    rules: [
      0,
      1,
      2,
      3,
      4
    ],
    inclusive: false
  },
  "INLINE_COMMENT": {
    rules: [
      52,
      53,
      54,
      55
    ],
    inclusive: false
  },
  "INITIAL": {
    rules: [
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51
    ],
    inclusive: true
  }
}
});
// lexer.JisonLexerError = JisonLexerError;
return lexer;
})();
parser.lexer = lexer;

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;
// parser.JisonParserError = JisonParserError;

return new Parser();
})();

